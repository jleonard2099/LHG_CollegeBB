'----------------------------------------
'          ChooseTeam Subroutine
'----------------------------------------
'Provides dialog for user to select teams
' from a previously populated team file.
'The focus of this routine is to accept
' a disk ID from the user. It then relies
' on separate subroutines to assist with
' actually choosing the team, and also
' reading in data for the chosen team
Sub ChooseTeam (yearNumber$, numberTeams, chosenIdx, teamName$)

    Shared teamRatings()

    Shared previousYear$

    Do

        Color 15, 0
        Cls

        Call MenuBox(6, 8, 61, 7, 15, 4)

        Locate 7, 32

        Locate , 12: Print "ENTER DISK ID: "
        Print
        Locate , 12: Print "THE DISK ID IS USUALLY THE LAST TWO DIGITS OF THE"
        Locate , 12: Print "SEASON DISK YOU ARE PLAYING FROM (IE. 89, 76, 67)."
        Print
        Locate , 12: Print "HIT <ENTER> TO USE PREVIOUS ID"
        Locate 8,

        I$ = GetKeyPress$

        If I$ <> Chr$(27) Then

            If I$ <> Chr$(13) Then

                Locate 7, 27: Print I$;

                NY$ = ""

                Do Until NY$ = Chr$(13)

                    NY$ = GetKeyPress$

                    If NY$ = Chr$(8) And Len(I$) >= 1 Then
                        col% = Pos(0)
                        I$ = Left$(I$, (Len(I$) - 1))
                        Locate , col% - 1
                        Print " ";
                        Locate , col% - 1
                    Else
                        I$ = I$ + NY$
                        Print NY$;
                    End If

                Loop

                I$ = Left$(I$, (Len(I$) - 1))

                If Not (I$ = "" And yearNumber$ <> "") Then

                    yearNumber$ = RTrim$(I$)
                    Erase teamNames$
                    numberTeams = 0

                    Cls

                    If Not _FileExists(diskPaths$(0) + TEAM_FILE_NAME$ + "." + yearNumber$) Then

                        MsgText$ = "NO TEAMS WERE FOUND MATCHING THAT ID... PRESS ANY KEY TO SELECT ANOTHER ID"
                        BoxWidth = 20
                        BoxHeight = (Len(MsgText$) / BoxWidth) + 3 'top and box lines + 1 extra
                        Locate ((25 - BoxHeight) / 2), (80 - ((BoxWidth + 2) / 2))
                        Call CSMsgBox(MsgText$, BoxWidth, Pass)
                        I$ = GetKeyPress$
                        Call CSMsgBox("", 0, Pass)
                        Exit Sub

                    Else

                        Open diskPaths$(0) + TEAM_FILE_NAME$ + "." + yearNumber$ For Random As #1 Len = TEAM_SIZE_BYTES

                        fileLength& = LOF(1)

                        Field #1, 15 As Q$(0)

                        numberTeams = fileLength& / TEAM_SIZE_BYTES

                        For teamIdx = 1 To numberTeams
                            Get #1, teamIdx
                            'numberTeams = numberTeams + 1
                            teamNames$(teamIdx) = Q$(0)
                            teamIndex%(teamIdx) = teamIdx
                        Next teamIdx

                        Close #1

                    End If 'Done checking if file exists

                End If 'Done checking for blank year number

                previousYear$ = yearNumber$

            Else

                yearNumber$ = previousYear$

            End If 'Done checking for ENTER key

            'Locate 2, 33
            'Color 31: Print "LOADING..."

            Do

                Call SelectTeam(numberTeams, yearNumber$, chosenIdx, teamName$, ExitCode%)
                'teamGender$(gameIdx) = GetTeamGender$(yearNumber$)

                If ExitCode% <> 27 And numberTeams <> 0 And chosenIdx > 0 Then

                    Do

                        YCoord = Int((80 - Len(teamName$)) / 2)
                        Locate 2, YCoord
                        Color teamRatings(0), teamRatings(1): Print teamName$

                        Color 15, 4
                        Locate 3, 32: Print "ANY CHANGE? (Y/N)";

                        J$ = GetKeyPress$

                    Loop Until J$ = Chr$(27) Or UCase$(J$) = "Y" Or UCase$(J$) = "N"

                End If

                'chosenIdx = -1 means there was invalid data
            Loop Until ExitCode% = 27 Or J$ = Chr$(27) Or UCase$(J$) = "N" Or chosenIdx = -1

        End If 'Done checking for ESC

    Loop Until UCase$(J$) = "N" Or I$ = Chr$(27) 'Or J$ = Chr$(27)

    If I$ = Chr$(27) Or J$ = Chr$(27) Then chosenIdx = 0

End Sub


'----------------------------------------
'          SelectTeam Subroutine
'----------------------------------------
'Presents selection menu of all teams
' found in the target "disk" file.
'The focus of this routine is confirming
' a team choice. It then relies on
' another subroutine to read in data
' from the selected team.
Sub SelectTeam (numberTeams, yearNumber$, selectedIdx, teamName$, ExitCode%)

    ExitCode% = -1
    validData = 0

    If numberTeams > 0 And CheckString%(teamNames$(numberTeams)) = 0 Then

        SELECTION% = 1
        Count% = numberTeams
        Start% = 1
        FileFGColor = 15: FileBGColor = 4
        HiLiteFGColor = 0: HiLiteBGColor = 7
        Rows = 20
        Columns% = 4
        Spacing% = 6
        Row% = 4
        Column% = 1

        Color , 4
        Cls
        Color 14
        Locate , 33: Print "TEAM SELECTION"
        Locate 25, 1
        Color 14: Print "ESC";
        Color 15: Print "-SELECT NEW ID  PGDN  PGUP  ";
        Color 14: Print "ENTER";
        Color 15: Print "-SELECTS TEAM";

        _MouseShow "DEFAULT"
        MAMenu teamNames$(), SELECTION%, Start%, Count%, ExitCode%, FileFGColor, FileBGColor, HiLiteFGColor, HiLiteBGColor, Rows%, Columns%, Spacing%, Row%, Column%
        _MouseHide

        If ExitCode% <> 27 Then

            selectedIdx = teamIndex%(SELECTION%)

            'Locate 2, 33
            'Color 31: Print "LOADING..."

            Call ReadTeam(yearNumber$, teamName$, selectedIdx)
            Call ReadExtraData(yearNumber$, selectedIdx, validData)

        End If

    End If

    If validData = 0 And ExitCode% <> 27 Then

        selectedIdx = -1
        Locate 9,
        Call CSMsgBox("THERE WAS AN ISSUE READING TEAM DATA. YOU MAY HAVE CHOSEN A TEAM FROM 4.0... PRESS ANY KEY AND TRY ANOTHER DISK ID", 20, PASS)
        K$ = GetKeyPress$
        Call CSMsgBox("", 0, PASS)

    End If

End Sub


'----------------------------------------
'           ReadTeam Subroutine
'----------------------------------------
'Reads in all data for the selected team,
' given it's index in the team file.
'This routine is highly customized TO
' the specific game for which it has
' been included for.
Sub ReadTeam (teamYear$, targetTeam$, teamIdx)

    Shared defFGPctAdj!, def3FG_Adj, defthreeFGA_Adj
    Shared staminaRating!

    Shared leagueRatings(), teamRatings()

    Shared playerOff!(), playerRatings!()

    Shared playerNames$()

    Open diskPaths$(0) + TEAM_FILE_NAME$ + "." + teamYear$ For Random As #1 Len = TEAM_SIZE_BYTES

    Field #1, 15 As Q$(0), 2 As Q$(1), 2 As Q$(2), 2 As Q$(3), 2 As Q$(4), 2 As Q$(5), 2 As Q$(6), 2 As Q$(7), 2 As Q$(8), 2 As Q$(9), 2 As Q$(10), 2 As Q$(11), 2 As Q$(12), 2 As Q$(13), 2 As Q$(14), 2 As Q$(15), 2 As Q$(16), 2 As Q$(17), 2 As Q$(18), 2 As Q$(19), 602 As X$

    For I = 0 To 13
        Field #1, 53 + I * 43 As X$, 15 As Q$(I * 15 + 20), 2 As Q$(I * 15 + 21), 2 As Q$(I * 15 + 22), 2 As Q$(I * 15 + 23), 2 As Q$(I * 15 + 24), 2 As Q$(I * 15 + 25), 2 As Q$(I * 15 + 26), 2 As Q$(I * 15 + 27), 2 As Q$(I * 15 + 28), 2 As Q$(I * 15 + 29), 2 As Q$(I * 15 + 30), 2 As Q$(I * 15 + 31), 2 As Q$(I * 15 + 32), 2 As Q$(I * 15 + 33), 2 As Q$(I * 15 + 34), TEAM_SIZE_BYTES - 53 - 43 - I * 43 As X$
    Next

    Get #1, teamIdx

    targetTeam$ = RTrim$(Q$(0))
    staminaRating! = CVI(Q$(1))
    defFGPctAdj! = CVI(Q$(2))
    def3FG_Adj = CVI(Q$(3))
    defthreeFGA_Adj = CVI(Q$(4))

    For I = 0 To 4:
        leagueRatings(I) = CVI(Q$(I + 5))
    Next

    For I = 0 To 9:
        teamRatings(I) = CVI(Q$(I + 10))
    Next

    For I = 0 To 13

        'Player name
        playerNames$(I) = RTrim$(Q$(I * 15 + 20))

        'Player ratings
        For I1 = 0 To 6
            playerOff!(I, I1) = CVI(Q$(I * 15 + I1 + 21))
            playerRatings!(I, I1) = CVI(Q$(I * 15 + I1 + 28))
        Next
    Next

    'Close team file
    Close #1

End Sub


'----------------------------------------
'        ReadExtraData Subroutine
'----------------------------------------
'Reads in extra data for the selected team,
' given it's index in the team file.
'This extra file usually includes info.
' related to stadiums, coaches, etc.
'This routine is highly customized TO
' the specific game for which it has
' been included for.
Sub ReadExtraData (teamYear$, teamIdx, dataOK)

    Shared CK, teamAttendance&

    Shared coach$, arenaName$, mascot$

    Shared playerDef!(), playerStats!(), teamStats!()

    Shared position$()

    If Not _FileExists(diskPaths$(0) + DATA_FILE_NAME$ + "." + teamYear$) Then

        MsgText$ = "WARNING!!! NO DATA FILE WAS FOUND FOR THIS TEAM. PRESS ANY KEY TO CONTINUE"
        BoxWidth = 20
        BoxHeight = (Len(MsgText$) / BoxWidth) + 3 'top and box lines + 1 extra
        Locate ((25 - BoxHeight) / 2), (80 - ((BoxWidth + 2) / 2))
        Call CSMsgBox(MsgText$, BoxWidth, PASS)
        I$ = GetKeyPress$
        Call CSMsgBox("", 0, PASS)

    Else

        Open diskPaths$(0) + DATA_FILE_NAME$ + "." + teamYear$ For Random As #1 Len = DATA_SIZE_BYTES

        Field #1, 15 As Q$(0), 40 As Q$(1), 15 As Q$(2), 4 As Q$(3)

        For I = 0 To 13
            Field #1, 74 + I * 32 As X$, 2 As Q$(I * 16 + 4), 2 As Q$(I * 16 + 5), 2 As Q$(I * 16 + 6), 2 As Q$(I * 16 + 7), 2 As Q$(I * 16 + 8), 2 As Q$(I * 16 + 9), 2 As Q$(I * 16 + 10), 2 As Q$(I * 16 + 11), 2 As Q$(I * 16 + 12), 2 As Q$(I * 16 + 13), 2 As Q$(I * 16 + 14), 2 As Q$(I * 16 + 15), 2 As Q$(I * 16 + 16), 2 As Q$(I * 16 + 17), 2 As Q$(I * 16 + 18), 2 As Q$(I * 16 + 19)
        Next

        Field #1, 522 As X$, 2 As Q$(228), 2 As Q$(229), 2 As Q$(230), 2 As Q$(231), 2 As Q$(232), 2 As Q$(233), 2 As Q$(234), 2 As Q$(235), 2 As Q$(236), 2 As Q$(237), 2 As Q$(238), 2 As Q$(239), 2 As Q$(240), 2 As Q$(241), 2 As Q$(242), 2 As Q$(243), 2 As Q$(244), 2 As Q$(245), 2 As Q$(246), 2 As Q$(247), 2 As Q$(248), 2 As Q$(249), 2 As Q$(250), 2 As Q$(251), 2 As Q$(252), 2 As Q$(253)

        Get #1, teamIdx

        coach$ = RTrim$(Q$(0))
        arenaName$ = RTrim$(Q$(1))
        mascot$ = RTrim$(Q$(2))
        teamAttendance& = CVL(Q$(3))

        For I = 0 To 13

            playerDef!(I) = CVI(Q$(I * 16 + 4))
            position$(I) = Q$(I * 16 + 5)

            For I1 = 0 To 13
                playerStats!(I, I1) = CVI(Q$(I * 16 + I1 + 6))
            Next

        Next

        For I = 0 To 20
            teamStats!(I) = CVI(Q$(228 + I))
        Next

        If teamAttendance& > 100000 Then
            'If attendance is abnormally high, or arena is not a string,
            'we ARE clearly not reading accurate data
            dataOK = 0

        Else

            For I = 21 To 24
                teamStats!(I) = CVI(Q$(228 + I))
            Next

            CK = CVI(Q$(253))

            dataOK = 1

        End If

        Close #1

    End If

End Sub


'----------------------------------------
'         nameStatFile$ Function
'----------------------------------------
'Helps create uniquely named file to
' store a team's stats.
'
'There are 2 main changes done in order
' to accomodate this:
' 1) Replaces invalid characters with _
' 2) If "ST" is the name, shortens the
'    prefix. This helps with college
'    teams (ARKANSAS vs ARKANSAS ST)
Function nameStatFile$ (teamName$)

    teamPrefix$ = teamName$

    For XX = 4 To 11

        If Mid$(teamPrefix$, XX, 1) = " " Or Mid$(teamPrefix$, XX, 1) = "." Or Mid$(teamPrefix$, XX, 1) = "/" Or Mid$(teamPrefix$, XX, 1) = "_" Then
            Mid$(teamPrefix$, XX, 1) = "_"
        End If

    Next XX

    For XX = 12 To 14

        If Mid$(teamPrefix$, XX, 2) = "ST" Then
            Mid$(teamPrefix$, 9, 1) = "_"
            Mid$(teamPrefix$, 10, 2) = "ST"
        End If

    Next XX

    'Length of 'converted' name for file
    '-- update this if we want to support long files
    QQ = 8

    For XX = 11 To 4 Step -1
        If Mid$(teamPrefix$, XX, 1) = "_" Then
            QQ = XX - 4
        Else
            Exit For
        End If
    Next XX

    nameStatFile$ = Mid$(teamPrefix$, 4, QQ) + "." + Left$(teamPrefix$, 2)

End Function


'----------------------------------------
'          CheckString Function
'----------------------------------------
'This function checks the given string
'to determine if any characters are not
'alpha-numeric or printable.
'Return Values
'1 = non-printable characters were found
'0 = all characters in string are alpha-numeric.
Function CheckString% (targetString$)

    badString = 0
    stringPosition% = 1

    Do

        test = Asc(Mid$(targetString$, stringPosition%, 1))

        'If it is a non-printable character (corrupt data)
        If test > 122 Or test < 32 Then
            stringPosition% = 1
            badString = 1
        Else
            stringPosition% = stringPosition% + 1
        End If

    Loop Until stringPosition% = Len(targetString$) Or badString = 1

    CheckString% = badString

End Function


'----------------------------------------
'        ChooseFile$ Function
'----------------------------------------
'Shows user a file selection menu, based
' on the file spec parameter passed.
'
'fileSpec$ - file specification to load
'            should include base path.
'
' EXAMPLE - C:\Temp\*.tmp
'
'fileDesc$ - brief description of the
'            type of file
'
' RETURNS - base name of chosen file
'            (that is, without extension)
Function ChooseFile$ (fileSpec$, fileDesc$, ExitCode%)

    descLength = Len(fileDesc$)

    Do
        'Display list of files...

        Count% = FileCount%(fileSpec$)

        If Count% = 0 Then

            Locate 10, 8
            zeroCountMsg$ = "NO " + fileDesc$ + " FILES WERE FOUND... PRESS ANY KEY TO RETURN TO MAIN MENU"

            Call CSMsgBox(zeroCountMsg$, 20, PASS)
            I$ = GetKeyPress$
            Call CSMsgBox("", 0, PASS)

        Else

            ReDim foundFiles$(0 To Count%)

            'For X = 1 To Count%
            '8 char's filename + 4 char's (. + ext)
            'foundFiles$(X) = Space$(12)
            'Next

            foundFiles$(0) = fileSpec$
            Call ReadFile(foundFiles$())

            Do

                XCoord = Int((80 - (descLength + 12)) / 2)

                Color , 1
                Cls
                Locate , XCoord
                Color 14
                Print "SELECT "; fileDesc$; " FILE"
                Color 15
                SELECTION% = 1
                START% = 1
                FileFGColor = 15: FileBGColor = 1
                HiLiteFGColor% = 0: HiLiteBGColor% = 7
                Rows% = 20
                Columns% = 3
                Spacing% = 5
                Row% = 4
                Column% = 1
                Locate 25, 1
                Color 14
                Print "ENTER";
                Color 15
                Print "-SELECTS "; fileDesc$;
                Color 14
                Locate , 55
                Print "HIT ESCAPE KEY TO EXIT";
                Color 15

                _MouseShow "DEFAULT"
                MAMenu foundFiles$(), SELECTION%, START%, Count%, ExitCode%, FileFGColor, FileBGColor, HiLiteFGColor%, HiLiteBGColor%, Rows%, Columns%, Spacing%, Row%, Column%
                _MouseHide

                If ExitCode% <> 27 Then

                    Color 15, 1
                    targetFile$ = RTrim$(foundFiles$(SELECTION%))
                    XCoord = Int((80 - Len(targetFile$)) / 2)
                    Locate 2, XCoord
                    Print targetFile$

                    Do
                        Locate , 31
                        Print "ANY CHANGE? (Y/N)";
                        I$ = GetKeyPress$
                    Loop Until UCase$(I$) = "Y" Or UCase$(I$) = "N"

                    Color 15, 0

                End If

            Loop Until UCase$(I$) = "N" Or ExitCode% = 27

        End If 'Done checking file count

        '...Until we press ESC
    Loop Until ExitCode% = 27 Or Count% = 0 Or UCase$(I$) = "N"

    If ExitCode% <> 27 Then
        ChooseFile$ = Left$(RTrim$(targetFile$), Len(targetFile$) - 4)
    End If

End Function


