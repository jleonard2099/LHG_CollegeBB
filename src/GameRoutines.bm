'----------------------------------------
'            INFO Subroutine
'----------------------------------------
'This subroutine displays a simple header
'and footer for the game options menu.
Sub INFO ()

    Cls

    Color , 1
    Locate 1, 1
    Print Tab(80);

    Locate , 33: Color 14
    Print "GAME OPTIONS MENU"

    Locate 24, 1
    Print Tab(80);
    Locate , 1
    Print "    LANCE HAFFNER 1986-2000"; Tab(70); Left$(Time$, 5);
    Locate 3, 1
    Color , 0

End Sub


'----------------------------------------
'           InitVar Subroutine
'----------------------------------------
' Initializes variables for the game
' Does not process any that will be read
' in from file or assigned elsewhere
Sub InitVar ()

    Shared scheduleFile$
    Shared actualAttendance&

    Shared avgAttendance&(), CRD&()

    Shared d3FG_Adj(), d3FGA_Adj()

    Shared teamIndicator$()

    For I = 0 To 1
        For I1 = 0 To 4
            B1(I, I1) = -1
        Next I1
    Next I

    teamIndicator$(0) = "VISITING TEAM"
    teamIndicator$(1) = "HOME TEAM"

    X$(0) = "A "
    X$(1) = "B "
    X$(2) = "C "
    X$(3) = "D "

    pbpType$(0) = "VERBOSE        "
    pbpType$(1) = "HAFFNER CLASSIC"

    gameClock! = 1200

    nbrLines = 1

    H = 1

    ' # of timeouts
    timeouts(1) = 5
    timeouts(0) = 5

    PA% = -1

    teamRat_GAME(0, 0) = 15
    teamRat_GAME(0, 1) = 1
    teamRat_GAME(1, 0) = 15
    teamRat_GAME(1, 1) = 1

    autoPlay = 0
    B = 0
    C1 = 0
    DY = 0
    compTeam = 0
    D = 0
    endGame = 0
    endAllGames = 0
    FO = 0
    F3 = 0
    G9 = 0
    halfTime = 0
    I = 0
    J = 0
    IN = 0
    M5 = 0
    MJ = 0
    NTMS = 0
    P = 0
    P9 = 0
    Q = 0
    shotClock = 0
    statSpecial = 0
    S2 = 0
    S9 = 0
    timeElapsed! = 0
    TMT = 0
    TOU = 0
    XM = 0
    XS = 0

    BO% = 0
    BU% = 0
    DK% = 0
    F3S% = 0
    FB% = 0
    FT% = 0
    J8% = 0
    LC% = 0
    PASS% = 0
    PT% = 0
    PZ% = 0
    X0% = 0
    X1% = 0
    XX% = 0

    skipUserOpts% = 0

    F! = 0

    A1$ = ""
    B1$ = ""
    C1$ = ""
    D1$ = ""
    E1$ = ""
    F1$ = ""
    G1$ = ""
    H1$ = ""
    J$ = ""
    PB$ = ""
    scheduleFile$ = ""
    tourneyFile$ = ""
    U$ = ""
    VT$ = ""
    VT1$ = ""
    W$ = ""
    W1$ = ""
    YN$ = ""

    Erase B1
    Erase dFGPA, D2, DF, d3FG_Adj, d3FGA_Adj
    Erase eventSettings, F1, G4, G5
    Erase leagRat_GAME
    Erase P2, P4, P5, P7, plyrRat_GAME
    Erase QQ, QR, RB, RS
    Erase schedGame, teamStamina, threeFG, tmFatigue
    Erase plyrStamina, turnovers, statTotals
    Erase W2, W3, Z5, Z6, timePlayed

    Erase APT%, B%, CZ%, DT%, F5%, FY%
    Erase G9%, HT%, N%, NG%, NG1%
    Erase O%, OF%, PR%, ST%, SX%
    Erase T2%, ft3PtFoul, TM%, TP%, teamIndex%
    Erase VG%, VH%

    Erase gameArena$, gameCoaches$, gameMascots$, gameTeams$
    Erase H$, HO$, N$
    Erase players$, PO$, PS$, Q$, SITE$, SX$
    Erase teamNames$, Y$, YN$, YN1$

    Erase plyrOff_GAME!, R3!, score, W0!, W1!
    Erase Z!, Z1!, Z2!

    actualAttendance& = 0
    Erase avgAttendance&, CRD&

End Sub


'----------------------------------------
'          AUTOSETUP Subroutine
'----------------------------------------
'This subroutine auto-assigns game param-
'eters from a schedule file's data.
Sub AUTOSETUP ()

    Shared tickerStart

    gameLoc = NG%(2)
    threePtOpt = NG%(3)
    pbpDelay! = NG%(4) / 10
    foulsToDQ = NG%(5)
    ft10thFoul = NG%(6)
    sClockVal = NG%(7)
    playerOpt = NG%(8)
    coachOpt = NG%(9)
    ft3PtFoul = NG%(10)
    tickerStart = NG%(12)
    ft6FloorFouls = NG%(14)

    For P9 = 0 To 1

        I1 = NG%(P9)
        YN$ = YN$(P9)

        Call ReadGameTeam(YN$, gameTeams$(P9), I1, P9)

        If I1 <> 0 Then
            Call TEAMSETUP
            'Else
            '   -- throw an error message
        End If

    Next P9

    If TOU = 1 Then

        tourneyFile$ = RTrim$(tourneyFile$)
        YN$(0) = RTrim$(YN$(0))
        YN$(1) = RTrim$(YN$(1))

        Open diskPaths$(1) + tourneyFile$ + ".INF" For Input As #1

        Input #1, X$

        Input #1, X$ ' NUMBER OF REGIONS

        For I = 1 To 16
            Input #1, X$ ' NUMBER OF TEAMS IN REGION
            Input #1, X$ ' NAME OF REGION
        Next

        For I = 1 To 16
            For I1 = 1 To 16
                For I2 = 1 To 4
                    Input #1, N$(I, I1, I2) ' SEED SLOT NAME
                    Input #1, N%(I, I1, I2) ' REGION, SEED NUMBER, MODE PLAY/TM#
                Next
            Next
        Next

        Close #1

        TOU = 0

        For I = 1 To 16

            For I1 = 1 To 16
                'PRINT LEN(YN$(0)),LEN(YN$(1)),LEN( N$(I,I1,1) )
                If NG%(0) = N%(I, I1, 0) And YN$(0) = N$(I, I1, 1) And N%(I, I1, 1) = 0 Then
                    TOU = 1
                    exitAll% = 1
                    Exit For
                End If

                If NG%(1) = N%(I, I1, 0) And YN$(1) = N$(I, I1, 1) And N%(I, I1, 1) = 0 Then
                    TOU = 1
                    exitAll% = 1
                    Exit For
                End If
            Next

            If exitAll% = 1 Then Exit For

        Next

    End If

End Sub


'------------------------------
'    LetterToNumber Subroutine
'------------------------------
' ...explanation...
Sub LetterToNumber (promptVal$, J)

    J = Val(promptVal$)
    If UCase$(promptVal$) = "A" Then J = 10
    If UCase$(promptVal$) = "B" Then J = 11
    If UCase$(promptVal$) = "C" Then J = 12
    If UCase$(promptVal$) = "D" Then J = 13
    If UCase$(promptVal$) = "E" Then J = 14

End Sub


'----------------------------------------
'          TEAMSETUP Subroutine
'----------------------------------------
'This subroutine initializes team data,
'sets up player data and configures any
'league adjustments
Sub TEAMSETUP ()

    Shared d3FG_Adj(), d3FGA_Adj()

    F5%(P9, 4) = leagRat_GAME(P9, 0)
    If F5%(P9, 4) > 20 Then F5%(P9, 4) = F5%(P9, 4) - 100

    F5%(P9, 5) = leagRat_GAME(P9, 1)
    If F5%(P9, 5) = 0 Then F5%(P9, 5) = 4

    F5%(P9, 6) = leagRat_GAME(P9, 2)
    If F5%(P9, 6) > 20 Then F5%(P9, 6) = F5%(P9, 6) - 100

    F5%(P9, 7) = leagRat_GAME(P9, 3)
    If F5%(P9, 7) > 20 Then F5%(P9, 7) = F5%(P9, 7) - 100

    F5%(P9, 8) = leagRat_GAME(P9, 4)
    If F5%(P9, 8) <> 99 Then F5%(P9, 4) = 0: F5%(P9, 5) = 4: F5%(P9, 6) = 0: F5%(P9, 7) = 0

    For I = 0 To 13

        plyrOff_GAME!(P9, I, 16) = plyrRat_GAME(P9, I, 6)
        If plyrOff_GAME!(P9, I, 16) = 0 Then plyrOff_GAME!(P9, I, 16) = 6

        plyrOff_GAME!(P9, I, 17) = plyrRat_GAME(P9, I, 5)
        If plyrOff_GAME!(P9, I, 17) = 0 Then plyrOff_GAME!(P9, I, 17) = 40

        plyrOff_GAME!(P9, I, 19) = plyrRat_GAME(P9, I, 3)
        plyrOff_GAME!(P9, I, 20) = plyrRat_GAME(P9, I, 2)
        plyrOff_GAME!(P9, I, 21) = plyrRat_GAME(P9, I, 4)
        plyrOff_GAME!(P9, I, 2) = plyrOff_GAME!(P9, I, 2)

    Next I

    F5%(P9, 2) = d3FG_Adj(P9)
    If F5%(P9, 2) > 20 Then F5%(P9, 2) = F5%(P9, 2) - 100

    F5%(P9, 3) = d3FGA_Adj(P9)
    If F5%(P9, 3) > 20 Then F5%(P9, 3) = F5%(P9, 3) - 100

End Sub


'----------------------------------------
'           TEAMBOX Subroutine
'----------------------------------------
'This subroutine draws an ASCII box using
'team colors. The box starts at row 6 and
'is approx. 60 char's wide. When done, the
'cursor is set at the first printable row
'and column inside the box.
Sub TEAMBOX (boxHeight, teamIdx)

    Locate 6, 8
    Color teamRat_GAME(teamIdx, 0), teamRat_GAME(teamIdx, 1)

    'Print box top
    Print " "; Chr$(201); String$(61, 205); Chr$(187); " ";

    'Print box sides
    For II = 1 To boxHeight
        Locate 6 + II, 8
        Print " " + Chr$(186); String$(61, 32); Chr$(186) + " ";
    Next

    'Print box bottom
    Locate 7 + boxHeight, 8
    Print " "; Chr$(200); String$(61, 205); Chr$(188); " ";

    Locate 7, 11

End Sub


'----------------------------------------
'         FRAMEOPTION Subroutine
'----------------------------------------
'This subroutine draws an ASCII box using
'team colors. The box starts at row 8 and
'is approx. 60 char's wide. When done, the
'cursor is set at the first printable row
'and column inside the box.
Sub FRAMEOPTION (boxHeight, teamIdx)

    Locate 8, 8
    Color teamRat_GAME(teamIdx, 0), teamRat_GAME(teamIdx, 1)

    'Print box top
    Print " " + Chr$(214); String$(61, 196); Chr$(183) + " ";

    'Print box sides
    For II = 1 To boxHeight
        Locate 8 + II, 8
        Print " " + Chr$(186); String$(61, 32); Chr$(186) + " ";
    Next

    'Print box bottom
    Locate 9 + boxHeight, 8
    Print " " + Chr$(211); String$(61, 196); Chr$(189) + " ";

    Locate 9, 12

End Sub


'----------------------------------------
'            d100 Subroutine
'----------------------------------------
'This subroutine assigns a random number
'between 1 and 100 to the variable that
'it is called with
Sub d100 (randNumVar)

    randNumVar = Int(Rnd(1) * 100) + 1

End Sub


'----------------------------------------
'       DISABLEPLAYERS Subroutine
'----------------------------------------
'This subroutine gives the user an inter-
'face for disabling team players. It will
'then take care of updating the associated
'arrays for the available roster.
Sub DISABLEPLAYERS (P9)

    Do

        Color 15, 0
        Cls

        Call TEAMBOX(1, P9)

        U$ = "DISABLE PLAYERS FOR " + gameTeams$(P9) + "? (Y/N)"
        Locate , (80 - Len(U$)) / 2
        Print U$
        Color 15, 0

        Print
        Print
        Print "NOTE:: THE COMPUTER WILL AUTOMATICALLY DISABLE PLAYERS BASED ON"
        Print "       THE RATIO OF GAMES PLAYED FOR EACH PLAYER TO THE TOTAL"
        Print "       NUMBER OF GAMES PLAYED BY THE TEAM. YOU MAY WANT TO CHECK"
        Print "       TO ACTIVATE ANY COMPUTER DEACTIVATED PLAYERS"
        I$ = GetKeyPress$

    Loop Until UCase$(I$) = "Y" Or UCase$(I$) = "N"

    If UCase$(I$) = "Y" Then

        DX% = 0

        Cls
        Print "TEAM ROSTER FOR ";
        Color teamRat_GAME(P9, 0), teamRat_GAME(P9, 1): Print gameTeams$(P9)
        Color 15, 0
        Print "# NAME            POS   GP"

        For I = 0 To 13

            If I <= 9 Then Print Using "#"; I;
            If I = 10 Then Print "A";
            If I = 11 Then Print "B";
            If I = 12 Then Print "C";
            If I = 13 Then Print "D";
            If I = 14 Then Print "E";

            Print " ";

            'Automatically disable "non-existent" players
            If players$(P9, I) = "XXX" Then B%(P9, I) = -1: Color teamRat_GAME(P9, 0), teamRat_GAME(P9, 1)

            'Color players who have been disabled
            If B%(P9, I) = 1 Or B%(P9, I) = -1 Then Color teamRat_GAME(P9, 0), teamRat_GAME(P9, 1)

            'Print player name
            Print players$(P9, I);
            Color 15, 0

            'Print player position, GP
            Print Tab(20); PO$(P9, I); Tab(22); plyrRat_GAME(P9, I, 0)

        Next

        Do
            Locate 19, 1
            Print "ENTER PLAYER # TO DISABLE/ENABLE (Z=FINISHED)"
            Print "YOU MUST HAVE AT LEAST 8 ACTIVE PLAYERS"

            I$ = GetKeyPress$

            If UCase$(I$) <> "Z" Then

                I1 = Val(I$)
                Call LetterToNumber(I$, I1)

                If B%(P9, I1) = 0 And DX% < 4 Then
                    B%(P9, I1) = -1
                    DX% = DX% + 1
                    Locate 3 + I1, 3
                    Color teamRat_GAME(P9, 0), teamRat_GAME(P9, 1): Print players$(P9, I1)
                    Color 15, 0
                Else
                    If B%(P9, I1) = -1 Then
                        B%(P9, I1) = 0
                        DX% = DX% - 1
                        Locate 3 + I1, 2
                        Color 15, 0
                        Print " "; players$(P9, I1)
                    End If
                End If
            End If

        Loop Until UCase$(I$) = "Z"

    End If

End Sub


'----------------------------------------
'            DELAY Subroutine
'----------------------------------------
'This subroutine simply serves as a place-
'holder for the command to initiate the
'pbp delay.
Sub DELAY ()

    _Delay pbpDelay!

End Sub


'----------------------------------------
'             PBP Subroutine
'----------------------------------------
'This is the classic Haffner Play-by-play
'subroutine. Given the target text, it will
'place it in the correct spot in the pbp
'text window. No text is placed if the
'delay is 0.
Sub PBP ()

    M$ = InKey$

    If UCase$(M$) = "Q" Then Cls: End
    If UCase$(M$) = "O" Then Call OPTIONS

    'Positive delay or Verbose PBP
    If pbpDelay! > 0 And pbpOpt <> 1 Then

        U$ = PadRight$(U$, 38)

        Locate 8, 1

        If nbrLines = 1 Then A1$ = U$: VG%(1) = teamRat_GAME(P, 0): VH%(1) = teamRat_GAME(P, 1)
        If nbrLines = 2 Then B1$ = U$: VG%(2) = teamRat_GAME(P, 0): VH%(2) = teamRat_GAME(P, 1)
        If nbrLines = 3 Then C1$ = U$: VG%(3) = teamRat_GAME(P, 0): VH%(3) = teamRat_GAME(P, 1)
        If nbrLines = 4 Then D1$ = U$: VG%(4) = teamRat_GAME(P, 0): VH%(4) = teamRat_GAME(P, 1)
        If nbrLines = 5 Then E1$ = U$: VG%(5) = teamRat_GAME(P, 0): VH%(5) = teamRat_GAME(P, 1)
        If nbrLines = 6 Then F1$ = U$: VG%(6) = teamRat_GAME(P, 0): VH%(6) = teamRat_GAME(P, 1)
        If nbrLines = 7 Then G1$ = U$: VG%(7) = teamRat_GAME(P, 0): VH%(7) = teamRat_GAME(P, 1)
        If nbrLines = 8 Then H1$ = U$: VG%(8) = teamRat_GAME(P, 0): VH%(8) = teamRat_GAME(P, 1)

        If nbrLines > 8 Then

            A1$ = B1$
            B1$ = C1$
            C1$ = D1$
            D1$ = E1$
            E1$ = F1$
            F1$ = G1$
            G1$ = H1$
            H1$ = U$

            For I = 1 To 7
                VG%(I) = VG%(I + 1)
                VH%(I) = VH%(I + 1)
            Next

            VG%(8) = teamRat_GAME(P, 0)
            VH%(8) = teamRat_GAME(P, 1)

        End If

        nbrLines = nbrLines + 1

        Color VG%(1), VH%(1): Print Left$(A1$, 38)
        Color VG%(2), VH%(2): Print Left$(B1$, 38)
        Color VG%(3), VH%(3): Print Left$(C1$, 38)
        Color VG%(4), VH%(4): Print Left$(D1$, 38)
        Color VG%(5), VH%(5): Print Left$(E1$, 38)
        Color VG%(6), VH%(6): Print Left$(F1$, 38)
        Color VG%(7), VH%(7): Print Left$(G1$, 38)
        Color VG%(8), VH%(8): Print Left$(H1$, 38)

        Color 15, 0
        Call DELAY

    End If

End Sub


'----------------------------------------
'          SELECTPBP Subroutine
'----------------------------------------
'This subroutine essentially handles the
'prep for PBP depending on the style that
'was chosen for the game (classic / verbose)
Sub SELECTPBP ()

    Select Case pbpOpt

        Case 0:
            Call PBP

        Case 1:
            If pbpDelay! <> 0 Then
                Call WINDEX
                Print U$
                Call DELAY
            End If

    End Select

End Sub


'----------------------------------------
'           MAKEPBP Subroutine
'----------------------------------------
'This subroutine helps build strings for
'the Play-by-Play text, depending on the
'context given (assigned as PT%)
Sub MAKEPBP ()

    If pbpDelay! <> 0 Then

        Call d100(RN)

        Select Case PT%
            Case 1
                'TURNOVER
                U$ = players$(P, B1(P, B))

                If RN > 35 And RN <= 68 And P7(D) > 1 And PASS% = 1 Then
                    U$ = gameTeams$(P) + " CALLED FOR 10 SEC VIOLATION"
                Else

                    RN = Int(Rnd(1) * 14) + 1
                    Select Case RN
                        Case 1
                            U$ = U$ + " TURNS THE BALL OVER"
                        Case 2
                            U$ = U$ + " THROWS IT AWAY"
                        Case 3
                            U$ = U$ + " IS WHISTLED FOR TRAVELING"
                        Case 4
                            U$ = U$ + " TURNS IT OVER"
                        Case 5
                            U$ = U$ + " LOSES CONTROL OF THE BALL"
                        Case 6
                            U$ = U$ + " LOSES IT OUT OF BOUNDS"
                        Case 7
                            U$ = U$ + " LOSES THE HANDLE"
                        Case 8
                            U$ = U$ + " LOSES IT"
                        Case 9
                            U$ = U$ + " IS CALLED FOR STEPS"
                        Case 10
                            U$ = U$ + " TRAVELS"
                        Case 11
                            U$ = U$ + " WALKS WITH IT"
                        Case 12
                            U$ = U$ + " LETS IT GET AWAY"
                        Case 13
                            U$ = U$ + " DOUBLE DRIBBLES"
                        Case 14
                            U$ = U$ + " LOSES CONTROL"
                    End Select

                End If

            Case 2
                'DUNK
                RN = Int(Rnd(1) * 39) + 1
                Select Case RN
                    Case 1
                        U$ = "DIPSY-DOO DUNK-A-ROO!!!"
                    Case 2
                        U$ = players$(P, B1(P, B)) + " MAKES IT HAMMER TIME!!!"
                    Case 3
                        U$ = players$(P, B1(P, B)) + " SLAMS IT IN!!!"
                    Case 4
                        U$ = players$(P, B1(P, B)) + " WITH THE 2-HANDED SLAM!!!"
                    Case 5
                        U$ = players$(P, B1(P, B)) + " SLAMS IT HOME!!!"
                    Case 6
                        U$ = players$(P, B1(P, B)) + " JAMS IT HOME!!!"
                    Case 7
                        U$ = players$(P, B1(P, B)) + " THROWS IT DOWN!!!"
                    Case 8
                        U$ = players$(P, B1(P, B)) + " THUNDERSLAM!!!"
                    Case 9
                        U$ = "RIM ROCKING JAM!!!"
                    Case 10
                        U$ = players$(P, B1(P, B)) + " WITH THE MONSTER SLAM!!"
                    Case 11
                        U$ = players$(P, B1(P, B)) + "POWER SLAMS IT!!!"
                    Case 12
                        U$ = players$(P, B1(P, B)) + " WITH THE 2-HANDED STUFF!!!"
                    Case 13
                        U$ = players$(P, B1(P, B)) + " BACKWARDS JAM!!!"
                    Case 14
                        U$ = players$(P, B1(P, B)) + " WITH THE 1-HANDED SLAM!!!"
                    Case 15
                        U$ = players$(P, B1(P, B)) + " WITH THE REVERSE SLAM!!!"
                    Case 16
                        U$ = players$(P, B1(P, B)) + " WITH THE REVERSE JAM!!!"
                    Case 17
                        U$ = players$(P, B1(P, B)) + " WITH THE WINDMILL JAM!!!"
                    Case 18
                        U$ = players$(P, B1(P, B)) + " WITH THE WINDMILL SLAM!!!"
                    Case 19
                        U$ = players$(P, B1(P, B)) + " WITH THE TOMAHAWK SLAM!!!"
                    Case 20
                        U$ = players$(P, B1(P, B)) + " WITH THE 360 SLAM!!!"
                    Case 21
                        U$ = players$(P, B1(P, B)) + " WITH THE SPINNING SLAM!!!"
                    Case 22
                        U$ = players$(P, B1(P, B)) + " WITH THE LEFT HANDED DUNK!!!"
                    Case 23
                        U$ = "DOUBLE CLUTCH JAM!!!"
                    Case 24
                        U$ = players$(P, B1(P, B)) + " GETS THE FLUSH!!!"
                    Case 25
                        U$ = players$(P, B1(P, B)) + " PUNCHES IT HOME!!!"
                    Case 26
                        U$ = players$(P, B1(P, B)) + "...DOUBLE PUMP SLAM!!!"
                    Case 27
                        U$ = players$(P, B1(P, B)) + "...IN YOUR FACE SLAM!!!"
                    Case 28
                        U$ = players$(P, B1(P, B)) + " IS UP": Call PBP: U$ = "HE SPINS": Call PBP: U$ = "BEHIND THE BACK SLAM!!!"
                    Case 29
                        U$ = "HE SLAMS IT HOME!!"
                    Case 30
                        U$ = "HE LAYS IT UP AND IN!!"
                    Case 31
                        U$ = "HE BANGS IT IN!!"
                    Case 32
                        U$ = "HE RAMS IT IN!!"
                    Case 33
                        U$ = "HE SLAMS IT IN!!!"
                    Case 34
                        U$ = "DIPSY-DOO DUNK-A-ROO!!!"
                    Case 35
                        U$ = "HE MAKES IT HAMMER TIME!!!"
                    Case 36
                        U$ = players$(P, B1(P, B)) + " WITH THE 2-HANDED SLAM!!!"
                    Case 37
                        U$ = players$(P, B1(P, B)) + " IS UP": Call PBP: U$ = "HE SPINS": Call PBP: U$ = "BEHIND THE BACK SLAM!!!"
                    Case 38
                        U$ = "HE JAMS IT HOME!!!"
                    Case 39
                        U$ = "HE HAMMERS IT HOME!"
                End Select

            Case 3
                U$ = players$(P, B1(P, B))

                Select Case PZ%
                    Case 1
                        'BAD
                        Select Case RN
                            Case 1 To 40
                                U$ = U$ + " TAKES A TOUGH SHOT"
                            Case 40 To 45
                                U$ = U$ + " SHOOTS OFF BALANCE"
                            Case 46 To 50
                                U$ = U$ + " FORCES ONE UP"
                            Case 51 To 60
                                U$ = U$ + " SHOOTS UNDER PRESSURE"
                            Case 61 To 65
                                U$ = U$ + " WITH A BAD SHOT"
                            Case 66 To 70
                                U$ = U$ + " SHOOTS IN HEAVY TRAFFIC"
                            Case 71 To 75
                                U$ = U$ + " THROWS UP A PRAYER"
                            Case 76 To 80
                                U$ = U$ + " TAKES A BAD SHOT"
                            Case 81 To 85
                                U$ = U$ + " FORCES THE INSIDE SHOT"
                            Case 86 To 100
                                U$ = U$ + " TURNS AND SHOOTS"
                        End Select

                    Case 2
                        'INSIDE W/ASSIST
                        Select Case RN
                            Case 1 To 10
                                U$ = "HE CUTS TO THE BASKET": Call PBP: U$ = "TAKES IT UP"

                                If (B = 0 Or B = 1) And Int(Rnd(1) * 100) + 1 <= 1 Then DK% = 1
                                If (B = 2 Or B = 3) And Int(Rnd(1) * 100) + 1 <= 5 Then DK% = 1
                                If B = 4 And Int(Rnd(1) * 100) + 1 <= 7 Then DK% = 1

                            Case 11 To 20
                                U$ = "HE TAKES IT TO THE HOLE"
                                If (B = 0 Or B = 1) And Int(Rnd(1) * 100) + 1 <= 1 Then DK% = 1
                                If (B = 2 Or B = 3) And Int(Rnd(1) * 100) + 1 <= 5 Then DK% = 1
                                If B = 4 And Int(Rnd(1) * 100) + 1 <= 7 Then DK% = 1

                            Case 21 To 30
                                U$ = "HE TAKES IT TO THE HOOP"
                                If (B = 0 Or B = 1) And Int(Rnd(1) * 100) + 1 <= 1 Then DK% = 1
                                If (B = 2 Or B = 3) And Int(Rnd(1) * 100) + 1 <= 5 Then DK% = 1
                                If B = 4 And Int(Rnd(1) * 100) + 1 <= 7 Then DK% = 1

                            Case 31 To 40
                                U$ = "HE LEANS IN AND SHOOTS"

                            Case 41 To 50
                                U$ = "HE PUTS IT UP"

                            Case 51 To 60
                                U$ = "HE TAKES IT TO THE BOARD"
                                If (B = 0 Or B = 1) And Int(Rnd(1) * 100) + 1 <= 1 Then DK% = 1
                                If (B = 2 Or B = 3) And Int(Rnd(1) * 100) + 1 <= 5 Then DK% = 1
                                If B = 4 And Int(Rnd(1) * 100) + 1 <= 7 Then DK% = 1

                            Case 61 To 70
                                U$ = "HE PUTS IT OFF THE GLASS"

                            Case 71 To 80
                                If B = 4 Then
                                    U$ = "HE SHOOTS THE HOOK"
                                Else
                                    'B <> 4
                                    U$ = "HE GOES IN FOR THE LAYUP"
                                End If

                            Case 81 To 90
                                U$ = "HE TAKES IT UP STRONG"
                                If (B = 0 Or B = 1) And Int(Rnd(1) * 100) + 1 <= 1 Then DK% = 1
                                If (B = 2 Or B = 3) And Int(Rnd(1) * 100) + 1 <= 5 Then DK% = 1
                                If B = 4 And Int(Rnd(1) * 100) + 1 <= 7 Then DK% = 1

                            Case 91 To 95
                                U$ = "HE POWERS IT UP"
                                If (B = 0 Or B = 1) And Int(Rnd(1) * 100) + 1 <= 1 Then DK% = 1
                                If (B = 2 Or B = 3) And Int(Rnd(1) * 100) + 1 <= 5 Then DK% = 1
                                If B = 4 And Int(Rnd(1) * 100) + 1 <= 7 Then DK% = 1

                            Case 96 To 100
                                U$ = "HE LAYS IT UP"

                        End Select

                    Case 3
                        'PENETRATE
                        Select Case B
                            Case 0, 1
                                Select Case RN
                                    Case 1 To 25
                                        U$ = "HE SPINS FREE"
                                        Call PBP
                                        U$ = "SHOOTS"
                                    Case 26 To 50
                                        U$ = "HE TAKES IT UP UNDER THE BASKET"
                                        If Int(Rnd(1) * 100) + 1 <= 2 Then DK% = 1
                                    Case 51 To 52
                                        U$ = "HE MAKES A NICE SPIN MOVE"
                                        Call PBP
                                        U$ = "AND SOARS TO THE HOOP"
                                        If Int(Rnd(1) * 100) + 1 <= 2 Then DK% = 1
                                    Case 53 To 54
                                        U$ = "HE BLOWS PAST TWO DEFENDERS"
                                    Case 55 To 56
                                        U$ = "HE DRIVES THE BASELINE"
                                        Call PBP
                                        U$ = "SPINS RIGHT AND GOES UP"
                                        If Int(Rnd(1) * 100) + 1 <= 2 Then DK% = 1
                                    Case 57
                                        U$ = "HE SLICES IN THE HOLE"
                                        Call PBP
                                        U$ = "UNDERHAND SCOOP SHOT"
                                    Case 58
                                        U$ = "STRONG CUT ALONG THE BASELINE"
                                        Call PBP
                                        U$ = "DOUBLE PUMP REVERSE LAYUP"
                                    Case 59
                                        U$ = "HE PENETRATES"
                                        Call PBP
                                        U$ = "GORGEOUS FINGER ROLL!"
                                    Case 60 To 75
                                        U$ = "HE TAKES THE JUMPER"
                                    Case 76 To 90
                                        U$ = "HE STOPS"
                                        Call PBP
                                        U$ = "SHOOTS"
                                    Case 91
                                        U$ = "HE LOOKS TO PASS"
                                        Call PBP
                                        U$ = "NO ONE IS OPEN"
                                        Call PBP
                                        U$ = "HE PUTS IT UP"
                                    Case 92 To 100
                                        U$ = "HE TAKES THE SHOT"
                                End Select

                            Case 2, 3
                                Select Case RN
                                    Case 1 To 16
                                        U$ = "HE TAKES IT UP"
                                        If Int(Rnd(1) * 100) + 1 <= 7 Then DK% = 1
                                    Case 17 To 32
                                        U$ = "HE SPINS FREE"
                                        Call PBP
                                        U$ = "SHOOTS"
                                        If Int(Rnd(1) * 100) + 1 <= 7 Then DK% = 1
                                    Case 33 To 48
                                        U$ = "HE GETS LOOSE IN THE PAINT"
                                        Call PBP
                                        U$ = "TAKES IT UP"
                                        If Int(Rnd(1) * 100) + 1 <= 7 Then DK% = 1
                                    Case 49 To 64
                                        U$ = "HE PUTS IT UP"
                                    Case 65 To 67
                                        U$ = "HE CURLS OFF A PICK IN THE PAINT"
                                        Call PBP
                                        U$ = "TAKES IT UP"
                                        If Int(Rnd(1) * 100) + 1 <= 7 Then DK% = 1
                                    Case 68, 69
                                        U$ = "HE MAKES A NICE SPIN MOVE"
                                        Call PBP
                                        U$ = "AND SOARS TO THE HOOP"
                                        If Int(Rnd(1) * 100) + 1 <= 7 Then DK% = 1
                                    Case 70, 71
                                        U$ = "HE DRIVES THE BASELINE"
                                        Call PBP
                                        U$ = "SPINS RIGHT AND GOES UP"
                                        If Int(Rnd(1) * 100) + 1 <= 7 Then DK% = 1
                                    Case 72
                                        U$ = "HE SLICES IN THE HOLE"
                                        Call PBP
                                        U$ = "UNDERHAND SCOOP SHOT"
                                    Case 73
                                        U$ = "STRONG CUT ALONG THE BASELINE"
                                        Call PBP
                                        U$ = "DOUBLE PUMP REVERSE LAYUP"
                                    Case 74
                                        U$ = "HE PENETRATES"
                                        Call PBP
                                        U$ = "GORGEOUS FINGER ROLL!"
                                    Case 75 To 80
                                        U$ = "HE SHOOTS"
                                    Case 81 To 100
                                        U$ = "HE TAKES THE SHOT"
                                End Select

                            Case 4

                                Select Case RN
                                    Case 1 To 15
                                        U$ = "HE PUTS IT OFF THE GLASS"
                                    Case 16 To 25
                                        U$ = "HE PIVOTS TO THE BASKET"
                                    Case 26 To 40
                                        U$ = "HE POWERS IT UP"
                                    Case 41 To 58
                                        U$ = "HE TAKES IT TO THE HOOP"
                                        If Int(Rnd(1) * 100) + 1 <= 15 Then DK% = 1
                                    Case 59 To 70
                                        U$ = "HE TAKES THE SHOT"
                                    Case 71, 72
                                        U$ = "HE CURLS OFF A PICK IN THE PAINT"
                                        Call PBP
                                        U$ = "TAKES IT UP"
                                        If Int(Rnd(1) * 100) + 1 <= 15 Then DK% = 1
                                    Case 73, 74
                                        U$ = "HE MAKES A NICE SPIN MOVE"
                                        Call PBP
                                        U$ = "AND SOARS TO THE HOOP"
                                        If Int(Rnd(1) * 100) + 1 <= 15 Then DK% = 1
                                    Case 75 To 100
                                        U$ = "HE TAKES IT UP STRONG"
                                        If Int(Rnd(1) * 100) + 1 <= 15 Then DK% = 1
                                End Select

                        End Select

                    Case 4
                        'THREE!
                        If FT% = 1 And RN <= 50 Then U$ = U$ + " THROWS UP A PRAYER"
                        If FT% = 1 And RN > 50 Then U$ = U$ + " LAUNCHES A THREE"

                        If FT% = 1 Then
                            FT% = 0
                        Else
                            Select Case RN
                                Case 1 To 10
                                    U$ = U$ + " TRIES FOR THREE!"
                                Case 11 To 20
                                    U$ = U$ + " SHOOTS FROM 3-POINT RANGE!"
                                Case 21 To 30
                                    U$ = U$ + " HOISTS A THREE!"
                                Case 31 To 40
                                    U$ = U$ + " BOMBS A THREE FROM THE CORNER!"
                                Case 41 To 50
                                    U$ = U$ + " FIRES FROM THE 3-POINT LINE!"
                                Case 51 To 60
                                    U$ = U$ + " SHOOTS FOR THREE!"
                                Case 61 To 70
                                    U$ = U$ + " SHOOTS THE 3-POINTER!"
                                Case 71 To 80
                                    U$ = U$ + " FOR 3...!"
                                Case 81 To 90
                                    U$ = U$ + " PUTS UP THE TREY!"
                                Case 91 To 100
                                    U$ = U$ + " TAKES THE 3-POINTER!"
                            End Select

                        End If

                    Case 5
                        'SHORT JUMP
                        DK% = 0

                        RN = Int(Rnd(1) * 59) + 1
                        Select Case RN
                            Case 1
                                U$ = U$ + " WITH A TWISTING JUMPER"
                            Case 2
                                U$ = U$ + " SHOOTS THE J"
                            Case 3
                                If B = 4 Then
                                    U$ = U$ + " RELEASES THE HOOK"
                                Else
                                    'B <> 4
                                    U$ = U$ + " TAKES THE SHOT"
                                End If
                            Case 4
                                U$ = U$ + " WITH A SHORT JUMPER"
                            Case 5
                                U$ = U$ + " WITH THE 10 FOOTER"
                            Case 6
                                If B = 4 Then
                                    U$ = U$ + " WITH THE RUNNING HOOK"
                                Else
                                    'B <> 4
                                    U$ = U$ + " WITH THE RUNNER"
                                End If

                            Case 7
                                If B = 4 Then
                                    U$ = U$ + " WITH A SWEEPING HOOK"
                                Else
                                    'B <> 4
                                    U$ = U$ + " WORKS FREE AND SHOOTS"
                                End If

                            Case 8
                                If B = 4 Then
                                    U$ = U$ + " WITH A BABY HOOK SHOT"
                                Else
                                    'B <> 4
                                    U$ = U$ + " TAKES THE SHOT"
                                End If

                            Case 9
                                U$ = U$ + " LEANS IN AND SHOOTS"
                            Case 10
                                U$ = U$ + " SHOOTS"
                            Case 11
                                U$ = U$ + " SHOOTS FALLING AWAY"
                            Case 12
                                U$ = U$ + " LEANS IN FOR THE SHOT"
                            Case 13
                                U$ = U$ + " TAKES THE LEFT HANDER"
                            Case 14
                                U$ = U$ + " HARD TO THE HOLE..."
                            Case 15
                                U$ = U$ + " FLIPS IT UP"
                            Case 16
                                U$ = U$ + " FORCES THE INSIDE SHOT"
                            Case 17
                                U$ = U$ + " CUTS TO THE BASKET"
                            Case 18
                                U$ = U$ + " TAKES IT IN THE PAINT"
                            Case 19
                                U$ = U$ + " FLOATS IT OVER HIS MAN"
                            Case 20
                                U$ = U$ + " TAKES HIS MAN INSIDE"
                            Case 21
                                U$ = U$ + " WHEELS IN THE LANE"
                            Case 22
                                U$ = U$ + " CUTS INSIDE FOR THE SHOT"
                            Case 23
                                U$ = U$ + " PENETRATES AND SHOOTS"
                            Case 24
                                U$ = U$ + " SLICES INSIDE"
                            Case 25
                                U$ = U$ + " LOOKS FOR TWO"
                            Case 26
                                U$ = U$ + " DRIVES INTO THE PAINT"
                            Case 27
                                U$ = U$ + " HAS THE BASELINE JUMPER"
                            Case 28
                                U$ = U$ + " GLIDES TO THE HOLE"
                            Case 29
                                U$ = U$ + " GETS INSIDE FOR THE SHOT"
                            Case 30
                                U$ = U$ + " SPINS TOWARD THE HOOP"
                            Case 31
                                U$ = U$ + " FROM SHORT RANGE"
                            Case 32
                                U$ = U$ + " GOES BASELINE"
                            Case 33
                                U$ = U$ + " PENETRATES AND SHOOTS"
                            Case 34
                                U$ = U$ + " FROM 8 FEET"
                            Case 35
                                U$ = U$ + " FROM 6 FEET"
                            Case 36
                                U$ = U$ + " FROM 5 FEET"
                            Case 37
                                U$ = U$ + " DRIVES TO THE HOLE"
                            Case 38
                                U$ = U$ + " GLIDES TO THE HOLE"
                            Case 39
                                U$ = U$ + " GETS INSIDE FOR THE SHOT"
                            Case 40
                                U$ = U$ + " GOES TO THE HOLE"
                            Case 41
                                U$ = U$ + " CUTS INSIDE"
                            Case 42
                                U$ = U$ + " SPINS INSIDE"
                            Case 43
                                U$ = U$ + " BREAKS INSIDE"
                            Case 44
                                U$ = U$ + " SNEAKS INSIDE"
                            Case 45
                                U$ = U$ + " SCOOTS INSIDE"
                            Case 46
                                U$ = U$ + " WORKS IT INSIDE"
                            Case 47
                                U$ = U$ + " KNIFES INSIDE"
                            Case 48
                                U$ = U$ + " SCISSORS THROUGH"
                            Case 49
                                U$ = U$ + " BANGS INSIDE"
                            Case 50
                                U$ = U$ + " SLICES INSIDE"
                            Case 51
                                U$ = U$ + " PUMPS AND SHOOTS"
                            Case 52
                                U$ = U$ + " DOUBLE PUMPS AND SHOOTS"
                            Case 53
                                U$ = U$ + "...ONE HANDED FADE AWAY"
                            Case 54
                                U$ = U$ + "...LEFT HANDED FADE AWAY"
                            Case 55
                                U$ = U$ + "...HIGH ARCHING SHOT"
                            Case 56
                                U$ = U$ + " WITH A RUNNING LEFT HANDER"
                            Case 57
                                U$ = U$ + " WITH A RUNNING SCOOP SHOT"
                            Case 58
                                U$ = U$ + " WITH THE SCOOP SHOT"
                            Case 59
                                U$ = U$ + " WITH THE FINGER ROLL"
                        End Select

                    Case 6
                        DK% = 0

                        RN = Int(Rnd(1) * 59) + 1

                        Select Case RN
                            Case 1
                                U$ = U$ + " POPS FROM OUTSIDE"
                            Case 2
                                U$ = U$ + " DECIDES TO SHOOT IT"
                            Case 3
                                U$ = U$ + " FIRES THE FADE-AWAY"
                            Case 4
                                U$ = U$ + " LETS IT FLY"
                            Case 5
                                U$ = U$ + " LAUNCHES ONE"
                            Case 6
                                U$ = U$ + " WITH THE OUTSIDE SHOT"
                            Case 7
                                U$ = U$ + " OUT OF THE CORNER"
                            Case 8
                                U$ = U$ + " PUTS IT UP FROM 18"
                            Case 9
                                U$ = U$ + " SPOTS UP OUTSIDE"
                            Case 10
                                U$ = U$ + " RELEASES THE JUMPER"
                            Case 11
                                U$ = U$ + " FROM THE TOP OF THE KEY"
                            Case 12
                                U$ = U$ + " FIRES FROM THE LEFT WING"
                            Case 13
                                U$ = U$ + " TRIES THE 12 FOOTER"
                            Case 14
                                U$ = U$ + " PULLS UP AND POPS"
                            Case 15
                                U$ = U$ + " FIRES FROM 15"
                            Case 16
                                U$ = U$ + " FROM THE PERIMETER"
                            Case 17
                                U$ = U$ + " TURNS AND SHOOTS"
                            Case 18
                                U$ = U$ + " SHOOTS OFF THE SCREEN"
                            Case 19
                                U$ = U$ + " FAKES AND SHOOTS"
                            Case 20
                                U$ = U$ + " FIRES AWAY"
                            Case 21
                                U$ = U$ + " POPS FROM THE BASELINE"
                            Case 22
                                U$ = U$ + " DRIVES THE LANE"
                            Case 23
                                U$ = U$ + " TAKES THE SHOT"
                            Case 24
                                U$ = U$ + " WORKS FREE AND FIRES"
                            Case 25
                                U$ = U$ + " SHOOTS OVER HIS MAN"
                            Case 26
                                U$ = U$ + " SHOOTS FALLING AWAY"
                            Case 27
                                U$ = U$ + " FAKES AND SHOOTS"
                            Case 28
                                U$ = U$ + " FIRES AWAY"
                            Case 29
                                U$ = U$ + " POPS FROM THE BASELINE"
                            Case 30
                                U$ = U$ + " DRIVES THE LANE"
                            Case 31
                                U$ = U$ + " TAKES THE SHOT"
                            Case 32
                                U$ = U$ + " WORKS FREE AND FIRES"
                            Case 33
                                U$ = U$ + " SHOOTS FROM 15"
                            Case 34
                                U$ = U$ + " SHOOTS"
                            Case 35
                                U$ = U$ + " TAKES THE JUMPER"
                            Case 36
                                U$ = U$ + " FROM THE RIGHT CORNER"
                            Case 37
                                U$ = U$ + " FROM THE LEFT CORNER"
                            Case 38
                                U$ = U$ + " FROM THE KEY"
                            Case 39
                                U$ = U$ + " FIRES FROM OUTSIDE"
                            Case 40
                                U$ = U$ + " PUTS IT UP FROM 16"
                            Case 41
                                U$ = U$ + " FROM THE PERIMETER"
                            Case 42
                                U$ = U$ + " FAKES AND SHOOTS"
                            Case 43
                                U$ = U$ + " FROM AROUND 16 FEET"
                            Case 44
                                U$ = U$ + " PUTS IT UP"
                            Case 45
                                U$ = U$ + " WITH A RUNNING ONE-HANDER"
                            Case 46
                                U$ = U$ + " PULLS UP"
                            Case 47
                                U$ = U$ + " KISSES THE GLASS"
                            Case 48
                                U$ = U$ + " SPINS AND SHOOTS"
                            Case 49
                                U$ = U$ + " PUTS IT UP FROM 16"
                            Case 50
                                U$ = U$ + " WITH A LONG JUMPER"
                            Case 51
                                U$ = U$ + " PUMPS AND SHOOTS"
                            Case 52
                                U$ = U$ + " DOUBLE PUMPS AND SHOOTS"
                            Case 53
                                U$ = U$ + "...ONE HANDED FADE AWAY"
                            Case 54
                                U$ = U$ + "...LEFT HANDED FADE AWAY"
                            Case 55
                                U$ = U$ + "...HIGH ARCHING SHOT"
                            Case 56
                                U$ = U$ + " WITH A RUNNING LEFT HANDER"
                            Case 57
                                U$ = U$ + " WITH A RUNNING SCOOP SHOT"
                            Case 58
                                U$ = U$ + " WITH THE SCOOP SHOT"
                            Case 59
                                U$ = U$ + " WITH THE FINGER ROLL"
                        End Select

                    Case 7
                        DK% = 0
                        Select Case RN
                            Case 1 To 10
                                U$ = U$ + " FIRES FROM THE PERIMETER"
                            Case 11 To 20
                                U$ = U$ + " SHOOTS FROM 17"
                            Case 21 To 30
                                U$ = U$ + " PUTS IT UP FROM 17"
                            Case 31 To 40
                                U$ = U$ + " PUTS IT UP"
                            Case 41 To 45
                                U$ = U$ + " FROM INSIDE THE THE KEY"
                            Case 46 To 50
                                U$ = U$ + " FIRES FROM THE CORNER"
                            Case 51 To 60
                                U$ = U$ + " SHOOTS FROM OUTSIDE"
                            Case 61 To 70
                                U$ = U$ + " PUMPS AND SHOOTS"
                            Case 71 To 80
                                U$ = U$ + " FIRES THE FADE-AWAY"
                            Case 81 To 90
                                If threePtOpt = 1 Then U$ = U$ + " FROM INSIDE THE 3-POINT LINE"
                            Case 91
                                If threePtOpt = 1 Then U$ = U$ + " FOR THREE!": Call PBP: U$ = "NO!": Call PBP: U$ = "HIS FOOT IS ON THE 3-POINT LINE"
                            Case 92 To 100
                                U$ = U$ + " SHOOTS FROM THE WING"
                        End Select

                    Case 8
                        Select Case RN
                            Case 1 To 20
                                U$ = "HE SAILS TO THE HOOP"
                            Case 21 To 23
                                U$ = "HE TAKES IT TO THE BUCKET"
                            Case 24 To 26
                                U$ = "HE TAKES IT TO THE HOLE"
                            Case 27 To 29
                                U$ = "HE SLASHES TO THE HOLE"
                            Case 30 To 32
                                U$ = "HE SLASHES TO THE BUCKET"
                            Case 33 To 35
                                U$ = "HE SOARS TO THE BUCKET"
                            Case 36 To 38
                                U$ = "HE SOARS TO THE HOLE"
                            Case 39 To 40
                                U$ = "HE GLIDES TO THE HOLE"
                            Case 41 To 60
                                U$ = "HE GOES IN STRONG"
                            Case 61 To 80
                                U$ = "HE TAKES IT IN"
                            Case 81 To 90
                                U$ = "HE TAKES A DEFENDER WITH HIM"
                            Case 91 To 100
                                U$ = "HE GOES UP WITH IT"
                        End Select

                    Case 9
                        'BACK AFTER REB
                        U$ = "HE "

                        RN = Int(Rnd(1) * 11) + 1
                        Select Case RN
                            Case 1
                                U$ = U$ + "TAKES IT BACK UP"
                            Case 2
                                U$ = U$ + "GOES BACK UP WITH IT"
                            Case 3
                                U$ = U$ + "POWERS HIS WAY UP WITH IT"
                            Case 4
                                U$ = U$ + "GOES STRONG TO THE BASKET"
                            Case 5
                                U$ = U$ + "MUSCLES IT UP"
                            Case 6
                                U$ = U$ + "SHOOTS"
                            Case 7
                                U$ = U$ + "TAKES IT TO THE GOAL"
                            Case 8
                                U$ = U$ + "PUTS IT UP AGAIN"
                            Case 9
                                U$ = U$ + "SHOOTS IT AGAIN"
                            Case 10
                                U$ = U$ + "CLAWS HIS WAY UP"
                            Case 11
                                U$ = U$ + "SHOOTS IN TRAFFIC"
                        End Select

                        If B = 2 Or B = 3 And Int(Rnd(1) * 100) + 1 <= 7 Then DK% = 1
                        If B = 4 And Int(Rnd(1) * 100) + 1 <= 15 Then DK% = 1

                    Case 10
                        DK% = 0

                        Call d100(RN)
                        Select Case RN
                            Case 1 To 20
                                U$ = U$ + " SHOOTS FROM 15"
                            Case 21 To 40
                                U$ = U$ + " SHOOTS"
                            Case 41 To 60
                                U$ = U$ + " TAKES THE JUMPER"
                            Case 61 To 80
                                U$ = U$ + " PUTS IT UP FROM 16"
                            Case 81 To 100
                                U$ = U$ + " FAKES AND SHOOTS"
                        End Select

                End Select

            Case 4
                'THREE GOOD
                U$ = "HE "

                Select Case RN
                    Case 1 To 6
                        U$ = U$ + " DRAINS THE THREE!"
                        Call PBP
                        U$ = "NO!"
                        Call PBP
                        U$ = "HIS FOOT IS ON THE 3-POINT LINE"
                        XX% = 1
                    Case 7 To 10
                        U$ = U$ + "FILLS UP THE BASKET!!!"
                    Case 11 To 20
                        U$ = U$ + "HITS THE TREY!!!"
                    Case 21 To 30
                        U$ = "IT'S GOOOODD!!"
                    Case 31 To 40
                        U$ = U$ + "GETS IT!!!"
                    Case 41 To 45
                        U$ = "NOTHING BUT THE BOTTOM OF THE NET"
                    Case 46 To 50
                        U$ = "COUNT IT!!"
                    Case 51 To 55
                        U$ = "WAY DOWNTOWN BANG!!!"
                    Case 56 To 60
                        U$ = U$ + "RINGS IT UP!!!"
                    Case 61 To 80
                        U$ = U$ + "DRAINS IT!!!"
                    Case 81 To 90
                        U$ = "HE BURIES IT!!!"
                    Case 91 To 100
                        U$ = "IT'S ALL NET!!!"
                End Select

            Case 5
                'THREE BAD
                U$ = "HE "

                Select Case RN
                    Case 1 To 20
                        U$ = U$ + "GETS NONE"
                    Case 21 To 25
                        U$ = "IT NEVER HAD A CHANCE"
                    Case 26 To 35
                        U$ = "AIRRRR BALLLL!!"
                    Case 36 To 40
                        U$ = U$ + "MISFIRES"
                    Case 41 To 60
                        U$ = "IT'S OFF THE RIM...NO GOOD!"
                    Case 61 To 80
                        U$ = "IT'S SHORT"
                    Case 81 To 100
                        U$ = U$ + "MISSES"
                End Select

            Case 6
                'FAST BREAK
                U$ = players$(P, B1(P, B))

                RN = Int(Rnd(1) * 38) + 1
                Select Case RN
                    Case 1
                        U$ = U$ + " HAS IT ON THE FAST BREAK!"
                    Case 2
                        U$ = U$ + " IS IN TRANSITION!"
                    Case 3
                        U$ = U$ + " STARTS THE BREAK!"
                    Case 4
                        U$ = U$ + " IS DOWN COURT IN A HURRY!"
                    Case 5
                        U$ = U$ + " IS ON THE RUN!"
                    Case 6
                        U$ = U$ + " GOES COAST TO COAST!"
                    Case 7
                        U$ = U$ + " ON THE BREAK!"
                    Case 8
                        U$ = U$ + " ON THE RUN!"
                    Case 9
                        U$ = U$ + " ON THE FAST BREAK!"
                    Case 10
                        U$ = U$ + " HAS THE FAST BREAK!"
                    Case 11
                        U$ = U$ + " BREAKS INTO THE FORECOURT!"
                    Case 12
                        U$ = U$ + " FLIES UPCOURT!"
                    Case 13
                        U$ = U$ + " STARTS THE FASTBREAK!"
                    Case 14
                        U$ = U$ + " ON THE MOVE!"
                    Case 15
                        U$ = U$ + " IN TRANSITION!"
                    Case 16
                        U$ = U$ + " DOWN COURT IN A HURRY!"
                    Case 17
                        U$ = U$ + " CHARGES ACROSS THE LINE!"
                    Case 18
                        U$ = U$ + " BREAKS QUICKLY!"
                    Case 19
                        U$ = U$ + " BREAKS DOWN COURT!"
                    Case 20
                        U$ = U$ + " STARTS THE RUNNING GAME!"
                    Case 21
                        U$ = U$ + " FLIES DOWN THE FLOOR!"
                    Case 22
                        U$ = U$ + " GOES RIGHT TO WORK!"
                    Case 23
                        U$ = U$ + " BACK THE OTHER WAY!"
                    Case 24
                        U$ = U$ + " QUICKLY UP THE FLOOR!"
                    Case 25
                        U$ = U$ + " PUSHES IT UP COURT!"
                    Case 26
                        U$ = U$ + " WASTES NO TIME!"
                    Case 27
                        U$ = U$ + " UPS THE TEMPO!"
                    Case 28
                        U$ = U$ + " HUSTLES DOWN COURT!"
                    Case 29
                        U$ = U$ + " RUSHES UP THE FLOOR!"
                    Case 30
                        U$ = U$ + " ON THE MOVE!"
                    Case 31
                        U$ = U$ + " STREAKS UP THE COURT!"
                    Case 32
                        U$ = U$ + " FLIES DOWN THE COURT!"
                    Case 33
                        U$ = U$ + " JETS DOWN COURT!"
                    Case 34
                        U$ = U$ + " QUICKLY GETS IT UP COURT!"
                    Case 35
                        U$ = U$ + " TAKES IT COAST TO COAST!"
                    Case 36
                        U$ = U$ + " IS RUNNING AND GUNNING!"
                    Case 37
                        U$ = U$ + " FLIES OVER THE TIME LINE!"
                    Case 38
                        U$ = U$ + " RUSHES IT UP THE FLOOR!"
                End Select

                Call SHOTSTRING

            Case 7
                'FAST BREAK SCORE
                FB% = 0

                RN = Int(Rnd(1) * 39) + 1
                Select Case RN
                    Case 1
                        U$ = "DIPSY-DOO DUNK-A-ROO!!!"
                    Case 2
                        U$ = players$(P, B1(P, B)) + " MAKES IT HAMMER TIME!!!"
                    Case 3
                        U$ = players$(P, B1(P, B)) + " SLAMS IT IN!!!"
                    Case 4
                        U$ = players$(P, B1(P, B)) + " WITH THE 2-HANDED SLAM!!!"
                    Case 5
                        U$ = players$(P, B1(P, B)) + " SLAMS IT HOME!!!"
                    Case 6
                        U$ = players$(P, B1(P, B)) + " JAMS IT HOME!!!"
                    Case 7
                        U$ = players$(P, B1(P, B)) + " THROWS IT DOWN!!!"
                    Case 8
                        U$ = players$(P, B1(P, B)) + " THUNDERSLAM!!!"
                    Case 9
                        U$ = "RIM ROCKING JAM!!!"
                    Case 10
                        U$ = players$(P, B1(P, B)) + " WITH THE MONSTER SLAM!!"
                    Case 11
                        U$ = players$(P, B1(P, B)) + "POWER SLAMS IT!!!"
                    Case 12
                        U$ = players$(P, B1(P, B)) + " WITH THE 2-HANDED STUFF!!!"
                    Case 13
                        U$ = players$(P, B1(P, B)) + " BACKWARDS JAM!!!"
                    Case 14
                        U$ = players$(P, B1(P, B)) + " WITH THE 1-HANDED SLAM!!!"
                    Case 15
                        U$ = players$(P, B1(P, B)) + " WITH THE REVERSE SLAM!!!"
                    Case 16
                        U$ = players$(P, B1(P, B)) + " WITH THE REVERSE JAM!!!"
                    Case 17
                        U$ = players$(P, B1(P, B)) + " WITH THE WINDMILL JAM!!!"
                    Case 18
                        U$ = players$(P, B1(P, B)) + " WITH THE WINDMILL SLAM!!!"
                    Case 19
                        U$ = players$(P, B1(P, B)) + " WITH THE TOMAHAWK SLAM!!!"
                    Case 20
                        U$ = players$(P, B1(P, B)) + " WITH THE 360 SLAM!!!"
                    Case 21
                        U$ = players$(P, B1(P, B)) + " WITH THE SPINNING SLAM!!!"
                    Case 22
                        U$ = players$(P, B1(P, B)) + " WITH THE LEFT HANDED DUNK!!!"
                    Case 23
                        U$ = "DOUBLE CLUTCH JAM!!!"
                    Case 24
                        U$ = players$(P, B1(P, B)) + " GETS THE FLUSH!!!"
                    Case 25
                        U$ = players$(P, B1(P, B)) + " PUNCHES IT HOME!!!"
                    Case 26
                        U$ = players$(P, B1(P, B)) + "...DOUBLE PUMP SLAM!!!"
                    Case 27
                        U$ = players$(P, B1(P, B)) + "...IN YOUR FACE SLAM!!!"
                    Case 28
                        U$ = players$(P, B1(P, B)) + " IS UP": Call PBP: U$ = "HE SPINS": Call PBP: U$ = "BEHIND THE BACK SLAM!!!"
                    Case 29
                        U$ = "HE SLAMS IT HOME!!"
                    Case 30
                        U$ = "HE LAYS IT UP AND IN!!"
                    Case 31
                        U$ = "HE BANGS IT IN!!"
                    Case 32
                        U$ = "HE RAMS IT IN!!"
                    Case 33
                        U$ = "HE SLAMS IT IN!!!"
                    Case 34
                        U$ = "DIPSY-DOO DUNK-A-ROO!!!"
                    Case 35
                        U$ = "HE MAKES IT HAMMER TIME!!!"
                    Case 36
                        U$ = players$(P, B1(P, B)) + " WITH THE 2-HANDED SLAM!!!"
                    Case 37
                        U$ = players$(P, B1(P, B)) + " IS UP": Call PBP: U$ = "HE SPINS": Call PBP: U$ = "BEHIND THE BACK SLAM!!!"
                    Case 38
                        U$ = "HE JAMS IT HOME!!!"
                    Case 39
                        U$ = "HE HAMMERS IT HOME!"
                End Select

            Case 8
                'MISS
                If PZ% = 8 Then

                    PZ% = 0
                    FB% = 0
                    U$ = "HE "

                    Select Case RN

                        Case 1 To 20
                            U$ = U$ + "MISSES THE EASY BASKET!"
                        Case 21 To 40
                            U$ = U$ + "JAMS IT TOO HARD!!"
                        Case 41 To 60
                            U$ = U$ + "SLAMS IT OFF THE IRON...NO GOOD!"
                        Case 61 To 80
                            U$ = U$ + "CAN'T GET IT DOWN!"
                        Case 81 To 100
                            U$ = U$ + "BLOWS THE EASY BASKET!!"
                    End Select

                Else
                    RN = Int(Rnd(1) * 50) + 1
                    Select Case RN
                        Case 1
                            U$ = "IT RATTLES IN AND OUT...NO GOOD"
                        Case 2
                            U$ = "OFF THE IRON"
                        Case 3
                            U$ = "IT SPINS IN AND OUT"
                        Case 4
                            U$ = "IT'S OFF THE GLASS"
                        Case 5
                            U$ = "IT'S NO GOOD"
                        Case 6
                            U$ = "IT'S OFF THE MARK"
                        Case 7
                            U$ = "IT'S A BRICK"
                        Case 8
                            U$ = "OFF THE RIM"
                        Case 9
                            U$ = "NOT EVEN CLOSE!"
                        Case 10
                            U$ = "NO GOOD"
                        Case 11
                            U$ = "HE MISSES"
                        Case 12
                            U$ = "DOESN'T GET THE ROLL"
                        Case 13
                            U$ = "OFF THE GLASS"
                        Case 14
                            U$ = "FALLS SHORT"
                        Case 15
                            U$ = "NO GOOD"
                        Case 16
                            U$ = "NO"
                        Case 17
                            U$ = "HE MISSES"
                        Case 18
                            U$ = "IN AND OUT"
                        Case 19
                            U$ = "OFF THE RIM"
                        Case 20
                            U$ = "OFF THE IRON"
                        Case 21
                            U$ = "IT'S NOT THERE"
                        Case 22
                            U$ = "OFF TARGET"
                        Case 23
                            U$ = "IT RATTLES OUT"
                        Case 24
                            U$ = "IT DOESN'T FALL"
                        Case 25
                            U$ = "IT BOUNCES OFF"
                        Case 26
                            U$ = "IT ROLLS OFF"
                        Case 27
                            U$ = "SHORT"
                        Case 28
                            U$ = "IT DOESN'T GO DOWN"
                        Case 29
                            U$ = "IT'S NO GOOD"
                        Case 30
                            U$ = "NO GOOD"
                        Case 31
                            U$ = "HE MISSES"
                        Case 32
                            U$ = "IT'S A BRICK"
                        Case 33
                            U$ = "HE FAILS TO CONNECT"
                        Case 34
                            U$ = "OFF THE SIDE OF THE RIM"
                        Case 35
                            U$ = "IT COMES UP SHORT"
                        Case 36
                            U$ = "IT ROLLS OUT"
                        Case 37
                            U$ = "AROUND AND OUT"
                        Case 38
                            U$ = "OFF THE BACK OF THE IRON"
                        Case 39
                            U$ = "ON THE FRONT RIM...ROLLS OFF"
                        Case 40
                            U$ = "IN THE AIR...NO GOOD"
                        Case 41
                            U$ = "TOO SHORT"
                        Case 42
                            U$ = "NO GOOD"
                        Case 43
                            U$ = "IT COMES UP SHORT"
                        Case 44
                            U$ = "IT ROLLS OUT"
                        Case 45
                            U$ = "IN AND OUT"
                        Case 46
                            U$ = "OFF THE FRONT OF THE IRON"
                        Case 47
                            U$ = "ON THE RIM...ROLLS OFF"
                        Case 48
                            U$ = "OFF THE FRONT OF THE RIM"
                        Case 49
                            U$ = "TOO SHORT"
                        Case 50
                            U$ = "TOO STRONG"
                    End Select

                End If

            Case 9
                'NOPASS
                U$ = players$(P, B1(P, B)) + " "

                RN = Int(Rnd(1) * 56) + 1
                Select Case RN
                    Case 1
                        U$ = U$ + "LOOKS INSIDE"
                    Case 2
                        U$ = U$ + "TRIES TO WORK FREE"
                    Case 3
                        U$ = U$ + "SETS UP THE PLAY"
                    Case 4
                        U$ = U$ + "LOOKS FOR AN OPENING"
                    Case 5
                        U$ = U$ + "DRIBBLES AROUND HIS MAN"
                    Case 6
                        U$ = U$ + "SIGNALS THE PLAY"
                    Case 7
                        U$ = U$ + "IS IN CONTROL"
                    Case 8
                        U$ = U$ + "IS IN POSSESSION"
                    Case 9
                        U$ = U$ + "TRIES TO GET OPEN"
                    Case 10
                        U$ = U$ + "YO-YO'S OUT TOP"
                    Case 11
                        U$ = U$ + "GOES TO WORK"
                    Case 12
                        U$ = U$ + "WORKS OFF THE PICK"
                    Case 13
                        U$ = U$ + "ON THE DRIBBLE"
                    Case 14
                        U$ = U$ + "CUTS TO THE LEFT"
                    Case 15
                        U$ = U$ + "CUTS TO THE RIGHT"
                    Case 16
                        U$ = U$ + "WHEELS AND DEALS"
                    Case 17
                        U$ = U$ + "SETS UP ON TOP"
                    Case 18
                        U$ = U$ + "SLIDES RIGHT"
                    Case 19
                        U$ = U$ + "SLIDES LEFT"
                    Case 20
                        U$ = U$ + "GOES TO WORK"
                    Case 21
                        U$ = U$ + "MOVES IT LEFT-SIDE"
                    Case 22
                        U$ = U$ + "MOVES IT RIGHT-SIDE"
                    Case 23
                        U$ = U$ + "REVERSES THE DRIBBLE"
                    Case 24
                        U$ = U$ + "TRIES TO GET OPEN"
                    Case 25
                        U$ = U$ + "DRIBBLES TO THE MIDDLE"
                    Case 26
                        U$ = U$ + "FAKES THE PASS"
                    Case 27
                        U$ = U$ + "SETS UP ON TOP"
                    Case 28
                        U$ = U$ + "SLIDES RIGHT"
                    Case 29
                        U$ = U$ + "SLIDES LEFT"
                    Case 30
                        U$ = U$ + "DRIBBLES IT BEHIND THE BACK"
                    Case 31
                        U$ = U$ + "FAKES LEFT...GOES RIGHT"
                    Case 32
                        U$ = U$ + "FAKES RIGHT...GOES LEFT"
                    Case 33
                        U$ = U$ + "SPINS HARD TO THE LEFT"
                    Case 34
                        U$ = U$ + "SPINS HARD TO THE RIGHT"
                    Case 35
                        U$ = U$ + "LEANS LEFT...GOES RIGHT"
                    Case 36
                        U$ = U$ + "LEANS RIGHT...GOES LEFT"
                    Case 37
                        U$ = U$ + "LEANS LEFT...CUTS RIGHT"
                    Case 38
                        U$ = U$ + "LEANS RIGHT...CUTS LEFT"
                    Case 39
                        U$ = U$ + "DOUBLE REVERSES HIS DRIBBLE"
                    Case 40
                        U$ = U$ + "BACKS IN"
                    Case 41
                        U$ = U$ + "LEANS FORWARD"
                    Case 42
                        U$ = U$ + "CROSSES OVER...SPINS"
                    Case 43
                        U$ = U$ + "CUTS LEFT"
                    Case 44
                        U$ = U$ + "CUTS RIGHT"
                    Case 45
                        U$ = U$ + "WITH THE HESITATION DRIBBLE": Call PBP: U$ = "HE SPINS LEFT"
                    Case 46
                        U$ = U$ + "WITH THE HESITATION DRIBBLE": Call PBP: U$ = "HE SPINS RIGHT"
                    Case 47
                        U$ = U$ + "WITH THE HESITATION DRIBBLE": Call PBP: U$ = "HE CUTS LEFT"
                    Case 48
                        U$ = U$ + "WITH THE HESITATION DRIBBLE": Call PBP: U$ = "HE CUTS RIGHT"
                    Case 49
                        U$ = U$ + "STUTTER STEPS": Call PBP: U$ = "HE MOVES LEFT"
                    Case 50
                        U$ = U$ + "MAINTAINS HIS DRIBBLE"
                    Case 51
                        U$ = U$ + "FAKE SPINS LEFT...GOES RIGHT"
                    Case 52
                        U$ = U$ + "FAKE SPINS RIGHT...GOES LEFT"
                    Case 53
                        U$ = U$ + "PALMS THE BALL": Call PBP: U$ = "HE TAKES IT AND SPINS"
                    Case 54
                        U$ = U$ + "SHAKES AND BAKES"
                    Case 55
                        U$ = U$ + "DRIBBLES WITH THE LEFT HAND"
                    Case 56
                        U$ = U$ + "DRIBBLES WITH THE RIGHT HAND"
                End Select

            Case 10
                'PASS PB$=PREV HANDLER
                V$ = players$(P, B1(P, B))

                RN = Int(Rnd(1) * 60) + 1
                Select Case RN
                    Case 1
                        U$ = PB$ + " TO " + V$
                    Case 2
                        U$ = PB$ + " KICKS IT OUT": Call PBP: U$ = V$ + " TAKES THE PASS"
                    Case 3
                        U$ = PB$ + " FEEDS " + V$
                    Case 4
                        U$ = PB$ + " PASSES TO " + V$
                    Case 4
                        U$ = PB$ + " DISHES TO " + V$
                    Case 5
                        U$ = PB$ + " GIVES IT TO " + V$
                    Case 6
                        U$ = PB$ + " WITH A NICE GIVE TO " + V$
                    Case 7
                        U$ = PB$ + " LOOKS": Call PBP: U$ = "HE GETS IT TO " + V$
                    Case 8
                        U$ = PB$ + " SENDS IT TO " + V$
                    Case 9
                        U$ = PB$ + " TO " + V$
                    Case 10
                        U$ = PB$ + " GETS IT TO " + V$
                    Case 11
                        U$ = PB$ + " OVER TO " + V$
                    Case 12
                        U$ = PB$ + " ZIPS IT TO " + V$
                    Case 13
                        U$ = PB$ + " FINDS " + V$
                    Case 14
                        U$ = PB$ + " LOOKS FOR " + V$
                    Case 14
                        U$ = PB$ + " THROWS IT TO " + V$
                    Case 15
                        U$ = PB$ + " GOES TO " + V$
                    Case 16
                        U$ = PB$ + " SETS UP " + V$
                    Case 17
                        U$ = PB$ + " OUT TO " + V$
                    Case 18
                        U$ = PB$ + " FLIPS IT TO " + V$
                    Case 19
                        U$ = "BOUNCE PASS TO " + V$
                    Case 20
                        U$ = PB$ + " LEAVES IT FOR " + V$
                    Case 21
                        U$ = PB$ + " LOOPS IT TO " + V$
                    Case 22
                        U$ = PB$ + " SHOVELS IT OVER TO " + V$
                    Case 23
                        U$ = PB$ + " GIVES IT BACK TO " + V$
                    Case 24
                        U$ = PB$ + " FEEDS IT TO " + V$
                    Case 25
                        U$ = PB$ + " GIVES IT OFF TO " + V$
                    Case 26
                        U$ = "PASSES TO " + V$
                    Case 27
                        U$ = "DISHES TO " + V$
                    Case 28
                        U$ = "GIVES TO " + V$
                    Case 29
                        U$ = "OVER TO " + V$
                    Case 30
                        U$ = "SENDS IT BACK TO " + V$
                    Case 31
                        U$ = "NO-LOOK PASS TO " + V$
                    Case 32
                        U$ = "NO-LOOK BOUNCE PASS TO " + V$
                    Case 33
                        U$ = "BEHIND THE BACK TO " + V$
                    Case 34
                        U$ = PB$ + " SWINGS IT TO " + V$
                    Case 35
                        U$ = PB$ + " FIRES A PASS TO " + V$
                    Case 36
                        U$ = PB$ + " SNAPS A PASS TO " + V$
                    Case 37
                        U$ = PB$ + " SWINGS A PASS TO " + V$
                    Case 38
                        U$ = "TWO-HANDED PASS TO " + V$
                    Case 39
                        U$ = "WRAP AROUND PASS TO " + V$
                    Case 40
                        U$ = "OVER THE SHOULDER PASS TO " + V$
                    Case 41
                        U$ = "BACKHAND PASS TO " + V$
                    Case 42
                        U$ = "BACKHAND DISH TO " + V$
                    Case 43
                        U$ = "PASS CONNECTED TO " + V$
                    Case 44
                        U$ = PB$ + " WIRES IT TO " + V$
                    Case 45
                        U$ = PB$ + " WIRES A PASS TO " + V$
                    Case 46
                        U$ = PB$ + " SNAPS A PASS TO " + V$
                    Case 47
                        U$ = PB$ + " FAKES..PASSES TO " + V$
                    Case 48
                        U$ = PB$ + " SHUFFLES IT TO " + V$
                    Case 49
                        U$ = PB$ + " SLINGS IT TO " + V$
                    Case 50
                        U$ = PB$ + " FLIPS IT TO " + V$
                    Case 51
                        U$ = PB$ + " WHIPS IT OVER TO " + V$
                    Case 52
                        U$ = PB$ + " SLINGS A BOUNCE PASS TO " + V$
                    Case 53
                        U$ = PB$ + " SHOVELS IT TO " + V$
                    Case 54
                        U$ = PB$ + " PUMP FAKES A SHOT"
                        Call PBP
                        U$ = "HE SWINGS IT TO " + V$
                    Case 55
                        U$ = PB$ + " PUMP FAKES A SHOT"
                        Call PBP
                        U$ = "HE BOUNCES IT TO " + V$
                    Case 56
                        U$ = PB$ + " WITH A FOOT FAKE"
                        Call PBP
                        U$ = "HE SPINS AND DUMPS IT TO " + V$
                    Case 57
                        U$ = PB$ + " CUTS ACROSS THE LANE"
                        Call PBP
                        U$ = "HE DISHES INSIDE TO " + V$
                    Case 58
                        U$ = PB$ + " DRIVES THE BASELINE"
                        Call PBP
                        U$ = "DISHES UNDERNEATH TO " + V$
                    Case 59
                        U$ = PB$ + " FAKES RIGHT...CUTS LEFT"
                        Call PBP
                        U$ = "SHUFFLES IT TO " + V$
                    Case 60
                        U$ = PB$ + " HEAD FAKES"
                        Call PBP
                        U$ = "HE PUSHES IT TO " + V$
                End Select

            Case Else
                U$ = players$(P, B1(P, B))

        End Select

    End If

End Sub


'----------------------------------------
'           WINDEX Subroutine
'----------------------------------------
'This subroutine cleans the "window" used
'for the play-by-play text.
Sub WINDEX ()

    For I = 8 To 15
        Locate I, 1
        Call BLANKLINE
    Next I

    Locate 8, 1

End Sub


'----------------------------------------
'       BLANKLINE Subroutine
'----------------------------------------
'This subroutine literally prints blank
'spaces to clear a line of the PBP box.
Sub BLANKLINE ()

    Print Space$(38)

End Sub


'----------------------------------------
'         CLEARPBPBOX Subroutine
'----------------------------------------
'This subroutine is similar to windex,
'but only cleans the Play-by-Play area
'if there is a PBP delay. It also places
'the cursor further down when done.
Sub CLEARPBPBOX ()

    If pbpDelay! <> 0 Then

        For I = 8 To 15:
            Locate I, 1
            Call BLANKLINE
        Next I

    End If

    Locate 10

End Sub


'----------------------------------------
'          CLEARPBP Subroutine
'----------------------------------------
'This subroutine clears all the strings
'used for each line of PBP display
Sub CLEARPBP ()

    If pbpDelay! <> 0 And pbpOpt <> 1 Then
        nbrLines = 1
        A1$ = ""
        B1$ = ""
        C1$ = ""
        D1$ = ""
        E1$ = ""
        F1$ = ""
        G1$ = ""
        H1$ = ""
        J$ = ""
    End If

End Sub


'----------------------------------------
'           TICKER Subroutine
'----------------------------------------
'This subroutine displays the score of all
'current games being tracked by the ticker.
'For each game it will find the score that
'matches the current game time / period.
Sub TICKER ()

    If autoPlay <> 1 Or playerMode <> 2 Then

        Color 14, 0
        Cls

        Call d100(RN)

        If halfTime = 1 Then

            If G9 = 0 Then
                If RN <= 50 Then
                    Locate , 23: Print "PRUDENTIAL AT THE HALF SCOREBOARD"
                Else
                    Locate , 28: Print "RED MAN HALFTIME REPORT"
                End If
            Else
                If RN <= 50 Then
                    Locate , 29: Print "TOYOTA HALFTIME REPORT"
                Else
                    Locate , 29: Print "HONDA HALFTIME REPORT"
                End If
            End If

        Else

            If endGame = 1 Then

                If G9 = 0 Then
                    Locate , 27: Print "CHEVROLET FINAL SCOREBOARD"
                Else
                    Select Case RN
                        Case 1 To 33: Locate , 27: Print "USA TODAY FINAL SCOREBOARD"
                        Case 34 To 67: Locate , 24: Print "FEDERAL EXPRESS FINAL SCOREBOARD"
                        Case 67 To 100: Locate , 23: Print "ESPN SPORTSCENTER FINAL SCOREBOARD"
                    End Select
                End If
            Else
                If halfTime = 0 Then Locate , 30: Print "LANCE HAFFNER GAMES SCOREBOARD"
            End If

        End If

        Color 15

        If TMT = 0 Then
            Locate 10, 28: Print "NO OTHER GAMES SCHEDULED"
        Else
            If H = 1 And gameClock! <= 1200 And gameClock! >= 960 Then timeInterval = 1
            If H = 1 And gameClock! < 960 And gameClock! >= 720 Then timeInterval = 2
            If H = 1 And gameClock! < 720 And gameClock! >= 480 Then timeInterval = 3
            If H = 1 And gameClock! < 480 And gameClock! >= 240 Then timeInterval = 4
            If H = 1 And gameClock! < 240 And gameClock! >= 120 Then timeInterval = 5
            If H = 1 And gameClock! < 120 Then timeInterval = 6

            If halfTime = 1 Then timeInterval = 8

            If H = 2 And gameClock! < 1200 And gameClock! >= 960 Then timeInterval = 9
            If H = 2 And gameClock! < 960 And gameClock! >= 720 Then timeInterval = 10
            If H = 2 And gameClock! < 720 And gameClock! >= 480 Then timeInterval = 11
            If H = 2 And gameClock! < 480 And gameClock! >= 240 Then timeInterval = 12
            If H = 2 And gameClock! < 240 And gameClock! >= 120 Then timeInterval = 13
            If H = 2 And gameClock! < 120 Then timeInterval = 14

            '-- Could we not got higher than 16?
            '-- In fact why do we strip things down to 14 anyway?
            If H = 3 And gameClock! <= 1200 And gameClock! >= 960 Then timeInterval = 14
            If H = 3 And gameClock! < 960 And gameClock! >= 720 Then timeInterval = 14
            If H = 3 And gameClock! < 720 And gameClock! >= 480 Then timeInterval = 15
            If H = 3 And gameClock! < 480 And gameClock! >= 240 Then timeInterval = 16
            If H = 3 And gameClock! < 240 Then timeInterval = 17


            If Left$(SX$(1, 0), 3) <> "XXX" Then

                Locate 2, 1
                X = 1
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(1, 0), 13);
                Locate , 15: Print Using "### "; SX%(1, 0, tickInterval);
                Print R$(tickInterval)

                Print Left$(SX$(1, 1), 13);
                Locate , 15: Print Using "### #"; SX%(1, 1, tickInterval)
            End If

            If Left$(SX$(2, 0), 3) <> "XXX" Then
                Locate 5, 1
                X = 2
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(2, 0), 13);
                Locate , 15: Print Using "### "; SX%(2, 0, tickInterval);

                Print R$(tickInterval)

                Print Left$(SX$(2, 1), 13);
                Locate , 15: Print Using "### #"; SX%(2, 1, tickInterval)
            End If

            If Left$(SX$(3, 0), 3) <> "XXX" Then
                Locate 8, 1
                X = 3
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(3, 0), 13);
                Locate , 15: Print Using "### "; SX%(3, 0, tickInterval);

                Print R$(tickInterval)

                Print Left$(SX$(3, 1), 13);
                Locate , 15: Print Using "### #"; SX%(3, 1, tickInterval)
            End If

            If Left$(SX$(4, 0), 3) <> "XXX" Then
                Locate 11, 1
                X = 4
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(4, 0), 13);
                Locate , 15: Print Using "### "; SX%(4, 0, tickInterval);

                Print R$(tickInterval)

                Print Left$(SX$(4, 1), 13);
                Locate , 15: Print Using "### #"; SX%(4, 1, tickInterval)
            End If

            If Left$(SX$(5, 0), 3) <> "XXX" Then
                Locate 14, 1
                X = 5
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(5, 0), 13);
                Locate , 15: Print Using "### "; SX%(5, 0, tickInterval);

                Print R$(tickInterval)

                Print Left$(SX$(5, 1), 13);
                Locate , 15: Print Using "### #"; SX%(5, 1, tickInterval)
            End If

            If Left$(SX$(6, 0), 3) <> "XXX" Then
                Locate 17, 1
                X = 6
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(6, 0), 13);
                Locate , 15: Print Using "### "; SX%(6, 0, tickInterval);
                Print R$(tickInterval)

                Print Left$(SX$(6, 1), 13);
                Locate , 15: Print Using "### #"; SX%(6, 1, tickInterval)
            End If

            If Left$(SX$(7, 0), 3) <> "XXX" Then
                Locate 20, 1
                X = 7
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(7, 0), 13);
                Locate , 15: Print Using "### "; SX%(7, 0, tickInterval);

                Print R$(tickInterval)

                Print Left$(SX$(7, 1), 13);
                Locate , 15: Print Using "### #"; SX%(7, 1, tickInterval)
            End If

            If Left$(SX$(8, 0), 3) <> "XXX" Then
                Locate 23, 1
                X = 8
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(8, 0), 13);
                Locate , 15: Print Using "### "; SX%(8, 0, tickInterval);

                Print R$(tickInterval)

                Print Left$(SX$(8, 1), 13);
                Locate , 15: Print Using "### #"; SX%(8, 1, tickInterval);
            End If

            If Left$(SX$(9, 0), 3) <> "XXX" Then
                Locate 2, 21
                X = 9
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(9, 0), 13);
                Locate , 35: Print Using "### "; SX%(9, 0, tickInterval);

                Print R$(tickInterval)
                Locate , 21

                Print Left$(SX$(9, 1), 13);
                Locate , 35: Print Using "### #"; SX%(9, 1, tickInterval)
            End If

            If Left$(SX$(10, 0), 3) <> "XXX" Then
                Locate 5, 21
                X = 10
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(10, 0), 13);
                Locate , 35: Print Using "### "; SX%(10, 0, tickInterval);

                Print R$(tickInterval)
                Locate , 21

                Print Left$(SX$(10, 1), 13);
                Locate , 35: Print Using "### #"; SX%(10, 1, tickInterval)
            End If

            If Left$(SX$(11, 0), 3) <> "XXX" Then
                Locate 8, 21
                X = 11
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(11, 0), 13);
                Locate , 35: Print Using "### "; SX%(11, 0, tickInterval);

                Print R$(tickInterval)
                Locate , 21

                Print Left$(SX$(11, 1), 13);
                Locate , 35: Print Using "### #"; SX%(11, 1, tickInterval)
            End If

            If Left$(SX$(12, 0), 3) <> "XXX" Then
                Locate 11, 21
                X = 12
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(12, 0), 13);
                Locate , 35: Print Using "### "; SX%(12, 0, tickInterval);

                Print R$(tickInterval)
                Locate , 21

                Print Left$(SX$(12, 1), 13);
                Locate , 35: Print Using "### #"; SX%(12, 1, tickInterval)
            End If

            If Left$(SX$(13, 0), 3) <> "XXX" Then
                Locate 14, 21
                X = 13
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(13, 0), 13);
                Locate , 35: Print Using "### "; SX%(13, 0, tickInterval);

                Print R$(tickInterval)
                Locate , 21

                Print Left$(SX$(13, 1), 13);
                Locate , 35: Print Using "### #"; SX%(13, 1, tickInterval)
            End If

            If Left$(SX$(14, 0), 3) <> "XXX" Then
                Locate 17, 21
                X = 14
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(14, 0), 13);
                Locate , 35: Print Using "### "; SX%(14, 0, tickInterval);

                Print R$(tickInterval)
                Locate , 21

                Print Left$(SX$(14, 1), 13);
                Locate , 35: Print Using "### #"; SX%(14, 1, tickInterval)
            End If

            If Left$(SX$(15, 0), 3) <> "XXX" Then
                Locate 20, 21
                X = 15
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(15, 0), 13);
                Locate , 35: Print Using "### "; SX%(15, 0, tickInterval);

                Print R$(tickInterval)
                Locate , 21

                Print Left$(SX$(15, 1), 13);
                Locate , 35: Print Using "### #"; SX%(15, 1, tickInterval)
            End If

            If Left$(SX$(16, 0), 3) <> "XXX" Then
                Locate 23, 21
                X = 16
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(16, 0), 13);
                Locate , 35: Print Using "### "; SX%(16, 0, tickInterval);

                Print R$(tickInterval)
                Locate , 21

                Print Left$(SX$(16, 1), 13);
                Locate , 35: Print Using "### #"; SX%(16, 1, tickInterval);
            End If

            If Left$(SX$(17, 0), 3) <> "XXX" Then
                Locate 2, 41
                X = 17
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(17, 0), 13);
                Locate , 55: Print Using "### "; SX%(17, 0, tickInterval);

                Print R$(tickInterval)
                Locate , 41

                Print Left$(SX$(17, 1), 13);
                Locate , 55: Print Using "### #"; SX%(17, 1, tickInterval)
            End If

            If Left$(SX$(18, 0), 3) <> "XXX" Then
                Locate 5, 41
                X = 18
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(18, 0), 13);
                Locate , 55: Print Using "### "; SX%(18, 0, tickInterval);

                Print R$(tickInterval)
                Locate , 41

                Print Left$(SX$(18, 1), 13);
                Locate , 55: Print Using "### #"; SX%(18, 1, tickInterval)
            End If

            If Left$(SX$(19, 0), 3) <> "XXX" Then
                Locate 8, 41
                X = 19
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(19, 0), 13);
                Locate , 55: Print Using "### "; SX%(19, 0, tickInterval);

                Print R$(tickInterval)
                Locate , 41

                Print Left$(SX$(19, 1), 13);
                Locate , 55: Print Using "### #"; SX%(19, 1, tickInterval)
            End If

            If Left$(SX$(20, 0), 3) <> "XXX" Then
                Locate 11, 41
                X = 20
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(20, 0), 13);
                Locate , 55: Print Using "### "; SX%(20, 0, tickInterval);

                Print R$(tickInterval)
                Locate , 41

                Print Left$(SX$(20, 1), 13);
                Locate , 55: Print Using "### #"; SX%(20, 1, tickInterval)
            End If

            If Left$(SX$(21, 0), 3) <> "XXX" Then
                Locate 14, 41
                X = 21
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(21, 0), 13);
                Locate , 55: Print Using "### "; SX%(21, 0, tickInterval);

                Print R$(tickInterval)
                Locate , 41

                Print Left$(SX$(21, 1), 13);
                Locate , 55: Print Using "### #"; SX%(21, 1, tickInterval)
            End If

            If Left$(SX$(22, 0), 3) <> "XXX" Then
                Locate 17, 41
                X = 22
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(22, 0), 13);
                Locate , 55: Print Using "### "; SX%(22, 0, tickInterval);

                Print R$(tickInterval)
                Locate , 41

                Print Left$(SX$(22, 1), 13);
                Locate , 55: Print Using "### #"; SX%(22, 1, tickInterval)
            End If

            If Left$(SX$(23, 0), 3) <> "XXX" Then
                Locate 20, 41
                X = 23
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(23, 0), 13);
                Locate , 55: Print Using "### "; SX%(23, 0, tickInterval);

                Print R$(tickInterval)
                Locate , 41

                Print Left$(SX$(23, 1), 13);
                Locate , 55: Print Using "### #"; SX%(23, 1, tickInterval)
            End If

            If Left$(SX$(24, 0), 3) <> "XXX" Then
                Locate 23, 41
                X = 24
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(24, 0), 13);
                Locate , 55: Print Using "### "; SX%(24, 0, tickInterval);

                Print R$(tickInterval)
                Locate , 41

                Print Left$(SX$(24, 1), 13);
                Locate , 55: Print Using "### #"; SX%(24, 1, tickInterval);
            End If

            If Left$(SX$(25, 0), 3) <> "XXX" Then
                Locate 2, 61
                X = 25
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(25, 0), 13);
                Locate , 75: Print Using "### "; SX%(25, 0, tickInterval);

                Print R$(tickInterval)
                Locate , 61

                Print Left$(SX$(25, 1), 13);
                Locate , 75: Print Using "### #"; SX%(25, 1, tickInterval)
            End If

            If Left$(SX$(26, 0), 3) <> "XXX" Then
                Locate 5, 61
                X = 26
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(26, 0), 13);
                Locate , 75: Print Using "### "; SX%(26, 0, tickInterval);

                Print R$(tickInterval)
                Locate , 61

                Print Left$(SX$(26, 1), 13);
                Locate , 75: Print Using "### #"; SX%(26, 1, tickInterval)
            End If

            If Left$(SX$(27, 0), 3) <> "XXX" Then
                Locate 8, 61
                X = 27
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(27, 0), 13);
                Locate , 75: Print Using "### "; SX%(27, 0, tickInterval);

                Print R$(tickInterval)
                Locate , 61

                Print Left$(SX$(27, 1), 13);
                Locate , 75: Print Using "### #"; SX%(27, 1, tickInterval)
            End If

            If Left$(SX$(28, 0), 3) <> "XXX" Then
                Locate 11, 61
                X = 28
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(28, 0), 13);
                Locate , 75: Print Using "### "; SX%(28, 0, tickInterval);

                Print R$(tickInterval)
                Locate , 61

                Print Left$(SX$(28, 1), 13);
                Locate , 75: Print Using "### #"; SX%(28, 1, tickInterval)
            End If

            If Left$(SX$(29, 0), 3) <> "XXX" Then
                Locate 14, 61
                X = 29
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(29, 0), 13);
                Locate , 75: Print Using "### "; SX%(29, 0, tickInterval);

                Print R$(tickInterval)
                Locate , 61

                Print Left$(SX$(29, 1), 13);
                Locate , 75: Print Using "### #"; SX%(29, 1, tickInterval)
            End If

            If Left$(SX$(30, 0), 3) <> "XXX" Then
                Locate 17, 61
                X = 30
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(30, 0), 13);
                Locate , 75: Print Using "### "; SX%(30, 0, tickInterval);

                Print R$(tickInterval)
                Locate , 61

                Print Left$(SX$(30, 1), 13);
                Locate , 75: Print Using "### #"; SX%(30, 1, tickInterval)
            End If

            If Left$(SX$(31, 0), 3) <> "XXX" Then
                Locate 20, 61
                X = 31
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(31, 0), 13);
                Locate , 75: Print Using "### "; SX%(31, 0, tickInterval);

                Print R$(tickInterval)
                Locate , 61

                Print Left$(SX$(31, 1), 13);
                Locate , 75: Print Using "### #"; SX%(31, 1, tickInterval)
            End If

            If Left$(SX$(32, 0), 3) <> "XXX" Then
                Locate 23, 61
                X = 32
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(32, 0), 13);
                Locate , 75: Print Using "### "; SX%(32, 0, tickInterval);

                Print R$(tickInterval)
                Locate , 61

                Print Left$(SX$(32, 1), 13);
                Locate , 75: Print Using "### #"; SX%(32, 1, tickInterval);
            End If

        End If

        I$ = GetKeyPress$

    End If

End Sub


'----------------------------------------
'          TickerTime Function
'----------------------------------------
'This subroutine determines which of the
'pre-determined time intervals the ticker
'display should be using.
Function TickerTime% (timeInterval, X)

    Shared tickerStart

    tickerIdx = timeInterval + (tickerStart - ST%(X)) * 3

    If tickerIdx < 0 Then tickerIdx = 0
    If tickerIdx > 14 Then tickerIdx = 14
    If endGame = 1 Then tickerIdx = 14

    TickerTime% = tickerIdx

End Function


'----------------------------------------
'        TICKERUPDATE Subroutine
'----------------------------------------
'This subroutine calculates the updated
'scores for the ticker games.
Sub TICKERUPDATE ()

    If autoPlay = 1 And schedGame(2) <= 31 Then

        If H = 1 Then

            Select Case gameClock!

                Case 721 To 960
                    If SX%(schedGame(2) + 1, 0, 1) = -1 Then SX%(schedGame(2) + 1, 0, 1) = score(0, 0): SX%(schedGame(2) + 1, 1, 1) = score(1, 0)

                Case 481 To 720
                    If SX%(schedGame(2) + 1, 0, 2) = -1 Then SX%(schedGame(2) + 1, 0, 2) = score(0, 0): SX%(schedGame(2) + 1, 1, 2) = score(1, 0)

                Case 241 To 480
                    If SX%(schedGame(2) + 1, 0, 3) = -1 Then SX%(schedGame(2) + 1, 0, 3) = score(0, 1): SX%(schedGame(2) + 1, 1, 3) = score(1, 1)

                Case 121 To 240
                    If SX%(schedGame(2) + 1, 0, 4) = -1 Then SX%(schedGame(2) + 1, 0, 4) = score(0, 0): SX%(schedGame(2) + 1, 1, 4) = score(1, 0)

                Case 0 To 120
                    If SX%(schedGame(2) + 1, 0, 5) = -1 Then SX%(schedGame(2) + 1, 0, 5) = score(0, 0): SX%(schedGame(2) + 1, 1, 5) = score(1, 0)

            End Select

        Else

            If H > 1 And SX%(schedGame(2) + 1, 0, 6) = -1 Then

                For I2 = 6 To 8:
                    SX%(schedGame(2) + 1, 0, I2) = score(0, 2) + score(0, 1)
                    SX%(schedGame(2) + 1, 1, I2) = score(1, 2) + score(1, 1)
                Next

            Else

                If H = 2 Then

                    Select Case gameClock!

                        Case 721 To 960
                            If SX%(schedGame(2) + 1, 0, 9) = -1 Then SX%(schedGame(2) + 1, 0, 9) = score(0, 0): SX%(schedGame(2) + 1, 1, 9) = score(1, 0)

                        Case 481 To 720
                            If SX%(schedGame(2) + 1, 0, 10) = -1 Then SX%(schedGame(2) + 1, 0, 10) = score(0, 0): SX%(schedGame(2) + 1, 1, 10) = score(1, 0)

                        Case 241 To 480
                            If SX%(schedGame(2) + 1, 0, 11) = -1 Then SX%(schedGame(2) + 1, 0, 11) = score(0, 3) + score(0, 2) + score(0, 1): SX%(schedGame(2) + 1, 1, 11) = score(1, 3) + score(1, 2) + score(1, 1)

                        Case 121 To 240
                            If SX%(schedGame(2) + 1, 0, 12) = -1 Then SX%(schedGame(2) + 1, 0, 12) = score(0, 0): SX%(schedGame(2) + 1, 1, 12) = score(1, 0)

                        Case 0 To 120
                            If SX%(schedGame(2) + 1, 0, 13) = -1 Then SX%(schedGame(2) + 1, 0, 13) = score(0, 0): SX%(schedGame(2) + 1, 1, 13) = score(1, 0)

                    End Select

                Else

                    'Overtime
                    SX%(schedGame(2) + 1, 0, 14) = score(0, 0)
                    SX%(schedGame(2) + 1, 1, 14) = score(1, 0)

                End If

            End If

        End If

    End If

End Sub


'----------------------------------------
'       TickerSchedule Subroutine
'----------------------------------------
'This subroutine reads in the scores from
'the ticker and uses them to update the
'corresponding schedule file.
Sub TickerSchedule

    Shared scheduleFile$

    If schedGame(2) <= 31 Then

        For X = 0 To 1
            SX$(schedGame(2) + 1, X) = gameTeams$(X)
        Next

        Open "TICKER" For Output As #1

        For I = 1 To 32
            For I1 = 0 To 1
                For I2 = 1 To 14
                    Print #1, SX%(I, I1, I2)
                Next
            Next
        Next

        For I = 1 To 32
            For I1 = 0 To 1
                Print #1, SX$(I, I1)
            Next
        Next

        For I = 1 To 32
            Print #1, ST%(I)
        Next

        Close #1

    End If

    Open diskPaths$(0) + scheduleFile$ For Random As #1 Len = 48

    For X = 0 To 18
        Field #1, X * 2 As X$, 2 As Q$(X + 1), 48 - 2 - 2 * X As X$
    Next

    Field #1, 38 As X$, 2 As Q$(22), 2 As Q$(23), 3 As Q$(20), 3 As Q$(21)

    NG%(13) = 1

    For X = 0 To 18:
        LSet Q$(X + 1) = MKI$(NG%(X))
    Next

    For X = 0 To 1
        LSet Q$(20 + X) = YN$(X)
    Next

    LSet Q$(22) = MKI$(score(0, 0))
    LSet Q$(23) = MKI$(score(1, 0))

    Put #1, schedGame(0) + schedGame(2)

    Close #1

    schedGame(2) = schedGame(2) + 1
    autoPlay = 1

End Sub


'----------------------------------------
'          HalfCourt Subroutine
'----------------------------------------
'This subroutine gives the user options
'for handling a strategy at half court
'when time is low on the clock.
'I2% = user choice for shot
Sub HalfCourt ()

    Call FRAMEOPTION(8, P)
    Locate 10, 15

    Print gameTeams$(P); " HALF COURT OPTION"

    Locate 12, 14
    Locate , 14: Print Using "TIME REMAINING #.#"; T!
    Locate , 14: Print "0 - SHOOT A 2"
    Locate , 14: Print "1 - SHOOT A 3"

    Do
        I$ = GetKeyPress$
        I2% = Val(I$)
    Loop Until I2% >= 0 And I2% <= 1

    If I2% = 1 And threePtOpt = 0 Then I2% = 0

    Color 15, 0

    Call SCOREBOARD

End Sub


'----------------------------------------
'           WHOLAY Subroutine
'----------------------------------------
'This subroutine assignes a player ID to
'the person performing a layup
Sub WHOLAY ()

    Call d100(RN)

    Select Case RN

        Case 1 To 38: B = 0
        Case 39 To 75: B = 1
        Case 76 To 83: B = 2
        Case 84 To 91: B = 3
        Case 92 To 100: B = 4

    End Select

End Sub


'----------------------------------------
'         FoulCalled Subroutine
'----------------------------------------
'This subroutione handles calculations and
'Play-by-Play fo when a player is fouled

'randomCalcs%
'   0 = skip random # generation
'   1 = perform random # generation

Sub FoulCalled (randomCalcs%)

    If randomCalcs% = 1 Then

        W5 = 0
        M9 = Int(Rnd(1) * F5%(D, 0)) + 1

        For M8 = 0 To 4:

            W5 = W5 + plyrOff_GAME!(D, B1(D, M8), 17)

            If M9 <= W5 Then Exit For

        Next M8

        If M8 < 0 Or M8 > 4 Then M8 = Int(Rnd(1) * 5)

        W5 = M8

    End If

    plyrOff_GAME!(D, B1(D, W5), 12) = plyrOff_GAME!(D, B1(D, W5), 12) + 1
    P2(D) = P2(D) + 1
    Call UPDATESCREEN

    If plyrOff_GAME!(D, B1(D, W5), 3) - plyrOff_GAME!(D, B1(D, W5), 7) - plyrOff_GAME!(D, B1(D, W5), 11) - plyrOff_GAME!(D, B1(D, W5), 12) = 0 Then plyrOff_GAME!(D, B1(D, W5), 3) = plyrOff_GAME!(D, B1(D, W5), 3) + 1

    If plyrOff_GAME!(D, B1(D, W5), 12) < foulsToDQ Then

        If pbpOpt = 1 And pbpDelay! <> 0 Then
            Call WINDEX
            Print "FOUL ON "; players$(D, B1(D, W5))
            Call DELAY
            Print "HE HAS "; plyrOff_GAME!(D, B1(D, W5), 12)
            Call DELAY
        End If

        If pbpOpt = 0 Then U$ = "FOUL NUMBER" + Str$(plyrOff_GAME!(D, B1(D, W5), 12)) + " CALLED ON " + players$(D, B1(D, W5)): Call PBP

        Call DELAY

    Else

        M9 = 0

        For I3 = 0 To 13
            If Not (I3 = B1(D, W5) Or players$(D, I3) = "XXX" Or B%(D, I3) <> 0) Then
                M9 = M9 + 1
            End If
        Next

        For I3 = 0 To 13
            If Not (I3 = B1(D, W5) Or players$(D, I3) = "XXX" Or B%(D, I3) <> 0) Then
                If plyrOff_GAME!(D, I3, 0) <= plyrOff_GAME!(D, B1(D, W5), 0) Then plyrOff_GAME!(D, I3, 3) = plyrOff_GAME!(D, I3, 3) + Int((plyrOff_GAME!(D, B1(D, W5), 3) / M9) + .5)
            End If
        Next I3

        'Player fouled
        635 '
        If pbpOpt = 1 And pbpDelay! <> 0 Then
            Call WINDEX
            Print "FOUL ON "; players$(D, B1(D, W5))
            Call DELAY
        End If

        If pbpOpt = 0 Then U$ = "FOUL CALLED ON " + players$(D, B1(D, W5)): Call PBP

        If IN% = 1 Then
            U$ = "FOUL IS RULED INTENTIONAL!"
            If pbpOpt = 0 Then Call PBP
            If pbpOpt = 1 And pbpDelay! <> 0 Then Print U$: Call DELAY
            Call DELAY
        End If

        U$ = "AND HE HAS JUST FOULED OUT !!!"
        If pbpOpt = 0 Then Call PBP
        If pbpOpt = 1 And pbpDelay! <> 0 Then Print U$: Call DELAY

        Call DELAY

        If P2(D) > 6 Then X = 50

        If playerMode = 0 Or playerMode = 1 And D <> compTeam Then
            P9 = D
            C1 = 1
            Call LINEUPS
            Call FOULSAFE
            Call DEADBALLOPTIONS
            For I = 0 To 1
                If P7(I) = 0 Then PR%(I, 0) = 1: PR%(I, 1) = 7: PC%(I) = 0
            Next
            Call SCOREBOARD
        End If

        Call CheckGameClock
        X = 0

    End If

End Sub


'----------------------------------------
'         GoodBasket Subroutine
'----------------------------------------
'This subroutine appears perform calcu-
'lations on W5 depending on the value of
'some random numbers.
'I don't know what it's doing exactly,
'but it only gets called after a good basket.
'It doesn't look like it's adjusting the
'score though
Sub GoodBasket ()

    RN0 = Int(Rnd(1) * 3) + 1
    I2 = Int(Rnd(1) * 5)

    If (RN0 <= plyrOff_GAME!(P, B1(P, I2), 4) And players$(P, B1(P, B)) <> players$(P, B1(P, I2))) Or (plyrOff_GAME!(P, B1(P, I2), 4) > 3 And RN0 < plyrOff_GAME!(P, B1(P, I2), 4) - 3 And players$(P, B1(P, B)) <> players$(P, B1(P, I2))) Then

        Do
            W5 = 0

            For M8 = 0 To 4
                W5 = W5 + plyrOff_GAME!(P, B1(P, M8), 4)
            Next

            RN0 = Int(Rnd(1) * W5) + 1
            W5 = 0

            For M8 = 0 To 4
                W5 = W5 + plyrOff_GAME!(P, B1(P, M8), 4)
                If RN0 <= W5 Then Exit For
            Next

            I2 = M8
        Loop Until players$(P, B1(P, B)) <> players$(P, B1(P, I2))

        plyrOff_GAME!(P, B1(P, I2), 14) = plyrOff_GAME!(P, B1(P, I2), 14) + 1

    End If

End Sub


'----------------------------------------
'            HORN Subroutine
'----------------------------------------
'This subroutine plays a sound on the PC
'speaker that is close to the buzzer / horn
'commonly associated with basketball.

'A replacement for the near future would be
'to load and play a sound file
Sub HORN ()

    For PP = 1 To 70
        Sound 50, .05
        Sound 100, .05
        Sound 317, .3
    Next PP

End Sub


'----------------------------------------
'         SHOTSTRING Subroutine
'----------------------------------------
'This subroutine simply builds a string
'which represents the % chance of making
'the current shot (rounding up)
Sub SHOTSTRING ()
    U$ = U$ + Str$(Int(F! + .5)) + "*"
End Sub


'----------------------------------------
'         REBOUNDSORT Subroutine
'----------------------------------------
'This subroutine clearly does something
'related to sorting players by rebound?
Sub REBOUNDSORT ()

    M = 4
    L = 3

    8827 '
    S6 = 0
    S7 = 0

    8828 '
    H1 = 0
    H2 = 0

    If G5(S6) > G5(S6 + 1) Then
        H1 = G5(S6)
        H2 = G4(S6)
        G5(S6) = G5(S6 + 1)
        G4(S6) = G4(S6 + 1)
        G5(S6 + 1) = H1
        G4(S6 + 1) = H2
        S7 = S6
    End If

    S6 = S6 + 1

    If S6 <= L Then
        GoTo 8828
    End If

    If S7 <> 0 Then
        L = S7 - 1
        GoTo 8827
    End If

End Sub


'----------------------------------------
'          COMCOACH Subroutine
'----------------------------------------
'This subroutine essentially handles the
'AI for the computer coach. It relies on
'other routines to help deal with some of
'the complexities.
Sub COMCOACH ()

    'COMPUTER COACH FOR SUBSTITUTIONS AND AI

    For I = 0 To 13
        F1(I) = I
        plyrStamina(I) = plyrOff_GAME!(P9, I, 3) - plyrOff_GAME!(P9, I, 7) - plyrOff_GAME!(P9, I, 11) - plyrOff_GAME!(P9, I, 12)
        If H > 2 Then plyrStamina(I) = plyrOff_GAME!(P9, I, 3)
        If H = 2 And gameClock! <= 120 Then plyrStamina(I) = plyrOff_GAME!(P9, I, 3)
        If plyrOff_GAME!(P9, I, 12) >= foulsToDQ Then plyrStamina(I) = 0
    Next I

    Call STAMINASORT

    skipLoop% = 0

    I = 14

    For I1 = 0 To 4

        8794 '
        I = I - 1

        If I < 0 Then

            I = 14

            For I1 = 0 To 4

                8705 '
                I = I - 1

                If I < 0 Then

                    I = 14

                    For I1 = 0 To 4

                        Do
                            I = I - 1
                        Loop Until Not (B%(P9, F1(I)) <> 0 Or players$(P9, F1(I)) = "XXX")

                        'Call pbplog(3628)
                        G4(I1) = F1(I)
                        G5(I1) = plyrOff_GAME!(P9, F1(I), 2)
                        'Call pbplog(3632)

                    Next I1

                    skipLoop% = 1

                Else

                    If Not (B%(P9, F1(I)) <> 0 Or players$(P9, F1(I)) = "XXX" Or plyrOff_GAME!(P9, F1(I), 12) >= foulsToDQ Or plyrOff_GAME!(P9, F1(I), 12) >= foulsToDQ - 1 And (H = 1 Or H = 2 And gameClock! > 720)) Then
                        'Call pbplog(3641)
                        G4(I1) = F1(I)
                        G5(I1) = plyrOff_GAME!(P9, F1(I), 2)
                        'Call pbplog(3644)
                    Else
                        GoTo 8705
                    End If

                End If

                If skipLoop% = 1 Then Exit For

            Next I1

            If skipLoop% = 1 Then Exit For

        Else

            If B%(P9, F1(I)) <> 0 Or players$(P9, F1(I)) = "XXX" Or plyrOff_GAME!(P9, F1(I), 12) >= foulsToDQ Or plyrOff_GAME!(P9, F1(I), 12) >= foulsToDQ - 2 And H = 1 Or plyrOff_GAME!(P9, F1(I), 12) >= foulsToDQ - 1 And H = 2 And gameClock! > 720 Then 8794

            If H = 1 And plyrStamina(I) / plyrOff_GAME!(P9, F1(I), 3) < .5 Then 8794
            If H = 1 And gameClock! >= 600 And plyrStamina(I) / plyrOff_GAME!(P9, F1(I), 3) < .75 Then 8794
            If H = 2 And gameClock! >= 600 And plyrStamina(I) / plyrOff_GAME!(P9, F1(I), 3) < .25 Then 8794
            If H = 2 And gameClock! >= 300 And gameClock! < 600 And plyrStamina(I) / plyrOff_GAME!(P9, F1(I), 3) < .13 Then 8794
            If H = 2 And gameClock! < 300 And plyrStamina(I) / plyrOff_GAME!(P9, F1(I), 3) < gameClock! / 2400 Then 8794
            If plyrStamina(I) <= 0 And H < 2 Or plyrStamina(I) <= 0 And H = 2 And gameClock! > 120 Then 8794

            G4(I1) = F1(I)
            G5(I1) = plyrOff_GAME!(P9, F1(I), 2)

        End If

    Next I1

    Call REBOUNDSORT

    'Call pbplog(3683)
    For I = 0 To 4
        B1(P9, I) = G4(I)
    Next I
    'Call pbplog(3687)

    Call COMPUTERCOACH

End Sub


'----------------------------------------
'        TOURNEY_Game Subroutine
'----------------------------------------
'This subroutine checks the file for the
'tournament and, as needed, calls a routine
'to update it with the game scores
Sub TOURNEY_Game ()

    Dim fileLength&

    'CHECK FOR FILLING IN TOURNEY SCHEDULE
    Open diskPaths$(1) + tourneyFile$ + ".TOU" As #1 Len = 90
    fileLength& = LOF(1)
    Close #1

    NTMS = fileLength& / 90

    For I = 1 To NTMS

        Open diskPaths$(1) + tourneyFile$ + ".TOU" As #1 Len = 90

        For X = 0 To 14
            Field #1, X * 2 As X$, 2 As Q$(X + 1), 90 - 2 - 2 * X As X$
        Next

        Field #1, 30 As X$, 2 As Q$(16), 2 As Q$(17), 15 As Q$(18), 15 As Q$(19), 26 As X$
        Field #1, 64 As X$, 3 As Q$(20), 3 As Q$(21), 6 As Q$(22), 8 As Q$(23), 6 As X$
        Field #1, 84 As X$, 2 As Q$(24), 2 As Q$(25), 2 As Q$(26)
        Get #1, I

        VS1% = CVI(Q$(16))
        HS1% = CVI(Q$(17))
        VT1$ = Q$(18)
        W1$ = Q$(19)

        For X = 0 To 14: NG1%(X) = CVI(Q$(X + 1)): Next
        For X = 0 To 3: YN1$(X) = Q$(20 + X): Next
        For X = 1 To 3: NG1%(X + 14) = CVI(Q$(X + 23)): Next

        Close #1

        If NG1%(15) = NG%(15) And NG%(15) <> 17 Then

            If score(0, 0) > score(1, 0) And NG1%(0) - 900 = NG%(17) Then NG1%(0) = NG%(0): YN1$(0) = YN$(0): VT1$ = VT$: Call UpdateTourneyFile
            If score(1, 0) > score(0, 0) And NG1%(0) - 900 = NG%(17) Then NG1%(0) = NG%(1): YN1$(0) = YN$(1): VT1$ = W$: Call UpdateTourneyFile
            If score(0, 0) > score(1, 0) And NG1%(1) - 900 = NG%(17) Then NG1%(1) = NG%(0): YN1$(1) = YN$(0): W1$ = VT$: Call UpdateTourneyFile
            If score(1, 0) > score(0, 0) And NG1%(1) - 900 = NG%(17) Then NG1%(1) = NG%(1): YN1$(1) = YN$(1): W1$ = W$: Call UpdateTourneyFile
            If score(0, 0) < score(1, 0) And NG1%(0) - 800 = NG%(17) Then NG1%(0) = NG%(0): YN1$(0) = YN$(0): VT1$ = VT$: Call UpdateTourneyFile
            If score(1, 0) < score(0, 0) And NG1%(0) - 800 = NG%(17) Then NG1%(0) = NG%(1): YN1$(0) = YN$(1): VT1$ = W$: Call UpdateTourneyFile
            If score(0, 0) < score(1, 0) And NG1%(1) - 800 = NG%(17) Then NG1%(1) = NG%(0): YN1$(1) = YN$(0): W1$ = VT$: Call UpdateTourneyFile
            If score(1, 0) < score(0, 0) And NG1%(1) - 800 = NG%(17) Then NG1%(1) = NG%(1): YN1$(1) = YN$(1): W1$ = W$: Call UpdateTourneyFile

        End If

        If NG%(15) <> 17 Then
            If score(0, 0) > score(1, 0) And NG%(16) = 89 And NG1%(15) = 17 And NG1%(0) - 900 = NG%(15) Then NG1%(0) = NG%(0): YN1$(0) = YN$(0): VT1$ = VT$: Call UpdateTourneyFile
            If score(1, 0) > score(0, 0) And NG%(16) = 89 And NG1%(15) = 17 And NG1%(0) - 900 = NG%(15) Then NG1%(0) = NG%(1): YN1$(0) = YN$(1): VT1$ = W$: Call UpdateTourneyFile
            If score(0, 0) > score(1, 0) And NG%(16) = 89 And NG1%(15) = 17 And NG1%(1) - 900 = NG%(15) Then NG1%(1) = NG%(0): YN1$(1) = YN$(0): W1$ = VT$: Call UpdateTourneyFile
            If score(1, 0) > score(0, 0) And NG%(16) = 89 And NG1%(15) = 17 And NG1%(1) - 900 = NG%(15) Then NG1%(1) = NG%(1): YN1$(1) = YN$(1): W1$ = W$: Call UpdateTourneyFile
        End If

        If score(0, 0) > score(1, 0) And NG%(15) = 17 And NG1%(0) - 1100 = NG%(17) Then NG1%(0) = NG%(0): YN1$(0) = YN$(0): VT1$ = VT$: Call UpdateTourneyFile
        If score(1, 0) > score(0, 0) And NG%(15) = 17 And NG1%(0) - 1100 = NG%(17) Then NG1%(0) = NG%(1): YN1$(0) = YN$(1): VT1$ = W$: Call UpdateTourneyFile
        If score(0, 0) > score(1, 0) And NG%(15) = 17 And NG1%(1) - 1100 = NG%(17) Then NG1%(1) = NG%(0): YN1$(1) = YN$(0): W1$ = VT$: Call UpdateTourneyFile
        If score(1, 0) > score(0, 0) And NG%(15) = 17 And NG1%(1) - 1100 = NG%(17) Then NG1%(1) = NG%(1): YN1$(1) = YN$(1): W1$ = W$: Call UpdateTourneyFile
        If score(0, 0) < score(1, 0) And NG%(15) = 17 And NG1%(0) - 1000 = NG%(17) Then NG1%(0) = NG%(0): YN1$(0) = YN$(0): VT1$ = VT$: Call UpdateTourneyFile
        If score(1, 0) < score(0, 0) And NG%(15) = 17 And NG1%(0) - 1000 = NG%(17) Then NG1%(0) = NG%(1): YN1$(0) = YN$(1): VT1$ = W$: Call UpdateTourneyFile
        If score(0, 0) < score(1, 0) And NG%(15) = 17 And NG1%(1) - 1000 = NG%(17) Then NG1%(1) = NG%(0): YN1$(1) = YN$(0): W1$ = VT$: Call UpdateTourneyFile
        If score(1, 0) < score(0, 0) And NG%(15) = 17 And NG1%(1) - 1000 = NG%(17) Then NG1%(1) = NG%(1): YN1$(1) = YN$(1): W1$ = W$: Call UpdateTourneyFile
        If score(0, 0) < score(1, 0) And NG%(15) = 17 And NG1%(0) - 900 = NG%(17) Then NG1%(0) = NG%(0): YN1$(0) = YN$(0): VT1$ = VT$: Call UpdateTourneyFile
        If score(1, 0) < score(0, 0) And NG%(15) = 17 And NG1%(0) - 900 = NG%(17) Then NG1%(0) = NG%(1): YN1$(0) = YN$(1): VT1$ = W$: Call UpdateTourneyFile
        If score(0, 0) < score(1, 0) And NG%(15) = 17 And NG1%(1) - 900 = NG%(17) Then NG1%(1) = NG%(0): YN1$(1) = YN$(0): W1$ = VT$: Call UpdateTourneyFile
        If score(1, 0) < score(0, 0) And NG%(15) = 17 And NG1%(1) - 900 = NG%(17) Then NG1%(1) = NG%(1): YN1$(1) = YN$(1): W1$ = W$: Call UpdateTourneyFile
    Next

End Sub


'----------------------------------------
'      UpdateTourneyFile Subroutine
'----------------------------------------
'This subroutine actually changes any data
'associated with the tournament file.
Sub UpdateTourneyFile ()

    Open diskPaths$(1) + tourneyFile$ + ".TOU" As #1 Len = 90

    For X = 0 To 14
        Field #1, X * 2 As X$, 2 As Q$(X + 1), 90 - 2 - 2 * X As X$
    Next

    Field #1, 30 As X$, 2 As Q$(16), 2 As Q$(17), 15 As Q$(18), 15 As Q$(19), 26 As X$
    Field #1, 64 As X$, 3 As Q$(20), 3 As Q$(21), 6 As Q$(22), 8 As Q$(23), 6 As X$
    Field #1, 84 As X$, 2 As Q$(24), 2 As Q$(25), 2 As Q$(26)

    For X = 0 To 14:
        LSet Q$(X + 1) = MKI$(NG1%(X))
    Next

    For X = 0 To 3:
        LSet Q$(20 + X) = YN1$(X)
    Next

    For X = 1 To 3:
        LSet Q$(X + 23) = MKI$(NG1%(X + 14))
    Next

    LSet Q$(16) = MKI$(score(0, 0))
    LSet Q$(17) = MKI$(score(1, 0))
    LSet Q$(18) = VT1$
    LSet Q$(19) = W1$

    Put #1, I

    Close #1

End Sub

'----------------------------------------
'         UPDATESCREEN Subroutine
'----------------------------------------
'This subroutine refreshes all the values
'for the main screen, including the
'scoreboard, team options and rosters.
'The frame will have already been drawn
'by the SCOREBOARD routine.
Sub UPDATESCREEN ()

    Call TICKERUPDATE

    'Team 1
    Locate 2, 1
    Locate , 9
    Color teamRat_GAME(0, 0), teamRat_GAME(0, 1): Print gameTeams$(0);

    'Game Clock - Minutes
    Locate 1, 37
    Color 15, 0: Print Using "##"; Int(gameClock! / 60);: Print ":";

    'Game Clock - Seconds
    If gameClock! <= 5 Then
        'print 1/10th of a sec for last 5 seconds
        Print "0";: Print Using "#.#"; gameClock! - Int(gameClock! / 60) * 60;
    Else
        If gameClock! - Int(gameClock! / 60) * 60 < 10 Then
            Print "0";: Print Using "#"; gameClock! - Int(gameClock! / 60) * 60;
        Else
            Print Using "##"; gameClock! - Int(gameClock! / 60) * 60;
        End If

    End If

    'Team 2
    Locate 2, 56
    Color teamRat_GAME(1, 0), teamRat_GAME(1, 1): Print gameTeams$(1)
    Color 14, 0

    'Score Team 1
    Locate 4, 13: Print Using "###"; score(0, 0);
    Locate 2, 33: Print " ";
    If PA% = 0 Then Locate , 33: Print Chr$(17);

    'Period Designation
    Locate 2, 35: Print Using "  HALF #"; H;: Locate , 44: Print " ";
    If PA% = 1 Then Locate , 44: Print Chr$(16);

    'Overtime
    If H > 2 Then
        Locate , 35: Print Using "OVERTIME #"; H - 2;
        Locate , 46: Print " ";
        If PA% = 1 Then Locate , 46: Print Chr$(16)
    End If

    'Score Team 2
    Color 14, 0
    Locate 4, 60: Print Using "###"; score(1, 0)

    'TO / RB / TF
    Color 7
    Locate 3, 35: Print Using "##  "; turnovers(0);
    Color 12: Print "TO  ";
    Color 7: Print Using "##"; turnovers(1)

    Locate , 35: Print Using "##  "; R3!(0);
    Color 12: Print "RB  ";
    Color 7: Print Using "##"; R3!(1)

    Locate , 35: Print Using "##  "; P2(0);
    Color 12: Print "TF  ";
    Color 7: Print Using "##"; P2(1);

    'Bonus
    If P2(0) > 5 Then
        Color 0, 2
        Locate , 46: Print "BONUS";
        Color 7, 0
    End If

    If P2(1) > 5 Then
        Color 0, 2
        Locate , 29: Print "BONUS"
        Color 7, 0
    End If

    'Timeouts
    Locate 6, 9: Print "TIMEOUTS:"; timeouts(0);
    Locate , 56: Print "TIMEOUTS:"; timeouts(1)

    Color 14, 0

    'Shot Clock
    Locate 6, 37: Print Using " :##"; shotClock

    'If no shot clock, or shot clock expired
    If sClockVal = 0 Or gameClock! < 45 And shotClock >= gameClock! And sClockVal = 1 Or gameClock! < 35 And shotClock >= gameClock! And sClockVal = 2 Or (sClockVal = 1 Or sClockVal = 2) And H > 2 And gameClock! = 300 Then
        Locate 6, 37: Print " :  "
    End If

    'Team strategies / decisions
    If pbpDelay! <> 0 Then

        'Team Play Styles
        Locate 9, 41
        Color teamRat_GAME(D, 0), teamRat_GAME(D, 1): Print "DEF-"; DgameTeams$(DT%(D))
        Locate , 41
        Color teamRat_GAME(P, 0), teamRat_GAME(P, 1): Print "OFF-"; OgameTeams$(OF%(P))

        Color 15, 0
        Locate 11, 41
        Color 14: Print "ENTER ";: Color 15: Print "PASS"
        Locate , 41
        Color 14: Print "(1)  ";: Color 15: Print "SHOOT"
        Locate , 41
        Color 14: Print "(2)  ";: Color 15: Print gameTeams$(P); " CALL TIMEOUT     "
        Locate , 41
        Color 14: Print "(T)  ";: Color 15: Print "10 MIN TICKER"
        Locate , 41
        Color 14: Print "(D)  ";: Color 15: Print "CHANGE DEFENSE FROM 2-3 ZONE"
        Color 15, 0

        Locate 19, 1

        'Roster for team 1
        For I1 = 0 To 4:

            Color 2, 0
            Print Using "# "; I1;

            Color 15
            Print Left$(players$(0, B1(0, I1)), 12); Tab(15);

            If plyrOff_GAME!(0, B1(0, I1), 19) >= 7 Then Print "*";
            Print ; Tab(16);
            J = (plyrOff_GAME!(0, B1(0, I1), 3)) - plyrOff_GAME!(0, B1(0, I1), 7) - plyrOff_GAME!(0, B1(0, I1), 11) - plyrOff_GAME!(0, B1(0, I1), 12): If J <= 0 Then J = 0

            Print Using "## ## "; plyrOff_GAME!(0, B1(0, I1), 0), plyrOff_GAME!(0, B1(0, I1), 1);
            If P = 0 Then Print Using "##"; plyrOff_GAME!(0, B1(0, I1), 21) * 2 / 10; Else Print Using "##"; plyrOff_GAME!(0, B1(0, I1), 2) * 2 / 10;
            If J <= 0 And (H = 1 Or H = 2 And gameClock! > 120) Then Color 12

            Print Using "### "; J;

            Color 15
            If tmFatigue(0, B1(0, I1)) * -1 >= 5 And (H = 1 Or H = 2 And gameClock! > 120) Then Color 12
            Print Using "## "; tmFatigue(0, B1(0, I1)) * -1;

            Color 15
            Print Using "##"; plyrOff_GAME!(0, B1(0, I1), 4);
            Print Using "###  "; plyrOff_GAME!(0, B1(0, I1), 8) * 2 + plyrOff_GAME!(0, B1(0, I1), 10) + threeFG(0, B1(0, I1), 0);
            If plyrOff_GAME!(0, B1(0, I1), 12) >= 4 Then Color 12

            Print Using "#"; plyrOff_GAME!(0, B1(0, I1), 12)
            Color 15

        Next I1

        Locate 19, 40

        'Roster for team 2
        For I1 = 0 To 4:

            Color 2, 0
            Locate , 40: Print Using "# "; I1;
            Color 15: Print Left$(players$(1, B1(1, I1)), 12); Tab(55);

            If plyrOff_GAME!(1, B1(1, I1), 19) >= 7 Then Print "*";

            Print ; Tab(56);

            J = (plyrOff_GAME!(1, B1(1, I1), 3)) - plyrOff_GAME!(1, B1(1, I1), 7) - plyrOff_GAME!(1, B1(1, I1), 11) - plyrOff_GAME!(1, B1(1, I1), 12)
            If J <= 0 Then J = 0

            Print Using "## ## "; plyrOff_GAME!(1, B1(1, I1), 0), plyrOff_GAME!(1, B1(1, I1), 1);

            If P = 1 Then Print Using "##"; plyrOff_GAME!(1, B1(1, I1), 21) * 2 / 10; Else Print Using "##"; plyrOff_GAME!(1, B1(1, I1), 2) * 2 / 10;

            If J <= 0 And (H = 1 Or H = 2 And gameClock! > 120) Then Color 12
            Print Using "### "; J;

            Color 15
            If tmFatigue(1, B1(1, I1)) * -1 >= 5 And (H = 1 Or H = 2 And gameClock! > 120) Then Color 12
            Print Using "## "; tmFatigue(1, B1(1, I1)) * -1;

            Color 15
            Print Using "##"; plyrOff_GAME!(1, B1(1, I1), 4);
            Print Using "###  "; plyrOff_GAME!(1, B1(1, I1), 8) * 2 + plyrOff_GAME!(1, B1(1, I1), 10) + threeFG(1, B1(1, I1), 0);

            If plyrOff_GAME!(1, B1(1, I1), 12) >= 4 Then Color 12
            Print Using "#"; plyrOff_GAME!(1, B1(1, I1), 12)

            Color 15

        Next I1

    End If

End Sub


'----------------------------------------
'         SCOREBOARD Subroutine
'----------------------------------------
'This subroutine draws up the main screen
'for the game interface, including a frame,
'scoreboard, team options and rosters
Sub SCOREBOARD ()

    Cls

    Call TICKERUPDATE

    'Frames
    Color 9, 0

    Locate 3, 11: Print Chr$(218); String$(5, 196); Chr$(191)
    Locate , 11: Print Chr$(179);: Locate , 17: Print Chr$(179)
    Locate , 11: Print Chr$(192); String$(5, 196); Chr$(217)

    Locate 3, 58: Print Chr$(218); String$(5, 196); Chr$(191)
    Locate , 58: Print Chr$(179);: Locate , 64: Print Chr$(179)
    Locate , 58: Print Chr$(192); String$(5, 196); Chr$(217)

    'Team 1
    Locate 2, 1
    Locate , 9
    Color teamRat_GAME(0, 0), teamRat_GAME(0, 1): Print gameTeams$(0);

    'Game Clock - Minutes
    Color 15, 0
    Locate 1, 37: Print Using "##"; Int(gameClock! / 60);: Print ":";

    'Game Clock - Seconds
    If gameClock! - Int(gameClock! / 60) * 60 < 10 Then
        Print "0";: Print Using "#"; gameClock! - Int(gameClock! / 60) * 60;
    Else
        Print Using "##"; gameClock! - Int(gameClock! / 60) * 60;
    End If

    'Team 2
    Locate 2, 56
    Color teamRat_GAME(1, 0), teamRat_GAME(1, 1): Print gameTeams$(1)

    'Score Team 1
    Color 14, 0
    Locate 4, 13: Print Using "###"; score(0, 0);

    'Period Designation
    Locate 2, 35
    If H > 2 Then
        Print Using "OVERTIME #"; H - 2
    Else
        Print Using "  HALF #"; H;
    End If

    'Score Team 2
    Color 14, 0
    Locate 4, 60: Print Using "###"; score(1, 0)

    'TO / RB / TF
    Color 7
    Locate 3, 35: Print Using "##  "; turnovers(0);
    Color 12: Print "TO  ";
    Color 7: Print Using "##"; turnovers(1)

    Locate , 35: Print Using "##  "; R3!(0);
    Color 12: Print "RB  ";
    Color 7: Print Using "##"; R3!(1)

    Locate , 35: Print Using "##  "; P2(0);
    Color 12: Print "TF  ";
    Color 7: Print Using "##"; P2(1);

    'Bonus
    If P2(0) > 5 Then
        Color 0, 2
        Locate , 46: Print "BONUS";
        Color 7, 0
    End If

    If P2(1) > 5 Then
        Color 0, 2
        Locate , 29: Print "BONUS"
        Color 7, 0
    End If

    'Timeouts
    Locate 6, 9: Print "TIMEOUTS:"; timeouts(0);
    Locate , 56: Print "TIMEOUTS:"; timeouts(1)

    'Team strategies / decisions
    Locate 9, 41
    Color teamRat_GAME(D, 0), teamRat_GAME(D, 1): Print "DEF-"; DB$(DT%(D))
    Locate , 41
    Color teamRat_GAME(P, 0), teamRat_GAME(P, 1): Print "OFF-"; OB$(OF%(P))

    Color 15, 0
    Locate 11, 41: Color 14: Print "ENTER";: Color 14: Print "-PASS"
    Locate , 41: Color 14: Print "(1)  ";: Color 15: Print "SHOOT"
    Locate , 41: Color 14: Print "(2)  ";: Color 15: Print gameTeams$(P); " CALL TIMEOUT     "
    Locate , 41: Color 14: Print "(T)  ";: Color 15: Print "10 MIN TICKER"
    Locate , 41: Color 14: Print "(D)  ";: Color 15: Print "CHANGE DEFENSE FROM 2-3 ZONE"

    Color 9, 0
    Locate 7, 1
    Print String$(38, 205); Chr$(203); String$(38, 205)

    Locate 8, 1
    For I = 1 To 8
        Locate , 39
        Print Chr$(186)
    Next

    'Team 1 Overview
    Locate 17, 1
    Color teamRat_GAME(0, 0), teamRat_GAME(0, 1): Print gameTeams$(0);

    'Win/Loss record from current stats files
    Print Using " [##"; Z5(0);: Print "-";: Print Using "##]"; Z6(0)
    Color 14, 0: Print "# NAME         FG FT RB CX EF PA PT  F"

    'Team 1 Roster
    For I1 = 0 To 4

        Color 2: Print Using "# "; I1;
        Color 3
        Color 15: Print Left$(players$(0, B1(0, I1)), 12);: Locate , 15

        If plyrOff_GAME!(0, B1(0, I1), 19) >= 7 Then Print "*";

        Locate , 16

        J = (plyrOff_GAME!(0, B1(0, I1), 3)) - plyrOff_GAME!(0, B1(0, I1), 7) - plyrOff_GAME!(0, B1(0, I1), 11) - plyrOff_GAME!(0, B1(0, I1), 12): If J <= 0 Then J = 0

        Print Using "##"; plyrOff_GAME!(0, B1(0, I1), 0);
        Print Using "### "; plyrOff_GAME!(0, B1(0, I1), 1);

        If P = 0 Then Print Using "##"; plyrOff_GAME!(0, B1(0, I1), 21) * 2 / 10; Else Print Using "##"; plyrOff_GAME!(0, B1(0, I1), 2) * 2 / 10;
        If J <= 0 And (H = 1 Or H = 2 And gameClock! > 120) Then Color 12

        Print Using "### "; J;
        Color 15

        If tmFatigue(0, B1(0, I1)) * -1 >= 5 And (H = 1 Or H = 2 And gameClock! > 120) Then Color 12

        Print Using "## "; tmFatigue(0, B1(0, I1)) * -1;
        Color 15
        Print Using "##"; plyrOff_GAME!(0, B1(0, I1), 4);
        Print Using "###  "; plyrOff_GAME!(0, B1(0, I1), 8) * 2 + plyrOff_GAME!(0, B1(0, I1), 10) + threeFG(0, B1(0, I1), 0);

        If plyrOff_GAME!(0, B1(0, I1), 12) >= 4 Then Color 12

        Print Using "#"; plyrOff_GAME!(0, B1(0, I1), 12)
        Color 15

    Next I1

    'Team 2 Overview
    Locate 17, 40
    Color teamRat_GAME(1, 0), teamRat_GAME(1, 1): Print gameTeams$(1);

    'Win/Loss record from current stats files
    Print Using " [##"; Z5(1);: Print "-";: Print Using "##]"; Z6(1)

    Color 14, 0
    Locate , 40: Print "# NAME          FG FT RB CX EF PA PT  F"

    'Team 2 Roster
    For I1 = 0 To 4:

        Locate , 40
        Color 2: Print Using "# "; I1;
        Color 15: Print Left$(players$(1, B1(1, I1)), 12);: Locate , 55

        If plyrOff_GAME!(1, B1(1, I1), 19) >= 7 Then Print "*";

        Locate , 56

        J = (plyrOff_GAME!(1, B1(1, I1), 3)) - plyrOff_GAME!(1, B1(1, I1), 7) - plyrOff_GAME!(1, B1(1, I1), 11) - plyrOff_GAME!(1, B1(1, I1), 12): If J <= 0 Then J = 0

        Print Using "##"; plyrOff_GAME!(1, B1(1, I1), 0);
        Print Using "### "; plyrOff_GAME!(1, B1(1, I1), 1);

        If P = 1 Then Print Using "##"; plyrOff_GAME!(1, B1(1, I1), 21) * 2 / 10; Else Print Using "##"; plyrOff_GAME!(1, B1(1, I1), 2) * 2 / 10;
        If J <= 0 And (H = 1 Or H = 2 And gameClock! > 120) Then Color 12

        Print Using "### "; J;
        Color 15

        If tmFatigue(1, B1(1, I1)) * -1 >= 5 And (H = 1 Or H = 2 And gameClock! > 120) Then Color 12

        Print Using "## "; tmFatigue(1, B1(1, I1)) * -1;
        Color 15
        Print Using "##"; plyrOff_GAME!(1, B1(1, I1), 4);
        Print Using "###  "; plyrOff_GAME!(1, B1(1, I1), 8) * 2 + plyrOff_GAME!(1, B1(1, I1), 10) + threeFG(1, B1(1, I1), 0);

        If plyrOff_GAME!(1, B1(1, I1), 12) >= 4 Then Color 12

        Print Using "#"; plyrOff_GAME!(1, B1(1, I1), 12)
        Color 15

    Next I1

    Color 9, 0
    For I = 1 To 9:
        Locate 14 + I, 39: Print Chr$(186)
    Next

    'Color 9, 0
    Locate 16, 1: Print String$(79, 205)
    Locate 16, 39: Print Chr$(206)
    Color 7, 0

End Sub

'------------------------------
'    COLCNG Subroutine
'------------------------------
' ...explanation...
Sub COLCNG ()

    If teamRat_GAME(1, 0) = 15 And teamRat_GAME(1, 1) = 4 Then teamRat_GAME(1, 0) = 4: teamRat_GAME(1, 1) = 7
    If teamRat_GAME(1, 0) = 15 And teamRat_GAME(1, 1) = 1 Then teamRat_GAME(1, 0) = 1: teamRat_GAME(1, 1) = 7
    If teamRat_GAME(1, 0) = 0 And teamRat_GAME(1, 1) = 4 Then teamRat_GAME(1, 0) = 12: teamRat_GAME(1, 1) = 0
    If teamRat_GAME(1, 0) = 1 And teamRat_GAME(1, 1) = 7 Then teamRat_GAME(1, 0) = 15: teamRat_GAME(1, 1) = 1
    If teamRat_GAME(1, 0) = 4 And teamRat_GAME(1, 1) = 7 Then teamRat_GAME(1, 0) = 15: teamRat_GAME(1, 1) = 4

End Sub


'----------------------------------------
'       LOADSTATS Subroutine
'----------------------------------------
'This subroutine loads team schedule stats
'data into arrays for each team from their
'corresponding stat file.
Sub LOADSTATS ()

    Shared CRD&()

    If teamRat_GAME(1, 0) = teamRat_GAME(0, 0) And teamRat_GAME(1, 1) = teamRat_GAME(0, 1) Then Call COLCNG

    For I = 0 To 1

        Color 15, 0
        Cls

        statFile$ = nameStatFile$(gameTeams$(I))

        If _FileExists(diskPaths$(1) + statFile$ + "S") Then

            Open diskPaths$(1) + statFile$ + "S" For Input As #1

            Input #1, numberGames

            For I1 = 1 To NUM_STATRECORDS: Input #1, O%(I1): Next
            For I1 = 1 To NUM_STATRECORDS: Input #1, HO$(I1): Next
            For I1 = 1 To NUM_STATRECORDS: Input #1, HT%(I1): Next
            For I1 = 1 To NUM_STATRECORDS: Input #1, HO$(I1): Next

            For I1 = 1 To NUM_STATRECORDS
                For I2 = 0 To 1
                    Input #1, APT%(I1, I2)
                Next
            Next

            For I1 = 1 To NUM_STATRECORDS: Input #1, CRD&(I1): Next I1
            For I1 = 1 To NUM_STATRECORDS: Input #1, SITE$(I1): Next I1

            Close #1

            For I1 = 1 To numberGames
                If O%(I1) > HT%(I1) Then Z5(I) = Z5(I) + 1
                If O%(I1) < HT%(I1) Then Z6(I) = Z6(I) + 1
            Next

        End If

    Next

End Sub


'----------------------------------------
'         OFFREBOUND Subroutine
'----------------------------------------
'This subroutine clearly does something
'related to offensive rebounds
Sub OFFREBOUND ()
    RB = 0

    For I = 0 To 4: RB(I) = 0
        XZ = plyrOff_GAME!(P, B1(P, I), 21)

        If Not (H > 2 Or H = 2 And gameClock! <= 120) Then
            If plyrOff_GAME!(P, B1(P, I), 3) - plyrOff_GAME!(P, B1(P, I), 7) - plyrOff_GAME!(P, B1(P, I), 11) - plyrOff_GAME!(P, B1(P, I), 12) <= 0 Then XZ = Int(XZ * .5 + .5)
        End If

        If tmFatigue(P, B1(P, I)) <= -5 Then XZ = Int(XZ * .9 + .5)
        RB(I) = RB(I) + XZ: RB = RB + XZ
    Next

    RN = Rnd(1) * RB

    skipRandom% = 0

    For B = 0 To 4
        If RN <= RB(B) Then skipRandom% = 1: Exit For
        RB(B + 1) = RB(B + 1) + RB(B)
    Next

    If skipRandom% = 0 Then B = Int(Rnd(1) * 5)

End Sub


'----------------------------------------
'         DEFREBOUND Subroutine
'----------------------------------------
'This subroutine clearly does something
'related to defensive rebounds
Sub DEFREBOUND ()
    RB = 0

    For I = 0 To 4
        RB(I) = 0
        XZ = plyrOff_GAME!(1 - P, B1(1 - P, I), 2)

        If Not (H > 2 Or H = 2 And gameClock! <= 120) Then
            If plyrOff_GAME!(1 - P, B1(1 - P, I), 3) - plyrOff_GAME!(1 - P, B1(1 - P, I), 7) - plyrOff_GAME!(1 - P, B1(1 - P, I), 11) - plyrOff_GAME!(1 - P, B1(1 - P, I), 12) <= 0 Then XZ = Int(XZ * .5 + .5)
        End If

        If tmFatigue(1 - P, B1(1 - P, I)) <= -5 Then XZ = Int(XZ * .9 + .5)
        RB(I) = RB(I) + XZ: RB = RB + XZ
    Next

    RN = Rnd(1) * RB

    skipRandom% = 0

    For B = 0 To 4
        If RN <= RB(B) Then skipRandom% = 1: Exit For
        RB(B + 1) = RB(B + 1) + RB(B)
    Next

    If skipRandom% = 0 Then B = Int(Rnd(1) * 5)

End Sub


'----------------------------------------
'        SETUPRATINGS Subroutine
'----------------------------------------
'This subroutine lets the user adjust the
'contribution ratings for players
Sub SETUPRATINGS ()

    9300 '

    If autoPlay <> 1 Or playerMode <> 2 Then

        Color 15, 0: Cls
        Print "EDIT CONTRIBUTION PERCENTAGES OF PLAYERS FROM:"
        Print
        Color 14
        Print "(0) - ";: Color teamRat_GAME(0, 0), teamRat_GAME(0, 1)
        Print gameTeams$(0): Color , 0
        Print
        Color 14
        Print "(1) - ";: Color teamRat_GAME(1, 0), teamRat_GAME(1, 1)
        Print gameTeams$(1): Color , 0
        Print
        Color 14
        Print "(2) - ";: Color 3: Print "PROCEED TO GAME"
        Color 15, 0
        Print
        Print "NOTE:: THE CONTRIBUTION RATING CONSISTS OF THE PLAYER'S"
        Print "       FREQUENCY TO SHOOT, REBOUND, AND COMMIT FOULS."

        Do
            I$ = GetKeyPress$
            I = Val(I$)
        Loop Until I >= 0 And I <= 2

        If I <> 2 Then

            Cls
            TX = 0
            For I1 = 0 To 13: TX = TX + plyrOff_GAME!(I, I1, 3): Next
            For I1 = 0 To 13: plyrOff_GAME!(I, I1, 3) = plyrOff_GAME!(I, I1, 3) / TX * 100: Next

            9305 '
            Locate 2, 1: Print "CONTRIBUTION RATINGS FOR ";
            Color teamRat_GAME(I, 0), teamRat_GAME(I, 1): Print gameTeams$(I)
            Color 15, 0
            Print
            Print " #  PLAYER             CX"
            TY% = 0

            For I1 = 0 To 13:
                TY% = TY% + plyrOff_GAME!(I, I1, 3)
                If B%(I, I1) = -1 Then Color teamRat_GAME(I, 0), teamRat_GAME(I, 1)
                Print Using "## "; I1 + 1;
                Print players$(I, I1);
                Locate , 24
                Print Using "##"; plyrOff_GAME!(I, I1, 3)
                Color 15, 0
            Next

            Locate , 23: Print Using "###"; TY%

            Input "SELECT PLAYER TO CHANGE (0 TO CONTINUE)"; I1
            I1 = I1 - 1

            If I1 > 13 Or I1 < 0 Then

                If TY% <> 100 Then
                    Locate 22, 1: Print "TOTAL MUST ADD UP TO 100%! PRESS ANY KEY"
                    I$ = GetKeyPress$
                    Locate 22, 1: Print Space$(52)
                    GoTo 9305
                End If

                For I1 = 0 To 13: plyrOff_GAME!(I, I1, 3) = plyrOff_GAME!(I, I1, 3) / 100 * TX: Next

                GoTo 9300

            End If

            Locate 22, 1: Print "ENTER NEW CX RATING FOR "; players$(I, I1); " ";
            Input plyrOff_GAME!(I, I1, 3)

            Locate 22, 1: Print Space$(52)
            GoTo 9305

        End If

    End If

    X = 0

End Sub


'----------------------------------------
'         ZONECHANGE Subroutine
'----------------------------------------
'This subroutine lets the user configure
'their zone strategy.
Sub ZONECHANGE ()

    If Not (playerMode = 1 And compTeam = D Or playerMode = 2) Or DT%(D) = 2 Or DT%(D) = 7 Or DT%(D) = 12 Or (OF%(P) <= 8 And OF%(P) >= 4) Then

        Call FRAMEOPTION(8, P)
        Locate 10, 15

        Print gameTeams$(D); " SELECT STRATEGY:"
        Locate 12, 14
        Locate , 14: Print "0 - SOLID MAN TO MAN"
        Locate , 14: Print "1 - PRESSURE MAN TO MAN"
        Locate , 14: Print "2 - 1-3-1 TRAPPING ZONE"

        Do
            I$ = GetKeyPress$
            I1 = Val(I$)
        Loop Until I1 >= 0 And I1 <= 2

        If I1 = 2 Then I1 = 3
        If DT%(D) <= 3 Then DT%(D) = I1
        If DT%(D) = 7 Then DT%(D) = I + 8
        If DT%(D) = 10 Then DT%(D) = 3
        If DT%(D) = 12 Then DT%(D) = I + 10
        If DT%(D) = 12 Then DT%(D) = 13

        P9 = D

        If DT%(P9) <= 3 Then P7(P9) = 0
        If DT%(P9) = 4 Then P7(P9) = 1
        If DT%(P9) = 5 Or DT%(P9) = 6 Then P7(P9) = 2
        If DT%(P9) > 6 And DT%(P9) <= 10 Then P7(P9) = 3
        If DT%(P9) > 9 And DT%(P9) < 14 Then P7(P9) = 4
        If DT%(P9) = 14 Then P7(P9) = 5
        If DT%(P9) = 0 Or DT%(P9) = 4 Or DT%(P9) = 5 Or DT%(P9) = 8 Or DT%(P9) = 10 Then D2(P9) = 0
        If DT%(P9) = 1 Or DT%(P9) = 6 Or DT%(P9) = 9 Or DT%(P9) = 11 Then D2(P9) = 1
        If DT%(P9) = 2 Or DT%(P9) = 7 Or DT%(P9) = 12 Then D2(P9) = 2
        If DT%(P9) = 3 Or DT%(P9) = 13 Then D2(P9) = 3
        Color 15, 0

    End If

    Color 7, 0

End Sub


'----------------------------------------
'         DEFENSEMENU Subroutine
'----------------------------------------
'This subroutine gives the user OPTIONS
'for the various defensive play styles.
'Once chosen, it assigns the appropriate
'value to the array for tracking.
Sub DEFENSEMENU ()

    Do

        Cls

        wrongChoice% = 0

        Print ; Tab(33); "DEFENSIVE STYLE"
        Print

        For I = 0 To 14
            Locate , 5: Print Using "# "; I;
            If I = 10 Then Locate , 5: Print "A ";
            If I = 11 Then Locate , 5: Print "B ";
            If I = 12 Then Locate , 5: Print "C ";
            If I = 13 Then Locate , 5: Print "D ";
            If I = 14 Then Locate , 5: Print "E ";
            Print D$(I)
        Next

        Print
        Locate 19, 5: Print "SELECT DEFENSIVE STYLE FOR "; gameTeams$(P9)

        Do
            I$ = GetKeyPress$
            I1 = Val(I$)
            Call LetterToNumber(I$, I1)
        Loop Until I1 >= 0 And I1 <= 14

        DT%(P9) = I1

        Select Case DT%(P9)

            Case 0 To 3
                P7(P9) = 0

            Case 4
                P7(P9) = 1

            Case 5, 6
                P7(P9) = 2

            Case 7 To 9
                P7(P9) = 3

            Case 10 To 13
                P7(P9) = 4

            Case 14
                If (H < 2 Or H >= 2 And gameClock! > 180) Then
                    Beep
                    Locate 23, 1: Print "CAN ONLY USE LAST 3 MIN OF 2ND HALF OR OT"
                    I$ = GetKeyPress$
                    wrongChoice% = 1
                Else
                    P7(P9) = 5
                End If

        End Select

    Loop Until wrongChoice% = 0

    Select Case DT%(P9)

        Case 0, 4, 5, 8, 10
            D2(P9) = 0

        Case 1, 6, 9, 11
            D2(P9) = 1

        Case 2, 7, 12
            D2(P9) = 2

        Case 3, 13
            D2(P9) = 3

    End Select

    Color 15, 0

End Sub


'----------------------------------------
'         SETSTAMINA Subroutine
'----------------------------------------
'This subroutine calculates and assigns
'stamina ratings to players
Sub SETSTAMINA ()

    SQ% = 0

    For I = 0 To 13
        If teamRat_GAME(P9, 5) = 0 And plyrRat_GAME(P9, I, 0) = 0 And B%(P9, I) = 0 Then SQ% = SQ% + plyrOff_GAME!(P9, I, 3)
        If teamRat_GAME(P9, 5) <> 0 And plyrRat_GAME(P9, I, 0) <> 0 And B%(P9, I) = 0 Then SQ% = SQ% + plyrOff_GAME!(P9, I, 3) * teamRat_GAME(P9, 5) / plyrRat_GAME(P9, I, 0): plyrOff_GAME!(P9, I, 3) = plyrOff_GAME!(P9, I, 3) * teamRat_GAME(P9, 5) / plyrRat_GAME(P9, I, 0)
    Next

    'So SQ% is a sum of plyrOff_GAME!(P9, X, 3) values...
    For I = 0 To 13
        If teamRat_GAME(P9, 5) = 0 And plyrRat_GAME(P9, I, 0) = 0 And B%(P9, I) = 0 Then plyrOff_GAME!(P9, I, 3) = Int(plyrOff_GAME!(P9, I, 3) / SQ% * S9 + .5)
        If teamRat_GAME(P9, 5) <> 0 And plyrRat_GAME(P9, I, 0) <> 0 And B%(P9, I) = 0 Then plyrOff_GAME!(P9, I, 3) = Int(plyrOff_GAME!(P9, I, 3) / SQ% * S9 + .5)
        If plyrOff_GAME!(P9, I, 3) < 1 Then plyrOff_GAME!(P9, I, 3) = 1
    Next I

    SQ% = 0

    For I = 0 To 13
        If B%(P9, I) = 0 Then SQ% = SQ% + plyrOff_GAME!(P9, I, 3)
    Next

    For I = 0 To 13
        If S9 > 120 And F5%(P9, 8) <> 99 Then plyrOff_GAME!(P9, I, 16) = plyrOff_GAME!(P9, I, 16) * (120 / S9): plyrOff_GAME!(P9, I, 16) = Int(plyrOff_GAME!(P9, I, 16) + .5)
    Next I

    DY = 7

    If S9 > 114 Then DY = (114 / S9) * DY: DY = Int(DY + .5)

End Sub


'----------------------------------------
'        COMPUTERSUBS Subroutine
'----------------------------------------
'This subroutine uses some basic logic to
'automatically handle player substitution
Sub COMPUTERSUBS ()

    If H >= 2 And gameClock! <= 60 And threePtOpt = 1 And (score(P9, 0) - score(1 - P9, 0) = -3 Or score(P9, 0) - score(1 - P9, 0) = -6) Then
        OF%(P9) = 9
    End If

    M1 = 0
    M2 = 0
    M3 = 0
    M4 = 0
    skipG9% = 0

    If Not (playerMode = 1 And P9 = compTeam And X = 50 Or playerMode = 2 And P9 = P And X = 50) Then

        For I1 = 0 To 13

            M6 = plyrOff_GAME!(P9, I1, 3) - plyrOff_GAME!(P9, I1, 7) - plyrOff_GAME!(P9, I1, 11) - plyrOff_GAME!(P9, I1, 12)

            If H < 2 And M6 <= 0 Or H = 2 And gameClock! > 120 And M6 <= 0 Then M1 = M1 + 1

            'Disabled player or inactive spot
            If plyrOff_GAME!(P9, I1, 12) >= foulsToDQ Or players$(P9, I1) = "XXX" Or B%(P9, I1) <> 0 Then M2 = M2 + 1

            If I1 <= 4 Then

                M6 = plyrOff_GAME!(P9, B1(P9, I1), 3) - plyrOff_GAME!(P9, B1(P9, I1), 7) - plyrOff_GAME!(P9, B1(P9, I1), 11) - plyrOff_GAME!(P9, B1(P9, I1), 12)

                If H = 1 And M6 / plyrOff_GAME!(P9, B1(P9, I1), 3) < .5 Then M3 = M3 + 1
                If H = 1 And gameClock! >= 600 And M6 / plyrOff_GAME!(P9, B1(P9, I1), 3) < .75 Then M3 = M3 + 1
                If H = 2 And gameClock! >= 600 And M6 / plyrOff_GAME!(P9, B1(P9, I1), 3) < .25 Then M3 = M3 + 1
                If H = 2 And gameClock! >= 300 And gameClock! < 600 And M6 / plyrOff_GAME!(P9, B1(P9, I1), 3) < .13 Then M3 = M3 + 1
                If H = 2 And gameClock! < 300 And M6 / plyrOff_GAME!(P9, B1(P9, I1), 3) < gameClock! / 2400 Then M3 = M3 + 1
                If M6 <= 0 And H < 2 Or M6 <= 0 And H = 2 And gameClock! > 120 Then M3 = M3 + 1
                If plyrOff_GAME!(P9, B1(P9, I1), 12) >= foulsToDQ Or plyrOff_GAME!(P9, B1(P9, I1), 12) >= foulsToDQ - 2 And H = 1 Or H = 2 And gameClock! > 720 And plyrOff_GAME!(P9, B1(P9, I1), 12) >= foulsToDQ - 1 Then M4 = M4 + 1

            End If

        Next

        If M3 >= 1 And 5 - M3 < 14 - M1 Or H = 2 And gameClock! < 120 And XS = 0 And G9%(P9) = 0 Or M4 >= 1 And M2 < 13 Or CTO% = 1 Then
            CTO% = 0
            XM = 1
            ''Call pbplog(4588)
            Call COMCOACH
            ''Call pbplog(4590)
            skipG9% = 1
        End If

    End If

    If skipG9% = 0 Then
        If H = 2 And gameClock! <= 120 Then G9%(P9) = 1
    End If

End Sub


'----------------------------------------
'           FATIGUE Subroutine
'----------------------------------------
'This subroutine picks the appropriate
'defense for the computer team.
Sub FATIGUE ()

    'COMPUTER DEFENSE FOR FATIGUE
    FD% = 0
    FQ% = 0

    For I = 0 To 4
        FD% = FD% + tmFatigue(P9, B1(P9, I))
        If tmFatigue(P9, B1(P9, I)) <= -4 Then FQ% = 1
    Next

    If FD% < -15 Or FQ% = 1 Then D2(P9) = 2: P7(P9) = 0: DT%(P9) = 2

End Sub


'----------------------------------------
'           LINEUPS Subroutine
'----------------------------------------
'This subroutine displays the starting
'lineup for each team and gives the user
'an interface for changing the lineup
Sub LINEUPS ()

    Cls
    Color teamRat_GAME(P9, 0), teamRat_GAME(P9, 1): Print gameTeams$(P9);
    Color 15, 0: Print " TEAM ROSTER    COACH: "; gameCoaches$(P9);
    Print "  RECORD: ";
    Print Using "##"; teamRat_GAME(P9, 7);
    Print "-";
    Print Using "##"; teamRat_GAME(P9, 8)

    Color 14: Print "# NAME         POS FG  FT 3FG %3A ORB DRB RB PA  S  B CX EF  PT  F  FC  PTS/G"
    Locate 3, 1

    For R1 = 0 To 13

        If B%(P9, R1) = 0 And players$(P9, R1) <> "XXX" And players$(P9, R1) <> "" Then

            Color 2
            If R1 <= 9 Then
                Print Using "# "; R1;
            Else
                Print X$(R1 - 10);
            End If

            Color 15
            Print Left$(players$(P9, R1), 12);
            Locate , 16: Print PO$(P9, R1);
            Locate , 20

            L = 0
            L = plyrOff_GAME!(P9, R1, 3) - plyrOff_GAME!(P9, R1, 7) - plyrOff_GAME!(P9, R1, 11) - plyrOff_GAME!(P9, R1, 12)

            If L <= 0 Then L = 0

            Print Using "## ###  ##  ##  ##  ## ## "; plyrOff_GAME!(P9, R1, 0), plyrOff_GAME!(P9, R1, 1), plyrOff_GAME!(P9, R1, 20), plyrOff_GAME!(P9, R1, 19), plyrOff_GAME!(P9, R1, 21) * 2 / 10, plyrOff_GAME!(P9, R1, 2) * 2 / 10, (plyrOff_GAME!(P9, R1, 2) + plyrOff_GAME!(P9, R1, 21)) / 5;
            Print Using "## ## ##"; plyrOff_GAME!(P9, R1, 4), plyrOff_GAME!(P9, R1, 5), plyrOff_GAME!(P9, R1, 6);

            If L <= 0 And (H = 1 Or H = 2 And gameClock! > 120) Then Color 12
            Print Using "### "; L;

            Color 15
            If tmFatigue(P9, R1) * -1 >= 5 And (H = 1 Or H = 2 And gameClock! > 120) Then Color 12
            Print Using "##"; tmFatigue(P9, R1) * -1;

            Color 15
            Locate , 61: Print Using "###  "; plyrOff_GAME!(P9, R1, 8) * 2 + plyrOff_GAME!(P9, R1, 10) + threeFG(P9, R1, 0);

            If plyrOff_GAME!(P9, R1, 12) >= 4 Then Color 12
            Print Using "# "; plyrOff_GAME!(P9, R1, 12);

            Color 15
            Print Using "###   "; plyrOff_GAME!(P9, R1, 17);

            If RS(P9, R1, 0) = 0 Then
                Print "--.-"
            Else
                Print Using "##.#"; (RS(P9, R1, 3) * 2 + RS(P9, R1, 5) + RS(P9, R1, 13)) / RS(P9, R1, 0)
            End If

        End If

    Next R1

    Locate 18, 1: Color 9, 0
    Print String$(27, 205); Chr$(203); String$(51, 205)

    For R1 = 1 To 7:
        Locate R1 + 18, 28
        Print Chr$(186);
    Next

    Color 14, 0
    Locate 19, 1: Print "STARTING LINEUP"

    If C1 = 1 Then

        For M = 0 To 4

            Locate M + 20, 1
            Color 2, 0
            Print Using "# "; M;
            Color 15, 0
            Print "ENTER "; PS$(M); " # ";

            Z = B1(P9, M)
            CV% = 0

            For IP% = 0 To Z
                If B%(P9, IP%) <> 0 Or players$(P9, IP%) = "" Or players$(P9, IP%) = "XXX" Then CV% = CV% + 1
            Next

            Print players$(P9, Z);
            Locate Z + 3 - CV%, 3
            Color teamRat_GAME(P9, 0), teamRat_GAME(P9, 1)
            Print Left$(players$(P9, Z), 12)
            Color 15, 0

        Next

    Else

        For I = 0 To 4

            Do

                Locate I + 20, 1
                Color 2, 0
                Print Using "# "; I;
                Color 15
                Print "ENTER "; PS$(I); " # ";

                I$ = GetKeyPress$
                Call LetterToNumber(I$, J)

                If J >= 0 And J <= 13 And plyrOff_GAME!(P9, J, 12) < foulsToDQ And players$(P9, J) <> "XXX" And B%(P9, J) = 0 Then
                    For I2 = 0 To 4
                        If B1(P9, I2) = J Then Exit For
                    Next I2
                End If

            Loop Until J >= 0 And J <= 13

            B1(P9, I) = J
            Z = J
            CV% = 0

            For IP% = 0 To Z
                If B%(P9, IP%) <> 0 Or players$(P9, IP%) = "" Or players$(P9, IP%) = "XXX" Then CV% = CV% + 1
            Next

            Print players$(P9, J);
            Locate J + 3 - CV%, 3: Color teamRat_GAME(P9, 0), teamRat_GAME(P9, 1)
            Print Left$(players$(P9, J), 12)
            Color 15, 0
        Next

    End If

    Do

        Do
            Locate 25, 1
            Color 12, 0
            Print "# TO CHANGE (0-4) 6=NONE";
            Locate 1, 1
            I$ = GetKeyPress$
            K = Val(I$)

        Loop Until K >= 0 And K <= 6

        If K = 6 Then

            skipMenu% = 0

            CV% = 0

            For I1 = 0 To 13
                If B%(P9, I1) <> 0 Or players$(P9, I1) = "XXX" Or plyrOff_GAME!(P9, I1, 12) >= foulsToDQ Then CV% = CV% + 1
            Next

            If 14 - CV% >= 5 Then

                For I1 = 0 To 4

                    If plyrOff_GAME!(P9, B1(P9, I1), 12) >= foulsToDQ Then
                        Locate 20, 29
                        Color 14, 0: Print players$(P9, B1(P9, I1)); " HAS FOULED OUT"
                        skipMenu% = 1
                        Exit For

                    End If

                Next

            End If

            If skipMenu% = 0 Then Call PlayStyle

        Else

            If X = 50 And K = B And P9 = P Then

                Color 14, 0
                Locate 20, 29: Print players$(P9, B1(P9, K)); " IS AT THE FT LINE"

            Else

                Locate 25, 1: Print Space$(25);

                J = B1(P9, K)
                Z = J
                TM%(P9, J) = gameClock!
                CV% = 0

                For IP% = 0 To Z
                    If B%(P9, IP%) <> 0 Or players$(P9, IP%) = "" Or players$(P9, IP%) = "XXX" Then
                        CV% = CV% + 1
                    End If
                Next

                Locate J + 3 - CV%, 3
                Color 15, 0: Print Left$(players$(P9, J), 12)
                Locate K + 20, 1: Print Space$(26);

                B1(P9, K) = -1

                Locate , 1: Color 2: Print Using "# "; K;
                Color 15: Print "ENTER "; PS$(K); " # ";


                Do
                    I$ = GetKeyPress$
                    Call LetterToNumber(I$, J)

                    If J >= 0 And J <= 13 And plyrOff_GAME!(P9, J, 12) < foulsToDQ And players$(P9, J) <> "XXX" And B%(P9, J) = 0 Then
                        For I2 = 0 To 4
                            If B1(P9, I2) = J Then Exit For
                        Next I2

                    End If

                Loop Until J >= 0 And J <= 13

                B1(P9, K) = J
                Z = J

                'FATIGUE
                If TM%(P9, J) - gameClock! > 60 And TM%(P9, J) < 120 Then tmFatigue(P9, J) = tmFatigue(P9, J) + 1
                If TM%(P9, J) - gameClock! >= 120 Then tmFatigue(P9, J) = tmFatigue(P9, J) + 4
                If tmFatigue(P9, J) > 0 Then tmFatigue(P9, J) = 0

                CV% = 0
                For IP% = 0 To Z
                    If B%(P9, IP%) <> 0 Or players$(P9, IP%) = "" Or players$(P9, IP%) = "XXX" Then
                        CV% = CV% + 1
                    End If
                Next

                Print players$(P9, J);
                Locate J + 3 - CV%, 3
                Color teamRat_GAME(P9, 0), teamRat_GAME(P9, 1): Print Left$(players$(P9, J), 12)
                Color 15, 0

            End If

        End If

    Loop Until K = 6

End Sub


'----------------------------------------
'          PlayStyle Subroutine
'----------------------------------------
'This subroutine walks the user through
'the selection of play styles for their
'team on both offense and defense.
Sub PlayStyle ()

    109 '
    Color teamRat_GAME(P9, 0), teamRat_GAME(P9, 1)
    Cls
    Print ; Tab(33); "OFFENSIVE STYLE"
    Print

    For I = 0 To 9
        Locate , 5: Print Using "# "; I;: Print O$(I)
    Next

    Print
    Locate 14, 5: Print "SELECT OFFENSIVE STYLE FOR "; gameTeams$(P9)

    Do
        I$ = GetKeyPress$
        I1 = Val(I$)
    Loop Until I1 >= 0 And I1 <= 9

    If (I1 = 3 Or I1 = 4 Or I1 = 7 Or I1 = 9) And (H < 2 Or H >= 2 And gameClock! > 180) Then Beep: Locate 18, 1: Print "CAN ONLY USE LAST 3 MIN OF 2ND HALF OR OT": I$ = GetKeyPress$: GoTo 109
    If I1 = 8 And D2(1 - P9) <> 2 Then Beep: Locate 18, 1: Print "DEFENSE NOT IN PASSIVE ZONE": I$ = GetKeyPress$: GoTo 109
    If I1 = 4 And score(P9, 0) - score(1 - P9, 0) > -11 Then Beep: Locate 18, 1: Print "ILLEGAL SELECTION": I$ = GetKeyPress$: GoTo 109
    If I1 = 9 And threePtOpt = 0 Then Beep: Locate 18, 1: Print "NOT USING 3 POINT SHOT": I$ = GetKeyPress$: GoTo 109
    If I1 = 5 And sClockVal = 0 Then Beep: Locate 18, 1: Print "NOT USING SHOT CLOCK": I$ = GetKeyPress$: GoTo 109
    If I1 = 7 And score(P9, 0) - score(1 - P9, 0) <= 0 Then Beep: Locate 18, 1: Print "ILLEGAL SELECTION": I$ = GetKeyPress$: GoTo 109

    'How to loop around this with so many conditions?
    'Possibly build a bunch of nested If/Then statements?
    OF%(P9) = I1
    CZ%(P9) = 0

    If Not (H < 2 Or H >= 2 And gameClock! > 120) Then
        Print "CRASH OFFENSIVE BOARDS (LAST 2 MIN) (YN)";
        I$ = GetKeyPress$
        If UCase$(I$) = "Y" Then CZ%(P9) = 1
    End If

    Call DEFENSEMENU

End Sub


'----------------------------------------
'          FOULSAFE Subroutine
'----------------------------------------
' ...explanation...
Sub FOULSAFE ()

    Cls

    Color 15

    A = 0
    S2 = 1
    S3 = 1
    SW = 0

    For ZZ = 0 To 4
        If plyrOff_GAME!(P9, B1(P9, ZZ), 22) = 50 Then A = A + 1: If SW = 0 Then Print: Print "THE FOLLOWING PLAYER(S) ARE PLAYING SAFE BUT CAN NOW PLAY NORMAL IF YOU WISH": SW = 1
        If plyrOff_GAME!(P9, B1(P9, ZZ), 22) = 50 And SW = 1 And S2 < 6 Then Locate S2 + 3, 1: Print S2; "-"; players$(P9, B1(P9, ZZ)): P5(A) = S2: P4(A) = ZZ: S2 = S2 + 1: S3 = S3 + 1
    Next ZZ

    skipChangeToSafe% = 0

    If SW <> 0 Then

        A = 1
        Print
        Print "Z - CONTINUE"

        Do
            I$ = GetKeyPress$
            If UCase$(I$) = "Z" And MJ = 0 Then Exit Do
            If UCase$(I$) = "Z" And MJ = 25 Then skipChangeToSafe% = 1: Exit Do
            P6 = Val(I$)

            A = P6

            If P6 = P5(P6) Then

                plyrOff_GAME!(P9, B1(P9, P4(A)), 17) = plyrOff_GAME!(P9, B1(P9, P4(A)), 17) * 3
                plyrOff_GAME!(P9, B1(P9, P4(A)), 22) = 0

                Locate P5(A) + 3, 20
                Print players$(P9, B1(P9, P4(A))); " WILL NOW PLAY NORMAL DEFENSE!"
                Call STEALADJ

                dFGPA(P9) = dFGPA(P9) - 1
                A = A + 1
                MJ = 25

            End If

        Loop Until P6 >= 1 And P6 <= (S2 + 1) And P6 <> P5(P6)

    End If

    If skipChangeToSafe% = 0 Then

        A = 0
        S2 = 1

        For ZZ = 0 To 4
            If H <= 1 And plyrOff_GAME!(P9, B1(P9, ZZ), 12) >= foulsToDQ - 3 And plyrOff_GAME!(P9, B1(P9, ZZ), 22) = 0 Or plyrOff_GAME!(P9, B1(P9, ZZ), 12) = foulsToDQ - 1 And plyrOff_GAME!(P9, B1(P9, ZZ), 22) = 0 Then
                A = A + 1
                If S2 = 1 Then Cls: Print: Print "THE FOLLOWING PLAYER(S) CAN ME MADE TO PLAY SAFE IF YOU WISH": Print
            End If

            If A = 0 And ZZ > 3 Then 1230

            If S2 = A And S2 < 6 Then Print S2; "- "; players$(P9, B1(P9, ZZ)): P5(A) = S2: P4(A) = ZZ: S2 = S2 + 1: S3 = S3 + 1

        Next ZZ

        A = 1
        Print
        Print "Z - CONTINUE"

        1220 '
        Do
            I$ = GetKeyPress$
            P6 = Val(I$)
        Loop Until P6 >= 1 And P6 <= (S2 + 1) Or UCase$(I$) = "Z"

        If UCase$(I$) <> "Z" Then

            A = P6

            If P6 = P5(P6) Then

                plyrOff_GAME!(P9, B1(P9, P4(A)), 17) = Int((plyrOff_GAME!(P9, B1(P9, P4(A)), 17) + 1) / 3)
                plyrOff_GAME!(P9, B1(P9, P4(A)), 22) = 50

                Locate P5(A) + 3, 20: Print players$(P9, B1(P9, P4(A))); " WILL NOW PLAY SAFE!"
                Call STEALADJ

                dFGPA(P9) = dFGPA(P9) + 1
                A = A + 1
                S3 = S3 + 1

                GoTo 1220

            End If

        End If

    End If

    1230 '
    MJ = 0

    FO = 99

    If H = 1 And gameClock! = 1200 Then FO = 0

    'Call UPDATESCREEN
    Call SCOREBOARD

End Sub


'----------------------------------------
'          FOULSAFE Subroutine
'----------------------------------------
' ...explanation...
Sub FOULHARD ()

    For I = 0 To 1

        For I1 = 0 To 13
            If plyrOff_GAME!(I, I1, 22) = 50 Then
                plyrOff_GAME!(I, I1, 22) = 0
                plyrOff_GAME!(I, I1, 17) = plyrOff_GAME!(I, I1, 17) * 3
                dFGPA(I) = dFGPA(I) - 1: MJ = 50
            End If
        Next I1

        If MJ = 50 Then
            MJ = 0
            F5%(I, 0) = 0
            For I1 = 0 To 4:
                F5%(I, 0) = F5%(I, 0) + plyrOff_GAME!(I, B1(I, I1), 17)
            Next I1
        End If

    Next I

End Sub


'----------------------------------------
'          STEALADJ Subroutine
'----------------------------------------
' ...explanation...
Sub STEALADJ ()

    For I = 0 To 1
        F5%(I, 0) = 0
        F5%(I, 1) = 0
        For I1 = 0 To 4
            F5%(I, 0) = F5%(I, 0) + plyrOff_GAME!(I, B1(I, I1), 17)
            F5%(I, 1) = F5%(I, 1) + plyrOff_GAME!(I, B1(I, I1), 18)
        Next I1
    Next I

End Sub


'----------------------------------------
'         SHOTPERCENT Subroutine
'----------------------------------------
'This subroutine calculates the chance
'of a shot being made based on the active
'defense / offense / players.
Sub SHOTPERCENT ()

    FX% = plyrOff_GAME!(P, B1(P, B), 0) + TP%(D) + TP%(P)
    TP%(D) = 0
    TP%(P) = 0

    If tmFatigue(P, B1(P, B)) <= -5 Then FX% = FX% - 10

    F! = FX% + dFGPA(D) + D8(0, D2(D)): J8% = 0

    If gameLoc = P Then
        F! = F! + HF%(0, teamRat_GAME(P, 6))
    Else
        If gameLoc <> 2 Then F! = F! + HF%(1, teamRat_GAME(P, 6))
    End If

    F3S% = Int(Rnd(1) * 100) + 1
    TPA% = 0

    If DT%(D) = 2 Or DT%(D) = 7 Or DT%(D) = 12 Then TPA% = 3
    If DT%(D) = 1 Or DT%(D) = 6 Or DT%(D) = 9 Or DT%(D) = 11 Then TPA% = -5

    skipCalcs% = 0

    If OF%(P) = 9 And (F3S% > plyrOff_GAME!(P, B1(P, B), 19) + F5%(D, 3) + TPA% Or plyrOff_GAME!(P, B1(P, B), 19) = 0) Then
        F3S% = Int(Rnd(1) * 5) + 11
        J8% = 1
    Else
        If OF%(P) <> 9 Then

            If F3S% > plyrOff_GAME!(P, B1(P, B), 19) + F5%(D, 3) + TPA% Or plyrOff_GAME!(P, B1(P, B), 19) = 0 Then
                F3S% = Int(Rnd(1) * 5) + 3
                skipCalcs% = 1
            End If

        End If

        If skipCalcs% = 0 Then
            FX% = plyrOff_GAME!(P, B1(P, B), 20)

            If tmFatigue(P, B1(P, B)) <= -5 Then FX% = Int(FX% * .67 + .5)

            F3S% = FX% + F5%(D, 2): J8% = 1

            If plyrOff_GAME!(P, B1(P, B), 3) - plyrOff_GAME!(P, B1(P, B), 7) - plyrOff_GAME!(P, B1(P, B), 11) - plyrOff_GAME!(P, B1(P, B), 12) <= 0 And (H = 1 Or H = 2 And gameClock! > 120) Then F3S% = Int(Rnd(1) * 5) + 3: J8% = 0
        End If

    End If

End Sub


'----------------------------------------
'           THREEFT Subroutine
'----------------------------------------
'This subroutine walks the user through
'taking 3 free throw attempts.
Sub THREEFT ()

    plyrOff_GAME!(P, B1(P, B), 10) = plyrOff_GAME!(P, B1(P, B), 10) + 1

    Call d100(RN)

    Select Case F3

        Case 1
            If RN <= 50 Then
                U$ = "FREE THROW IS GOOD"
            Else
                U$ = "HE HITS THE FIRST FREE THROW"
            End If

        Case 2
            If RN <= 50 Then
                U$ = "SECOND FREE THROW IS GOOD"
            Else
                U$ = "HE HITS THE SECOND ONE"
            End If

        Case 3
            If RN <= 50 Then
                U$ = "THIRD FREE THROW IS GOOD"
            Else
                U$ = "HE HITS THE LAST ONE"
            End If

    End Select

    Call PBP

    score(P, H) = score(P, H) + 1
    score(P, 0) = score(P, 0) + 1

    Call UPDATESCREEN

End Sub


'----------------------------------------
'           MADEFT Subroutine
'----------------------------------------
'This subroutine handles score, stats and
'Play-by-Play for a successful free throw
Sub MADEFT ()

    plyrOff_GAME!(P, B1(P, B), 10) = plyrOff_GAME!(P, B1(P, B), 10) + 1

    If pbpDelay! <> 0 Then
        Locate F3 + 9, 1
        Call DELAY
        Print F3; " GOOD"
    End If

    score(P, H) = score(P, H) + 1
    score(P, 0) = score(P, 0) + 1

    Call UPDATESCREEN
    Call DELAY

End Sub


'----------------------------------------
'           MISSFT Subroutine
'----------------------------------------
'This subroutine handles Play-by-Play
'for a missed free throw
Sub MISSFT ()

    If pbpDelay! <> 0 Then
        Call DELAY
        Locate F3 + 9, 1
        Print F3; " MISSED"
        Call DELAY
    End If

End Sub


'----------------------------------------
'            BADFT Subroutine
'----------------------------------------
'This subroutine handles Play-by-Play for
'missed FT's when there are 3 attempts.
Sub BADFT ()

    If F3 = 1 Then U$ = "FIRST FREE THROW IS MISSED"
    If F3 = 2 Then U$ = "SECOND FREE THROW IS MISSED"
    If F3 = 3 Then U$ = "THIRD FREE THROW IS MISSED"
    Call PBP

End Sub


'----------------------------------------
'           PRDFAT Subroutine
'----------------------------------------
'This subroutine calculates fatigue of the
'defense due pressure on the defense.
Sub PRDFAT ()

    For I = 0 To 4

        RN0 = Int(Rnd(1) * 100) + 1

        If RN0 <= X0% Then
            tmFatigue(D, B1(D, I)) = tmFatigue(D, B1(D, I)) + X1%
        Else
            tmFatigue(D, B1(D, I)) = tmFatigue(D, B1(D, I)) + X1% + 1
        End If

        If tmFatigue(D, B1(D, I)) > 0 Then tmFatigue(D, B1(D, I)) = 0
        If tmFatigue(D, B1(D, I)) < -5 Then tmFatigue(D, B1(D, I)) = -5

    Next

End Sub


'----------------------------------------
'           PRDFAT Subroutine
'----------------------------------------
'This subroutine calculates fatigue of the
'defense due pressure on the defense.
Sub PRPFAT ()

    For I = 0 To 4

        RN0 = Int(Rnd(1) * 100) + 1

        If RN0 <= X0% Then
            tmFatigue(P, B1(P, I)) = tmFatigue(P, B1(P, I)) + X1%
        Else
            tmFatigue(P, B1(P, I)) = tmFatigue(P, B1(P, I)) + X1% + 1
        End If

        If tmFatigue(P, B1(P, I)) > 0 Then tmFatigue(P, B1(P, I)) = 0
        If tmFatigue(P, B1(P, I)) < -5 Then tmFatigue(P, B1(P, I)) = -5

    Next

End Sub


'----------------------------------------
'         WHOGESTBALL Subroutine
'----------------------------------------
'...explanation...
Sub WHOGETSBALL ()

    CNT% = 0

    While (CNT% < 4)

        1041 '
        CNT% = CNT% + 1

        If CNT% <> 4 Then

            M9 = 0
            B = Int(Rnd(1) * 5)
            X = Int(Rnd(1) * 100) + 1

            If X > 25 Then

                For I = 0 To 4
                    M8 = Int(plyrRat_GAME(P, B1(P, I), 1) / plyrRat_GAME(P, B1(P, I), 0) + .5) - plyrOff_GAME!(P, B1(P, I), 7)
                    If M8 <= 0 Then M8 = 0
                    If M8 >= M9 Then B = I: M9 = M8
                Next I

            End If

            M8 = plyrOff_GAME!(P, B1(P, B), 3) - plyrOff_GAME!(P, B1(P, B), 7) - plyrOff_GAME!(P, B1(P, B), 11) - plyrOff_GAME!(P, B1(P, B), 12)

            If plyrOff_GAME!(P, B1(P, B), 4) >= 5 And M8 / plyrOff_GAME!(P, B1(P, B), 3) <= 0.4 And H = 1 Then 1041
            If plyrOff_GAME!(P, B1(P, B), 4) >= 5 And M8 / plyrOff_GAME!(P, B1(P, B), 3) <= 0.2 And H = 2 And gameClock! > 120 Then 1041
            If plyrOff_GAME!(P, B1(P, B), 3) < 10 And plyrOff_GAME!(P, B1(P, B), 4) >= 5 And M8 / plyrOff_GAME!(P, B1(P, B), 3) <= 0.75 And H = 1 Then 1041
            If plyrOff_GAME!(P, B1(P, B), 3) < 10 And plyrOff_GAME!(P, B1(P, B), 4) >= 5 And M8 / plyrOff_GAME!(P, B1(P, B), 3) <= 0.5 And H = 2 And gameClock! > 120 Then 1041
            GoTo 1041

        End If

    Wend

End Sub


'----------------------------------------
'       BALLDISTRIBUTE Subroutine
'----------------------------------------
' ...explanation...
Sub BALLDISTRIBUTE ()

    RN0 = Int(Rnd(1) * 100) + 1

    If playerMode = 0 And coachOpt = 1 Or playerMode = 1 And D = compTeam And coachOpt = 1 Or playerMode = 1 And P = compTeam Or playerMode = 2 Then
        Call WHOGETSBALL
    Else
        'Select / Case statement
        If D2(D) = 2 Or D2(D) = 3 Then 415
        If S9 <= 90 And RN0 <= 15 Then 424
        If S9 <= 100 And RN0 <= 20 Then 424
        If S9 <= 110 And RN0 <= 25 Then 424
        If S9 <= 120 And RN0 <= 30 Then 424
        If S9 <= 130 And RN0 <= 38 Then 424
        If S9 <= 140 And RN0 <= 53 Then 424
        If S9 <= 150 And RN0 <= 60 Then 424
        If S9 > 150 And RN0 <= 67 Then 424
        GoTo 423

        '----------

        'Select / Case statement
        415 '
        If S9 <= 90 And RN0 <= 8 Then 424
        If S9 <= 100 And RN0 <= 10 Then 424
        If S9 <= 110 And RN0 <= 13 Then 424
        If S9 <= 120 And RN0 <= 15 Then 424
        If S9 <= 130 And RN0 <= 18 Then 424
        If S9 <= 140 And RN0 <= 53 Then 424
        If S9 <= 150 And RN0 <= 60 Then 424
        If S9 > 150 And RN0 <= 67 Then 424

        423 '
        B = Int(Rnd(1) * 5)
        GoTo 427

        '----------

        Do
            424 '
            If pbpDelay! <> 0 And pbpOpt = 0 Then
                U$ = "PASS TO CHOICE (0-4)"
                Call PBP
            End If

            If pbpDelay! > 0 And pbpOpt = 1 Then
                'IF autoPlay=1 AND playerMode=2 OR pbpDelay!=0 THEN 425
                For I = 8 To 15
                    Locate I, 1
                    Call BLANKLINE
                Next I
                Locate 8, 1
                Print "PASS TO CHOICE (0-4)"
                Call DELAY
            End If

            I$ = GetKeyPress$

            Select Case UCase$(I$)
            
                Case "T"
                    Call TICKER
                    Call SCOREBOARD

                Case "Q"
                    Cls
                    End

                Case "O"
                    Call OPTIONS 
                    
                Case Else
                    B = Val(I$)
            
            End Select

        Loop Until B >= 0 And B <= 4

    End If

    427 '

End Sub


'----------------------------------------
'       DEADBALLOPTIONS Subroutine
'----------------------------------------
'This subroutine handles any deadball
'situations. If not computer controlled,
'the user is given a chance to handle
'any changes to lineup, strategy, players.
Sub DEADBALLOPTIONS ()

    220 '
    PB$ = ""
    Call CLEARPBP

    If playerMode = 2 Then P9 = 0: Call COMPUTERSUBS: Call FATIGUE: P9 = 1: Call COMPUTERSUBS: Call FATIGUE
    If playerMode = 1 Then P9 = compTeam: Call COMPUTERSUBS: Call FATIGUE

    FO = 0
    XM = 0

    Call CLEARPBPBOX

    If playerMode = 2 Then
        S2 = 0
        P9 = P
        C1 = 2
        Call CheckGameClock
        Call STEALADJ
    Else

        Locate 11, 1
        Color 14, 0
        Print "<ENTER>-CONTINUE"
        Print "1-SUB "; gameTeams$(P)
        Print "2-SUB "; gameTeams$(D)
        Print "3-CHANGE STRATEGY "; gameTeams$(P)
        Print "4-CHANGE STRATEGY "; gameTeams$(D)
        Print "5-TIME OUT "; gameTeams$(P)
        Print "6-TIME OUT "; gameTeams$(D)

        221 '
        I$ = GetKeyPress$
        P3 = Val(I$)

        If P3 < 1 Or P3 > 6 Or playerMode = 1 And (P3 = 1 Or P3 = 3 Or P3 = 5 And timeouts(P) <= 0) And P = compTeam Or playerMode = 1 And (P3 = 2 Or P3 = 4 Or P3 = 6 And timeouts(D) <= 0) And D = compTeam Then

            'This is essentially the case for automated input,
            'or anything outside 1-6 (ie, press ENTER)
            S2 = 0
            P9 = P
            C1 = 2
            Call CheckGameClock
            Call STEALADJ

            If LC% = 1 Then
                LC% = 0
                Call CheckGameClock
                Call SCOREBOARD
            End If

            If pbpDelay! <> 0 Then
                For I = 8 To 15: Locate I, 1: Call BLANKLINE: Next I
            End If

        Else

            Select Case P3

                Case 1
                    S2 = P

                Case 2
                    S2 = D

                Case 3
                    P9 = P
                    Call PlayStyle
                    Call SCOREBOARD
                    GoTo 220

                Case 4
                    P9 = D
                    Call PlayStyle
                    Call SCOREBOARD
                    GoTo 220

                Case 5
                    If timeouts(P) <= 0 Or P3 = 6 And timeouts(D) <= 0 Then
                        GoTo 221
                    Else
                        timeouts(P) = timeouts(P) - 1
                        Call RESETFATIGUE
                        Call SCOREBOARD
                        GoTo 220
                    End If

                Case 6
                    timeouts(D) = timeouts(D) - 1
                    Call RESETFATIGUE
                    Call SCOREBOARD
                    GoTo 220

            End Select

            C1 = 1
            P9 = S2
            Call LINEUPS
            Call FOULSAFE
            P9 = P
            LC% = 1

            GoTo 220

        End If 'Done checking input

    End If 'Done checking computer control

End Sub


'----------------------------------------
'        RESETFATIGUE Subroutine
'----------------------------------------
'This subroutine resets player fatigue
'levels for a fresh start.
Sub RESETFATIGUE ()

    For I = 0 To 1

        For I1 = 0 To 1
            PR%(I, I1) = 0
        Next

    Next

    For I = 0 To 1

        For I1 = 0 To 13
            tmFatigue(I, I1) = tmFatigue(I, I1) + 1
            If tmFatigue(I, I1) > 0 Then tmFatigue(I, I1) = 0
        Next

    Next

End Sub


'------------------------------
'    STOPPAGE Subroutine
'------------------------------
' ...explanation...
Sub STOPPAGE ()

    810 '
    Call CLEARPBP

    If playerMode <> 0 Then
        If playerMode = 2 Then P9 = 0: Call COMPUTERSUBS: Call FATIGUE: P9 = 1: Call COMPUTERSUBS: Call FATIGUE
        If playerMode = 1 Then P9 = compTeam: Call COMPUTERSUBS: Call FATIGUE
        XM = 0
    End If

    If playerMode = 2 Then
        S2 = 0
        P9 = P
        C1 = 2
        Call CheckGameClock
    Else

        If pbpOpt = 0 Then Call CLEARPBPBOX
        If pbpOpt = 1 And pbpDelay! <> 0 Then Locate 11, 1
        Color 14, 0
        Print "<ENTER>-CONTINUE"
        Print "1-TIME OUT "; gameTeams$(P)
        Print "2-TIME OUT "; gameTeams$(D)
        Print "3-CHANGE STRATEGY "; gameTeams$(P)
        Print "4-CHANGE STRATEGY "; gameTeams$(D)

        813 '
        I$ = GetKeyPress$
        P3 = Val(I$)

        If P3 < 1 Or P3 > 4 Then
            S2 = 0
            P9 = P
            C1 = 2
            Call CheckGameClock
        Else
            If P3 = 1 And timeouts(P) <= 0 Or P3 = 2 And timeouts(D) <= 0 Or (P3 = 1 Or P3 = 3) And P = compTeam And playerMode = 1 Or (P3 = 2 Or P3 = 4) And D = compTeam And playerMode = 1 Then 813
            If P3 = 3 Then P9 = P: Call PlayStyle: Call SCOREBOARD: GoTo 810
            If P3 = 4 Then P9 = D: Call PlayStyle: Call SCOREBOARD: GoTo 810

            For I = 0 To 1
                For I1 = 0 To 1
                    PR%(I, I1) = 0
                Next
            Next

            If P3 = 1 Then timeouts(P) = timeouts(P) - 1: Color 14, 0: Call SCOREBOARD: Call DEADBALLOPTIONS
            If P3 = 2 Then timeouts(D) = timeouts(D) - 1: Color 14, 0: Call SCOREBOARD: Call DEADBALLOPTIONS

        End If

        Call CLEARPBPBOX

    End If

End Sub


'----------------------------------------
'         PRESSGUARD Subroutine
'----------------------------------------
'This subroutine handles PBP and stats
'for when a Guard is pressing
Sub PRESSGUARD ()

    Call WINDEX

    If pbpDelay! <> 0 Then
        If P7(D) > 0 Then
            U$ = gameTeams$(D) + " IS PRESSING"
            Call SELECTPBP
        End If
    End If

    If P7(D) <> 0 And P7(D) <= 2 Then

        If playerMode = 2 Or playerMode = 1 And P = compTeam Then
            ' COMPUTER GUARD FOR PRESS
            BU% = 1
            If plyrOff_GAME!(P, B1(P, 0), 4) >= plyrOff_GAME!(P, B1(P, 1), 4) And tmFatigue(P, B1(P, 0)) <= 3 Then BU% = 0

        Else
            Call FRAMEOPTION(8, P)
            Locate 10, 15

            Print gameTeams$(P); " SELECT GUARD TO HANDLE BALL:"

            Locate 12, 14
            Locate , 14: Print "#   NAME"; Tab(35); "PA"; Tab(38); "FA"
            Locate , 14: Print "0 - "; players$(P, B1(P, 0)); Tab(35); plyrOff_GAME!(P, B1(P, 0), 4); Tab(38); Abs(tmFatigue(P, B1(P, 0)))
            Locate , 14: Print "1 - "; players$(P, B1(P, 1)); Tab(35); plyrOff_GAME!(P, B1(P, 1), 4); Tab(38); Abs(tmFatigue(P, B1(P, 1)))

            Do
                I$ = GetKeyPress$
                I1 = Val(I$)
            Loop Until I1 >= 0 And I1 <= 1

            BU% = I1
            Color 15, 0
            Call SCOREBOARD

        End If

    End If

End Sub


'----------------------------------------
'        QUARTERTOTAL Subroutine
'----------------------------------------
'This subroutine calculates quarter totals
'for all stat categories right before the
'period end
Sub QUARTERTOTAL ()

    For I = 0 To 1

        Erase statTotals

        For I1 = 0 To 13
            statTotals(0) = statTotals(0) + plyrOff_GAME!(I, I1, 8)
            statTotals(1) = statTotals(1) + plyrOff_GAME!(I, I1, 7)
            statTotals(2) = statTotals(2) + plyrOff_GAME!(I, I1, 10)
            statTotals(3) = statTotals(3) + plyrOff_GAME!(I, I1, 9)
            statTotals(4) = statTotals(4) + plyrOff_GAME!(I, I1, 11)
            statTotals(5) = statTotals(5) + (plyrOff_GAME!(I, I1, 8) * 2) + plyrOff_GAME!(I, I1, 10) + threeFG(I, I1, 0)
            statTotals(13) = statTotals(13) + threeFG(I, I1, 0)
            statTotals(14) = statTotals(14) + threeFG(I, I1, 1)
            statTotals(6) = statTotals(6) + plyrOff_GAME!(I, I1, 12)
            statTotals(7) = statTotals(7) + plyrOff_GAME!(I, I1, 14)
            statTotals(8) = statTotals(8) + plyrOff_GAME!(I, I1, 15)
            statTotals(9) = statTotals(9) + plyrOff_GAME!(I, I1, 13)
            statTotals(11) = statTotals(11) + plyrOff_GAME!(I, I1, 24)
            statTotals(12) = statTotals(12) + plyrOff_GAME!(I, I1, 23)
        Next

        If H = 1 Or H = 2 Then

            For I2 = 0 To 14
                QR(I, H, I2) = statTotals(I2) - QR(I, H - 1, I2)
            Next

            For I1 = 0 To 13

                For I2 = 7 To 15
                    QQ(I, H, I1, I2 - 6) = plyrOff_GAME!(I, I1, I2) - QQ(I, H - 1, I1, I2 - 6)
                Next

                QQ(I, H, I1, 10) = threeFG(I, I1, 0) - QQ(I, H - 1, I1, 10)
                QQ(I, H, I1, 11) = threeFG(I, I1, 1) - QQ(I, H - 1, I1, 11)
                QQ(I, H, I1, 12) = plyrOff_GAME!(I, I1, 24) - QQ(I, H - 1, I1, 12)
                QQ(I, H, I1, 13) = plyrOff_GAME!(I, I1, 8) * 2 + plyrOff_GAME!(I, I1, 10) + threeFG(I, I1, 0) - QQ(I, H - 1, I1, 13)
                QQ(I, H, I1, 14) = plyrOff_GAME!(I, I1, 23) - QQ(I, H - 1, I1, 14)

            Next

        End If

        If H = 3 Then

            For I2 = 0 To 14
                QR(I, H, I2) = statTotals(I2) - QR(I, H - 1, I2) - QR(I, H - 2, I2)
            Next

            For I1 = 0 To 13

                For I2 = 7 To 15
                    QQ(I, H, I1, I2 - 6) = plyrOff_GAME!(I, I1, I2) - QQ(I, H - 1, I1, I2 - 6) - QQ(I, H - 2, I1, I2 - 6)
                Next

                QQ(I, H, I1, 10) = threeFG(I, I1, 0) - QQ(I, H - 1, I1, 10) - QQ(I, H - 2, I1, 10)
                QQ(I, H, I1, 11) = threeFG(I, I1, 1) - QQ(I, H - 1, I1, 11) - QQ(I, H - 2, I1, 11)
                QQ(I, H, I1, 12) = plyrOff_GAME!(I, I1, 24) - QQ(I, H - 1, I1, 12) - QQ(I, H - 2, I1, 12)
                QQ(I, H, I1, 13) = plyrOff_GAME!(I, I1, 8) * 2 + plyrOff_GAME!(I, I1, 10) + threeFG(I, I1, 0) - QQ(I, H - 1, I1, 13) - QQ(I, H - 2, I1, 13)
                QQ(I, H, I1, 14) = plyrOff_GAME!(I, I1, 23) - QQ(I, H - 1, I1, 14) - QQ(I, H - 2, I1, 14)

            Next

        End If

        If H = 4 Then

            For I2 = 0 To 14
                QR(I, H, I2) = statTotals(I2) - QR(I, H - 1, I2) - QR(I, H - 2, I2) - QR(I, H - 3, I2)
            Next

            For I1 = 0 To 13

                For I2 = 7 To 15
                    QQ(I, H, I1, I2 - 6) = plyrOff_GAME!(I, I1, I2) - QQ(I, H - 1, I1, I2 - 6) - QQ(I, H - 2, I1, I2 - 6) - QQ(I, H - 3, I1, I2 - 6)
                Next

                QQ(I, H, I1, 10) = threeFG(I, I1, 0) - QQ(I, H - 1, I1, 10) - QQ(I, H - 2, I1, 10) - QQ(I, H - 3, I1, 10)
                QQ(I, H, I1, 11) = threeFG(I, I1, 1) - QQ(I, H - 1, I1, 11) - QQ(I, H - 2, I1, 11) - QQ(I, H - 3, I1, 11)
                QQ(I, H, I1, 12) = plyrOff_GAME!(I, I1, 24) - QQ(I, H - 1, I1, 12) - QQ(I, H - 2, I1, 12) - QQ(I, H - 3, I1, 12)
                QQ(I, H, I1, 13) = plyrOff_GAME!(I, I1, 8) * 2 + plyrOff_GAME!(I, I1, 10) + threeFG(I, I1, 0) - QQ(I, H - 1, I1, 13) - QQ(I, H - 2, I1, 13) - QQ(I, H - 3, I1, 13)
                QQ(I, H, I1, 14) = plyrOff_GAME!(I, I1, 23) - QQ(I, H - 1, I1, 14) - QQ(I, H - 2, I1, 14) - QQ(I, H - 3, I1, 14)

            Next

        End If

        If H = 5 Then

            For I2 = 0 To 14
                QR(I, H, I2) = statTotals(I2) - QR(I, H - 1, I2) - QR(I, H - 2, I2) - QR(I, H - 3, I2) - QR(I, H - 4, I2)
            Next

            For I1 = 0 To 13

                For I2 = 7 To 15
                    QQ(I, H, I1, I2 - 6) = plyrOff_GAME!(I, I1, I2) - QQ(I, H - 1, I1, I2 - 6) - QQ(I, H - 2, I1, I2 - 6) - QQ(I, H - 3, I1, I2 - 6) - QQ(I, H - 4, I1, I2 - 6)
                Next

                QQ(I, H, I1, 10) = threeFG(I, I1, 0) - QQ(I, H - 1, I1, 10) - QQ(I, H - 2, I1, 10) - QQ(I, H - 3, I1, 10) - QQ(I, H - 4, I1, 10)
                QQ(I, H, I1, 11) = threeFG(I, I1, 1) - QQ(I, H - 1, I1, 11) - QQ(I, H - 2, I1, 11) - QQ(I, H - 3, I1, 11) - QQ(I, H - 4, I1, 11)
                QQ(I, H, I1, 12) = plyrOff_GAME!(I, I1, 24) - QQ(I, H - 1, I1, 12) - QQ(I, H - 2, I1, 12) - QQ(I, H - 3, I1, 12) - QQ(I, H - 4, I1, 12)
                QQ(I, H, I1, 13) = plyrOff_GAME!(I, I1, 8) * 2 + plyrOff_GAME!(I, I1, 10) + threeFG(I, I1, 0) - QQ(I, H - 1, I1, 13) - QQ(I, H - 2, I1, 13) - QQ(I, H - 3, I1, 13) - QQ(I, H - 4, I1, 13)
                QQ(I, H, I1, 14) = plyrOff_GAME!(I, I1, 23) - QQ(I, H - 1, I1, 14) - QQ(I, H - 2, I1, 14) - QQ(I, H - 3, I1, 14) - QQ(I, H - 4, I1, 14)

            Next

        End If

        If H = 6 Then

            For I2 = 0 To 14
                QR(I, H, I2) = statTotals(I2) - QR(I, H - 1, I2) - QR(I, H - 2, I2) - QR(I, H - 3, I2) - QR(I, H - 4, I2) - QR(I, H - 5, I2)
            Next

            For I1 = 0 To 13

                For I2 = 7 To 15
                    QQ(I, H, I1, I2 - 6) = plyrOff_GAME!(I, I1, I2) - QQ(I, H - 1, I1, I2 - 6) - QQ(I, H - 2, I1, I2 - 6) - QQ(I, H - 3, I1, I2 - 6) - QQ(I, H - 4, I1, I2 - 6) - QQ(I, H - 5, I1, I2 - 6)
                Next

                QQ(I, H, I1, 10) = threeFG(I, I1, 0) - QQ(I, H - 1, I1, 10) - QQ(I, H - 2, I1, 10) - QQ(I, H - 3, I1, 10) - QQ(I, H - 4, I1, 10) - QQ(I, H - 5, I1, 10)
                QQ(I, H, I1, 11) = threeFG(I, I1, 1) - QQ(I, H - 1, I1, 11) - QQ(I, H - 2, I1, 11) - QQ(I, H - 3, I1, 11) - QQ(I, H - 4, I1, 11) - QQ(I, H - 5, I1, 11)
                QQ(I, H, I1, 12) = plyrOff_GAME!(I, I1, 24) - QQ(I, H - 1, I1, 12) - QQ(I, H - 2, I1, 12) - QQ(I, H - 3, I1, 12) - QQ(I, H - 4, I1, 12) - QQ(I, H - 5, I1, 12)
                QQ(I, H, I1, 13) = plyrOff_GAME!(I, I1, 8) * 2 + plyrOff_GAME!(I, I1, 10) + threeFG(I, I1, 0) - QQ(I, H - 1, I1, 13) - QQ(I, H - 2, I1, 13) - QQ(I, H - 3, I1, 13) - QQ(I, H - 4, I1, 13) - QQ(I, H - 5, I1, 13)
                QQ(I, H, I1, 14) = plyrOff_GAME!(I, I1, 23) - QQ(I, H - 1, I1, 14) - QQ(I, H - 2, I1, 14) - QQ(I, H - 3, I1, 14) - QQ(I, H - 4, I1, 14) - QQ(I, H - 5, I1, 14)

            Next

        End If

        If H = 7 Then

            For I2 = 0 To 14
                QR(I, H, I2) = statTotals(I2) - QR(I, H - 1, I2) - QR(I, H - 2, I2) - QR(I, H - 3, I2) - QR(I, H - 4, I2) - QR(I, H - 5, I2) - QR(I, H - 6, I2)
            Next

            For I1 = 0 To 13

                For I2 = 7 To 15
                    QQ(I, H, I1, I2 - 6) = plyrOff_GAME!(I, I1, I2) - QQ(I, H - 1, I1, I2 - 6) - QQ(I, H - 2, I1, I2 - 6) - QQ(I, H - 3, I1, I2 - 6) - QQ(I, H - 4, I1, I2 - 6) - QQ(I, H - 5, I1, I2 - 6) - QQ(I, H - 6, I1, I2 - 6)
                Next

                QQ(I, H, I1, 10) = threeFG(I, I1, 0) - QQ(I, H - 1, I1, 10) - QQ(I, H - 2, I1, 10) - QQ(I, H - 3, I1, 10) - QQ(I, H - 4, I1, 10) - QQ(I, H - 5, I1, 10) - QQ(I, H - 6, I1, 10)
                QQ(I, H, I1, 11) = threeFG(I, I1, 1) - QQ(I, H - 1, I1, 11) - QQ(I, H - 2, I1, 11) - QQ(I, H - 3, I1, 11) - QQ(I, H - 4, I1, 11) - QQ(I, H - 5, I1, 11) - QQ(I, H - 6, I1, 11)
                QQ(I, H, I1, 12) = plyrOff_GAME!(I, I1, 24) - QQ(I, H - 1, I1, 12) - QQ(I, H - 2, I1, 12) - QQ(I, H - 3, I1, 12) - QQ(I, H - 4, I1, 12) - QQ(I, H - 5, I1, 12) - QQ(I, H - 6, I1, 12)
                QQ(I, H, I1, 13) = plyrOff_GAME!(I, I1, 8) * 2 + plyrOff_GAME!(I, I1, 10) + threeFG(I, I1, 0) - QQ(I, H - 1, I1, 13) - QQ(I, H - 2, I1, 13) - QQ(I, H - 3, I1, 13) - QQ(I, H - 4, I1, 13) - QQ(I, H - 5, I1, 13) - QQ(I, H - 6, I1, 13)
                QQ(I, H, I1, 14) = plyrOff_GAME!(I, I1, 23) - QQ(I, H - 1, I1, 14) - QQ(I, H - 2, I1, 14) - QQ(I, H - 3, I1, 14) - QQ(I, H - 4, I1, 14) - QQ(I, H - 5, I1, 14) - QQ(I, H - 6, I1, 14)

            Next

        End If

    Next

    Erase statTotals

End Sub


'----------------------------------------
'        COMPUTERCOACH Subroutine
'----------------------------------------
'This subroutine guides the computer AI
'in how to handle it's strategy.
Sub COMPUTERCOACH ()

    If P9 = 0 Then I6 = 1
    If P9 = 1 Then I6 = 0

    If score(P9, 0) - score(I6, 0) < 0 Then

        I5 = score(I6, 0) - score(P9, 0)

        RN0 = Int(Rnd(1) * 100) + 1
        If H = 1 And RN0 > 37 Then D2(P9) = 0: P7(P9) = 0: DT%(P9) = 0
        If H = 1 And RN0 > 10 And RN0 <= 36 Then D2(P9) = 2: P7(P9) = 0: DT%(P9) = 2
        If H = 1 And RN0 > 5 And RN0 <= 10 Then D2(P9) = 3: P7(P9) = 0: DT%(P9) = 3
        If H = 1 And RN0 <= 5 Then D2(P9) = 1: P7(P9) = 0: DT%(P9) = 1

        RN0 = Int(Rnd(1) * 100) + 1
        If H = 1 And RN0 <= 15 Then D2(P9) = 0: P7(P9) = 1: DT%(P9) = 4
        If H = 1 And RN0 > 9 And RN0 <= 12 Then D2(P9) = 0: P7(P9) = 3: DT%(P9) = 8
        If H = 1 And RN0 > 6 And RN0 <= 9 Then D2(P9) = 2: P7(P9) = 3: DT%(P9) = 7
        If H = 1 And RN0 > 3 And RN0 <= 6 Then D2(P9) = 1: P7(P9) = 3: DT%(P9) = 9
        If H = 1 And RN0 <= 3 Then D2(P9) = 0: P7(P9) = 4: DT%(P9) = 10

        RN0 = Int(Rnd(1) * 100) + 1
        If H = 2 And gameClock! >= 600 And I5 > 20 And RN0 <= 60 Then D2(P9) = 0: P7(P9) = 0: DT%(P9) = 0
        If H = 2 And gameClock! >= 600 And I5 > 20 And RN0 > 60 And RN0 <= 80 Then D2(P9) = 1: P7(P9) = 0: DT%(P9) = 1
        If H = 2 And gameClock! >= 600 And I5 > 20 And RN0 > 80 And RN0 <= 90 Then D2(P9) = 1: P7(P9) = 2: DT%(P9) = 6
        If H = 2 And gameClock! >= 600 And I5 > 20 And RN0 > 90 And RN0 <= 95 Then D2(P9) = 0: P7(P9) = 4: DT%(P9) = 10
        If H = 2 And gameClock! >= 600 And I5 > 20 And RN0 > 95 Then D2(P9) = 1: P7(P9) = 4: DT%(P9) = 11
        If H = 2 And gameClock! >= 600 And I5 >= 10 And I5 < 20 And RN0 <= 75 Then D2(P9) = 0: P7(P9) = 0: DT%(P9) = 0
        If H = 2 And gameClock! >= 600 And I5 >= 10 And I5 < 20 And RN0 > 75 And RN0 <= 83 Then D2(P9) = 0: P7(P9) = 1: DT%(P9) = 4
        If H = 2 And gameClock! >= 600 And I5 >= 10 And I5 < 20 And RN0 > 83 And RN0 <= 91 Then D2(P9) = 1: P7(P9) = 0: DT%(P9) = 1
        If H = 2 And gameClock! >= 600 And I5 >= 10 And I5 < 20 And RN0 > 91 And RN0 <= 96 Then D2(P9) = 0: P7(P9) = 4: DT%(P9) = 10
        If H = 2 And gameClock! >= 600 And I5 >= 10 And I5 < 20 And RN0 > 96 Then D2(P9) = 1: P7(P9) = 4: DT%(P9) = 11
        If H = 2 And gameClock! >= 600 And I5 < 10 And RN0 <= 70 Then D2(P9) = 0: P7(P9) = 0: DT%(P9) = 0
        If H = 2 And gameClock! >= 600 And I5 < 10 And RN0 > 70 And RN0 <= 75 Then D2(P9) = 1: P7(P9) = 0: DT%(P9) = 1
        If H = 2 And gameClock! >= 600 And I5 < 10 And RN0 > 76 And RN0 <= 85 Then D2(P9) = 2: P7(P9) = 0: DT%(P9) = 2
        If H = 2 And gameClock! >= 600 And I5 < 10 And RN0 > 85 And RN0 <= 93 Then D2(P9) = 0: P7(P9) = 2: DT%(P9) = 5
        If H = 2 And gameClock! >= 600 And I5 < 10 And RN0 > 93 And RN0 <= 97 Then D2(P9) = 3: P7(P9) = 0: DT%(P9) = 3
        If H = 2 And gameClock! >= 600 And I5 < 10 And RN0 > 97 Then D2(P9) = 2: P7(P9) = 4: DT%(P9) = 12
        If H = 2 And gameClock! >= 120 And gameClock! < 600 And I5 > 20 And RN0 <= 70 Then D2(P9) = 0: P7(P9) = 0: DT%(P9) = 0
        If H = 2 And gameClock! >= 120 And gameClock! < 600 And I5 > 20 And RN0 > 70 And RN0 <= 80 Then D2(P9) = 0: P7(P9) = 2: DT%(P9) = 5
        If H = 2 And gameClock! >= 120 And gameClock! < 600 And I5 > 20 And RN0 > 80 And RN0 <= 90 Then D2(P9) = 0: P7(P9) = 4: DT%(P9) = 10
        If H = 2 And gameClock! >= 120 And gameClock! < 600 And I5 > 20 And RN0 > 90 Then D2(P9) = 3: P7(P9) = 4: DT%(P9) = 13
        If H = 2 And gameClock! >= 120 And gameClock! < 600 And I5 > 10 And I5 < 20 And RN0 <= 70 Then D2(P9) = 0: P7(P9) = 0: DT%(P9) = 0
        If H = 2 And gameClock! >= 120 And gameClock! < 600 And I5 > 10 And I5 < 20 And RN0 > 70 And RN0 <= 80 Then D2(P9) = 0: P7(P9) = 2: DT%(P9) = 5
        If H = 2 And gameClock! >= 120 And gameClock! < 600 And I5 > 10 And I5 < 20 And RN0 > 80 And RN0 <= 90 Then D2(P9) = 1: P7(P9) = 4: DT%(P9) = 12
        If H = 2 And gameClock! >= 120 And gameClock! < 600 And I5 > 10 And I5 < 20 And RN0 > 90 Then D2(P9) = 1: P7(P9) = 0: DT%(P9) = 1
        If H = 2 And gameClock! >= 120 And gameClock! < 600 And I5 <= 10 And RN0 <= 70 Then D2(P9) = 0: P7(P9) = 0: DT%(P9) = 0
        If H = 2 And gameClock! >= 120 And gameClock! < 600 And I5 <= 10 And RN0 > 70 And RN0 <= 90 Then D2(P9) = 2: P7(P9) = 0: DT%(P9) = 2
        If H = 2 And gameClock! >= 120 And gameClock! < 600 And I5 <= 10 And RN0 > 90 And RN0 <= 96 Then D2(P9) = 1: P7(P9) = 0: DT%(P9) = 1
        If H = 2 And gameClock! >= 120 And gameClock! < 600 And I5 <= 10 And RN0 > 96 Then D2(P9) = 0: P7(P9) = 4: DT%(P9) = 10
        If H = 2 And gameClock! < 120 And I5 > 10 And RN0 <= 50 Then D2(P9) = 1: P7(P9) = 4: DT%(P9) = 11
        If H = 2 And gameClock! < 120 And I5 > 10 And RN0 > 50 Then D2(P9) = 3: P7(P9) = 4: DT%(P9) = 13
        If H = 2 And gameClock! < 120 And I5 <= 10 And I5 > 4 Then D2(P9) = 3: P7(P9) = 5: DT%(P9) = 14
        If H = 2 And gameClock! < 120 And I5 <= 4 And RN0 <= 25 Then D2(P9) = 0: P7(P9) = 2: DT%(P9) = 5
        If H = 2 And gameClock! < 120 And I5 <= 4 And RN0 > 25 And RN0 <= 50 Then D2(P9) = 1: P7(P9) = 2: DT%(P9) = 6
        If H = 2 And gameClock! < 120 And I5 <= 4 And RN0 > 50 And RN0 <= 75 Then D2(P9) = 1: P7(P9) = 4: DT%(P9) = 11
        If H = 2 And gameClock! < 120 And I5 <= 4 And RN0 > 75 Then D2(P9) = 3: P7(P9) = 4: DT%(P9) = 13
        If H > 2 And RN0 <= 50 Then D2(P9) = 0: P7(P9) = 0: DT%(P9) = 0
        If H > 2 And RN0 > 50 Then D2(P9) = 2: P7(P9) = 0: DT%(P9) = 2

    Else

        RN0 = Int(Rnd(1) * 100) + 1
        DT%(P9) = 0
        D2(P9) = 0
        P7(P9) = 0

        Select Case RN0
            Case 1 To 10
                D2(P9) = 1
                DT%(P9) = 1
                P7(P9) = 0
            Case 11 To 36
                D2(P9) = 2
                DT%(P9) = 2
                P7(P9) = 0
            Case 37 To 100
                DT%(P9) = 0
                D2(P9) = 0
                P7(P9) = 0
        End Select

        RN0 = Int(Rnd(1) * 100) + 1

        Select Case RN0
            Case 1 To 5
                P7(P9) = 1
                DT%(P9) = 4
                D2(P9) = 0
            Case 6 To 9
                P7(P9) = 3
                DT%(P9) = 8
                D2(P9) = 0
            Case 10
                P7(P9) = 3
                DT%(P9) = 7
                D2(P9) = 2
                'Nothing for 11 to 100
        End Select

    End If

    RN0 = Int(Rnd(1) * 100) + 1

    If H = 1 Then

        Select Case RN0
            Case 1 To 80
                OF%(P9) = 0
            Case 81 To 90
                OF%(P9) = 1
            Case 91 To 100
                OF%(P9) = 2
        End Select

    End If

    If H >= 2 And score(P9, 0) - score(I6, 0) < 0 Then

        If RN0 <= 80 Then
            OF%(P9) = 0
        Else
            'R0 > 80
            OF%(P9) = 1
        End If

    End If

    If H >= 2 And score(P9, 0) - score(I6, 0) >= 0 Then

        If RN0 <= 80 Then
            OF%(P9) = 0
        Else
            'RN0 > 80
            OF%(P9) = 2
        End If

    End If

    If H >= 2 And gameClock! <= 180 And score(P9, 0) - score(I6, 0) < 0 Then

        If RN0 <= 30 Then
            OF%(P9) = 3
        Else
            'RN0 <= 30
            OF%(P9) = 4
        End If

    End If

    If H >= 2 And gameClock! <= 60 And threePtOpt = 1 And (score(P9, 0) - score(1 - P9, 0) = -3 Or score(P9, 0) - score(1 - P9, 0) = -6) Then OF%(P9) = 9

End Sub


'----------------------------------------
'         STAMINASORT Subroutine
'----------------------------------------
'This subroutine PRESUMABLY sorts players
'by their current stamina.
Sub STAMINASORT ()
    M = 13
    L = 12

    8802 '
    S6 = 0
    S7 = 0

    8803 '
    H1 = 0
    H2 = 0

    If plyrStamina(S6) > plyrStamina(S6 + 1) Then
        H1 = plyrStamina(S6)
        H2 = F1(S6)
        plyrStamina(S6) = plyrStamina(S6 + 1)
        F1(S6) = F1(S6 + 1)
        plyrStamina(S6 + 1) = H1
        F1(S6 + 1) = H2
        S7 = S6
    End If

    S6 = S6 + 1

    If S6 <= L Then
        GoTo 8803
    End If

    If S7 <> 0 Then
        L = S7 - 1
        GoTo 8802
    End If

End Sub


'----------------------------------------
'        LASTFIVEMENU Subroutine
'----------------------------------------
'This subroutine simply prints a menu of
'all the user options for the last 5 sec.
'of the game
Sub LASTFIVEMENU ()

    Call FRAMEOPTION(12, P)
    Locate 10, 15

    Print gameTeams$(P); " LAST 5 SEC STRATEGY:"

    Locate 12, 14
    Locate , 14: Print Using "TIME REMAINING #.#"; gameClock!
    Locate , 14: Print "                                     TIME REQD"
    Locate , 14: Print "0 - FULL COURT PASS (SHOOT A 2)      0.1 - 3.0"
    Locate , 14: Print "1 - FULL COURT PASS (SHOOT A 3)      0.1 - 3.0"
    Locate , 14: Print "2 - SHOOT FROM BACKCOURT             0.1 - 0.5"
    Locate , 14: Print "3 - GET TO HALF COURT, CALL TIME OUT 1.5 - 2.5"
    Locate , 14: Print "4 - WORK DOWN THE FLOOR FOR A 3      3.0 - 4.0"
    Locate , 14: Print "5 - WORK DOWN THE FLOOR FOR A 2      3.0 - 5.0"

End Sub


'----------------------------------------
'          LASTSHOT Subroutine
'----------------------------------------
'This subroutine handles calculations for
'the clock and playtime with the last shot.
Sub LASTSHOT ()

    M5 = 0

    If gameClock! <= 2 Or IN = 99 Then
        M5 = 1
    Else
        If gameClock! > 2 And gameClock! <= 4 Then M5 = 2
        If gameClock! > 4 And gameClock! <= 16 Then M5 = Int(Rnd(1) * 2) + 3
        If gameClock! > 16 Then M5 = Int(Rnd(1) * 3) + 5
    End If

    timeElapsed! = M5

    Call AdjustPlayTime

    gameClock! = gameClock! - M5
    IN = 0

    If sClockVal >= 1 Then shotClock = shotClock - M5

    Call CheckGameShotClock

End Sub


'----------------------------------------
'       CheckGameClock Subroutine
'----------------------------------------
'This subroutine checks the game clock
'and resets it if expired
Sub CheckGameClock ()

    If gameClock! <= 0 Then
        timeElapsed! = gameClock!
        Call AdjustPlayTime
        gameClock! = 0
    End If

End Sub


'----------------------------------------
'     CheckGameShotClock Subroutine
'----------------------------------------
'This subroutine checks if either the game
'clock and shot clock have expired, and
'zeros them out if so. UPDATESCREEN is
'called to update the clock on the board.
Sub CheckGameShotClock ()


    If gameClock! <= .001 Then
        timeElapsed! = gameClock!
        Call AdjustPlayTime
        gameClock! = 0
    End If

    If shotClock <= 0 Then
        shotClock = shotClock - shotClock
        gameClock! = gameClock! - shotClock
        timeElapsed! = shotClock
        Call AdjustPlayTime
    End If

    Call UPDATESCREEN

End Sub


'----------------------------------------
'       AdjustPlayTime Subroutine
'----------------------------------------
'This subroutine increases the play time
'for each active player
Sub AdjustPlayTime ()

    ' *** INCREMENT MINUTES ***
    For I3 = 0 To 1

        For I4 = 0 To 4
            timePlayed(I3, B1(I3, I4)) = timePlayed(I3, B1(I3, I4)) + timeElapsed!
        Next

    Next

End Sub


'----------------------------------------
'       ResetShotClock Subroutine
'----------------------------------------
'This subroutine resets the shot clock.
'It uses defined setting value in order
'to determine how much time to add.
'A possible rewrite of the function
'would see it simply accept the amount
'of time as a parameter instead, but
'that would be harder to control for any
'invalid values that might get passed.
Sub ResetShotClock ()

    If sClockVal > 0 Then

        Select Case sClockVal
            Case 1: shotClock = 45
            Case 2: shotClock = 35
            Case 3: shotClock = 30
        End Select

        LS = 4

        If gameClock! < 46 And shotClock >= gameClock! Or H > 2 And gameClock! = 300 Then Locate 5, 5: Print "     "

        If gameClock! < 6 And LS = 4 And LT <> 4 Then F! = 5

    End If

End Sub


'----------------------------------------
'       AdjustShotClock Subroutine
'----------------------------------------
'This subroutine substracts time from
'the shot clock based on the time that
'has elapsed during game play.
Sub AdjustShotClock ()

    If sClockVal >= 1 Then
        shotClock = shotClock - timeElapsed!
    End If

    'Shot clock expired
    If shotClock < 0 Then

        'shotClock = 0?
        shotClock = shotClock - shotClock

        'gameClock = no change?
        gameClock! = gameClock! - shotClock

        'timeElapsed = 0
        timeElapsed! = shotClock

        Call AdjustPlayTime

    End If

End Sub


'----------------------------------------
'           OPTIONS Subroutine
'----------------------------------------
'This subroutine gives you a small menu
'for changing some of the game options
'(such as pbp delay, coaching mode) in
'the middle of game play.
Sub OPTIONS ()

    Shared playMode$()

	Screen , , 0, 0

    Call INFO

    Do

        Color , 0
        Locate 3, 1
        Color 14: Print "(1) ";
        Color 15: Print playMode$(playerOpt)
        Color 14: Print "(2) ";
        Color 15: Print Using "PLAY-BY-PLAY DELAY: #.# "; pbpDelay!
        Print
        Color 14: Print "<ENTER> ";
        Color 15: Print "RETURN TO GAME PLAY"

        Do
            Color 7, 0
            'Locate 24, 1: Print "HIT ANY KEY TO CONTINUE";
            I$ = GetKeyPress$
            I = Val(I$)
        Loop Until I >= 0 And I <= 2

        Select Case I 
            Case 1
                playerOpt = playerOpt + 1
                If playerOpt > 3 Then playerOpt = 0
            Case 2
                Locate 4, 23: Input pbpDelay!
        End Select

        ' Determine computer team
        Select Case playerOpt

            Case 1:
                playerMode = 1
                compTeam = 0

            Case 2:
                playerMode = 1
                compTeam = 1

            Case 3:
                playerMode = 2

        End Select

    Loop Until I$ = Chr$(13)

	Screen , , 0, 0
    Call SCOREBOARD

End Sub


'----------------------------------------
'           EVENTS Subroutine
'----------------------------------------
'This subroutine works with another to
'look for any events that meet the limits
'for "special". If found, it will create
'a corresponding "special" box score
Sub EVENTS (specialCount, specialStat)

    If _FileExists("EVENTS.BOX") Then

        Open "EVENTS.BOX" For Input As #1

        For X = 1 To 13
            Input #1, eventSettings(X)
        Next

        Close #1

        checkSpecial% = 0

        'Team / game conditions for special box score
        If H - 3 > eventSettings(1) Or score(1, 0) + score(0, 0) > eventSettings(2) Or R3!(0) + R3!(1) > eventSettings(3) Or score(1, 0) > eventSettings(4) Or score(0, 0) > eventSettings(4) Or R3!(1) > eventSettings(5) Or R3!(0) > eventSettings(5) Then

            checkSpecial% = 1

        Else

            For I = 0 To 1

                For I1 = 0 To 13

                    'Player conditions for special box score
                    'FGM * 2 + FTM + 3FM = Points / Game
                    If plyrOff_GAME!(I, I1, 8) * 2 + plyrOff_GAME!(I, I1, 10) + threeFG(I, I1, 0) > eventSettings(6) Or plyrOff_GAME!(I, I1, 11) > eventSettings(7) Or plyrOff_GAME!(I, I1, 14) > eventSettings(8) Or plyrOff_GAME!(I, I1, 15) > eventSettings(9) Or plyrOff_GAME!(I, I1, 13) > eventSettings(10) Or threeFG(I, I1, 0) > eventSettings(11) Then
                        checkSpecial% = 1
                    End If

                    If checkSpecial% = 1 Then Exit For

                Next

                If checkSpecial% = 1 Then Exit For

            Next 'done checking if special event already found

        End If

    End If 'Done checking EVENTS.BOX file

    If checkSpecial% = 1 Then
        Call FoundSpecial(specialCount, specialStat)
    End If

End Sub


'----------------------------------------
'        FoundSpecial Subroutine
'----------------------------------------
'This subroutine simply counts how many
'special boxscore files already exist, so
'that it an assign a unique number to the
'boxscore about to be created.
Sub FoundSpecial (specialCount, specialStat)

    'Get count of SPC files to determine
    'number to assign next one
    Spec$ = diskPaths$(1) + "*.BSS"
    specialCount = FileCount%(Spec$)
    specialCount = specialCount + 1
    specialStat = 1

End Sub


'----------------------------------------
'          POSTGAME Subroutine
'----------------------------------------
'This subroutine processes everything that
'is necessary after a game is complete.
'It checks for records / special events,
'handles a prompt for stats, and saving
'of stats.
Sub POSTGAME ()

    Call CheckRecords
    Call EVENTS(specialCount, specialStat)
    endGame = 1

    Do

        Color 15, 0
        Cls

        Color 14: Print "(0) ";
        Color 15: Print "STATS TO SCREEN"
        Print

        Color 14: Print "(1) ";
        Color 15: Print "STATS TO PRINTER"
        Print

        Color 14: Print "(2) ";
        Color 15: Print "STATS TO TEXT FILE"

        If autoPlay = 1 And playerMode = 2 Then
            X = 2
        Else
            Do
                I$ = GetKeyPress$
                X = Val(I$)
            Loop Until X >= 0 And X <= 2
        End If

        Call BOXOPTIONS(X)
        Call TICKER

        'Reset option for next call
        If X <> 0 Then X = 0

        'Prompt to display stats again
        Color 15, 0
        Cls

        If Not (autoPlay = 1 And playerMode = 2) Then

            Do
                'Using Home Team's color for the box
                Call TEAMBOX(1, 1)
                U$ = "DISPLAY STATS AGAIN (YN)"
                Locate 7, (80 - Len(U$)) / 2
                Print U$
                Color 15, 0
                I$ = GetKeyPress$
            Loop Until UCase$(I$) = "Y" Or UCase$(I$) = "N"

        End If

    Loop Until UCase$(I$) = "N" Or (autoPlay = 1 And playerMode = 2)

    'If we had special events
    If specialStat = 1 Then

        NM$ = "BOXSCORE" + Mid$(Str$(specialCount), 2, Len(Str$(specialCount))) + ".BSS"

        'Append special events
        Call BOX2SPC(NM$)

        Call BOX2FILE(2, NM$, specialStat)

    End If

    Call SAVESTATS

    endGame = 0
    specialStat = 0
    'Close #7

End Sub


'----------------------------------------
'         BOXOPTIONS Subroutine
'----------------------------------------
'This subroutine takes appropriate action
'for the output of the box file, which
'depends on the choice given to it.

' PARAMETER outputChoice
'    represents menu choice
'       0 = Display on screen
'       1 = Send to printer
'       2 = Save to file

'The option to send to printer will first
'create a temporary file, then loop THROUGH
'it to print each line.
Sub BOXOPTIONS (outputChoice)

    Shared scheduleFile$

    Select Case outputChoice

        Case 0:
            Call BOX2SCREEN

        Case 1, 2:
            If outputChoice = 1 Then
                'Printer = temporary file
                boxFile$ = "TEMPBOX"
            Else
                'File = prompt | auto-create
                If autoPlay <> 1 Then
                    Cls
                    Print "ENTER 8-CHARACTER FILENAME FOR BOXSCORE (NO SPACES OR PERIODS)";: Input boxFile$
                    boxFile$ = boxFile$ + ".BSS"
                Else
                    'ScheduleName_GameXXX.BS
                    NM$ = Mid$(scheduleFile$, 1, Len(scheduleFile$) - 4) + "_GAME" + Mid$(Str$(schedGame(0) + schedGame(2)), 2, Len(Str$(schedGame(0) + schedGame(2)))) + ".BS"
                End If

            End If

            'Includes a special option to send to printer when done
            Call BOX2FILE(outputChoice, boxFile$, specialStat)

    End Select

End Sub


'----------------------------------------
'         BOX2SCREEN Subroutine
'----------------------------------------
'This subroutine formats the boxscore
'for output to the end user display
Sub BOX2SCREEN ()

    Shared actualAttendance&

    Cls

    Color 14
    If gameLoc = 2 Then
        Print "SITE: ";
        Color 15
        Print "NEUTRAL"
    Else
        Print "SITE: ";
        Color 15
        Print gameArena$(gameLoc)
    End If

    Color 14
    Print "ATTENDANCE: ";
    Color 15
    Print Using "###,###"; actualAttendance&
    Print

    Call ScoreSummary

    If Not (autoPlay = 1 And playerMode = 2) Then
        Locate 24, 1: Print "HIT ANY KEY TO CONTINUE";
        I$ = GetKeyPress
    End If

    Call STATS2SCREEN

End Sub


'----------------------------------------
'        ScoreSummary Subroutine
'----------------------------------------
'This subroutine prints a score by period
'for each team.
Sub ScoreSummary ()

    Locate 4, 17
    Color 14

    If halfTime = 1 Then
        Print "H1 "; Tab(25); "GAME"
    Else
        Print "H1 H2 ";

        If score(0, 1) + score(0, 2) = score(1, 1) + score(1, 2) Then

            Locate , 23
            Print "O1 ";

            If score(0, 1) + score(0, 2) + score(0, 3) = score(1, 1) + score(1, 2) + score(1, 3) Then
                Locate , 26
                Print "O2 ";

                If score(0, 1) + score(0, 2) + score(0, 3) + score(0, 4) = score(1, 1) + score(1, 2) + score(1, 3) + score(1, 4) Then
                    Locate , 29
                    Print "O3 ";

                    If score(0, 1) + score(0, 2) + score(0, 3) + score(0, 4) + score(0, 5) = score(1, 1) + score(1, 2) + score(1, 3) + score(1, 4) + score(1, 5) Then
                        Locate , 32
                        Print "O4 ";

                        If score(0, 1) + score(0, 2) + score(0, 3) + score(0, 4) + score(0, 5) + score(0, 6) = score(1, 1) + score(1, 2) + score(1, 3) + score(1, 4) + score(1, 5) + score(1, 6) Then
                            Locate , 35
                            Print "O5";
                            Locate , 40
                            Print "GAME"
                        Else
                            Locate , 37
                            Print "GAME"
                        End If
                    Else
                        Locate , 34
                        Print "GAME"
                    End If
                Else
                    Locate , 31
                    Print "GAME"
                End If
            Else
                Locate , 28
                Print "GAME"
            End If
        Else
            Locate , 25
            Print "GAME"
        End If

    End If

    Color 15, 0

    For I = 0 To 1:

        Locate 5 + I
        Color teamRat_GAME(I, 0), teamRat_GAME(I, 1)
        Print gameTeams$(I);

        Color 15, 0

        If halfTime = 1 Then
            Print Tab(16); Str$(score(I, 1)); Tab(22); " - "; score(I, 0)
        Else
            Print Tab(16); Str$(score(I, 1)); Tab(19); Str$(score(I, 2));

            If score(0, 1) + score(0, 2) = score(1, 1) + score(1, 2) Then
                Locate , 22: Print Str$(score(I, 3));

                If score(0, 1) + score(0, 2) + score(0, 3) = score(1, 1) + score(1, 2) + score(1, 3) Then
                    Locate , 25: Print Str$(score(I, 4));

                    If score(0, 1) + score(0, 2) + score(0, 3) + score(0, 4) = score(1, 1) + score(1, 2) + score(1, 3) + score(1, 4) Then
                        Locate , 28: Print Str$(score(I, 5));

                        If score(0, 1) + score(0, 2) + score(0, 3) + score(0, 4) + score(0, 5) = score(1, 1) + score(1, 2) + score(1, 3) + score(1, 4) + score(1, 5) Then
                            Locate , 31: Print Str$(score(I, 6));

                            If score(0, 1) + score(0, 2) + score(0, 3) + score(0, 4) + score(0, 5) + score(0, 6) = score(1, 1) + score(1, 2) + score(1, 3) + score(1, 4) + score(1, 5) + score(1, 6) Then
                                Locate , 35: Print Str$(score(I, 7)); " -  "; Str$(score(I, 0))
                            Else
                                Locate , 34: Print " - "; Str$(score(I, 0))
                            End If

                        Else
                            Locate , 31: Print " - "; Str$(score(I, 0))
                        End If

                    Else
                        Locate , 28: Print " - "; Str$(score(I, 0))
                    End If

                Else
                    Locate , 25: Print " - "; score(I, 0)
                End If

            Else
                Locate , 22: Print " - "; score(I, 0)
            End If

        End If

    Next I

End Sub


'----------------------------------------
'          BOX2FILE Subroutine
'----------------------------------------
'This subroutine formats the boxscore for
'an output file.

' PARAMETER printChoice
'    choice to print file vs. saving it

'The option to send to printer will first
'create a temporary file, then loop THROUGH
'it to print each line.
Sub BOX2FILE (printChoice, NM$, isSpecial)
    
    Shared actualAttendance&
    
    If isSpecial = 1 Then
        'special scores come after the events
        Open diskPaths$(1) + NM$ For Append As #1
    Else
        Open diskPaths$(1) + NM$ For Output As #1
    End If

    If gameLoc = 2 Then
        Print #1, "SITE: NEUTRAL"
    Else
        Print #1, "SITE: "; gameArena$(gameLoc)
    End If

    Print #1, Using "ATTENDANCE: ###,###"; actualAttendance&
    Print #1,

    Print #1, ; Tab(17); "H1 H2 ";

    If score(0, 1) + score(0, 2) = score(1, 1) + score(1, 2) Then
        Print #1, ; Tab(23); "O1 ";

        If score(0, 1) + score(0, 2) + score(0, 3) = score(1, 1) + score(1, 2) + score(1, 3) Then
            Print #1, ; Tab(26); "O2 ";

            If score(0, 1) + score(0, 2) + score(0, 3) + score(0, 4) = score(1, 1) + score(1, 2) + score(1, 3) + score(1, 4) Then
                Print #1, ; Tab(29); "O3 ";

                If score(0, 1) + score(0, 2) + score(0, 3) + score(0, 4) + score(0, 5) = score(1, 1) + score(1, 2) + score(1, 3) + score(1, 4) + score(1, 5) Then
                    Print #1, ; Tab(32); "O4 ";

                    If score(0, 1) + score(0, 2) + score(0, 3) + score(0, 4) + score(0, 5) + score(0, 6) = score(1, 1) + score(1, 2) + score(1, 3) + score(1, 4) + score(1, 5) + score(1, 6) Then
                        Print #1, ; Tab(35); "O5";
                        Print #1, ; Tab(40); "GAME"
                    Else
                        Print #1, ; Tab(37); "GAME"
                    End If
                Else
                    Print #1, ; Tab(34); "GAME"
                End If
            Else
                Print #1, ; Tab(31); "GAME"
            End If
        Else
            Print #1, ; Tab(28); "GAME"
        End If
    Else
        Print #1, ; Tab(25); "GAME"
    End If

    For I = 0 To 1

        Print #1, gameTeams$(I); Tab(16); Str$(score(I, 1)); Tab(19); Str$(score(I, 2));

        If score(0, 1) + score(0, 2) = score(1, 1) + score(1, 2) Then

            Print #1, ; Tab(22); Str$(score(I, 3));

            If score(0, 1) + score(0, 2) + score(0, 3) = score(1, 1) + score(1, 2) + score(1, 3) Then
                Print #1, ; Tab(25); Str$(score(I, 4));

                If score(0, 1) + score(0, 2) + score(0, 3) + score(0, 4) = score(1, 1) + score(1, 2) + score(1, 3) + score(1, 4) Then
                    Print #1, ; Tab(28); Str$(score(I, 5));

                    If score(0, 1) + score(0, 2) + score(0, 3) + score(0, 4) + score(0, 5) = score(1, 1) + score(1, 2) + score(1, 3) + score(1, 4) + score(1, 5) Then
                        Print #1, ; Tab(31); Str$(score(I, 6));

                        If score(0, 1) + score(0, 2) + score(0, 3) + score(0, 4) + score(0, 5) + score(0, 6) = score(1, 1) + score(1, 2) + score(1, 3) + score(1, 4) + score(1, 5) + score(1, 6) Then
                            Print #1, ; Tab(35); Str$(score(I, 7)); " -  "; Str$(score(I, 0))
                        Else
                            Print #1, ; Tab(34); " - "; Str$(score(I, 0))
                        End If
                    Else
                        Print #1, ; Tab(31); " - "; Str$(score(I, 0))
                    End If
                Else
                    Print #1, ; Tab(28); " - "; Str$(score(I, 0))
                End If
            Else
                Print #1, ; Tab(25); " - "; score(I, 0)
            End If
        Else
            Print #1, ; Tab(22); " - "; score(I, 0)
        End If

    Next I

    For I = 0 To 1:

        Print #1,
        Print #1, gameTeams$(I)
        Print #1, "NAME"; Tab(14); " MIN   FG- A 3FG- A  FT- A ORB REB PTS PF  AST BLK STL TO"

        Erase statTotals

        For I1 = 0 To 13

            If players$(I, I1) <> "XXX" Then

                'Player Name
                Print #1, players$(I, I1); Tab(14);

                'Player Time
                If timePlayed(I, I1) = 0 Then
                    Print #1, ; Tab(15); "DNP";
                Else
                    Print #1, Using "##"; Int(timePlayed(I, I1) / 60);: Print #1, ":";

                    If timePlayed(I, I1) - Int(timePlayed(I, I1) / 60) * 60 > 9 Then
                        Print #1, Using "##"; timePlayed(I, I1) - Int(timePlayed(I, I1) / 60) * 60;
                    Else
                        Print #1, "0";: Print #1, Using "#"; timePlayed(I, I1) - Int(timePlayed(I, I1) / 60) * 60;
                    End If
                End If

                Print #1, ; Tab(21);

                'FGM - FGA
                Print #1, Using "##"; plyrOff_GAME!(I, I1, 8);
                Print #1, "-";
                Print #1, Using "##"; plyrOff_GAME!(I, I1, 7);

                '3FGM - 3FGA
                Print #1, Using "  ##"; threeFG(I, I1, 0);
                Print #1, "-";
                Print #1, Using "##"; threeFG(I, I1, 1);

                'FTM - FTA
                Print #1, Using "  ##"; plyrOff_GAME!(I, I1, 10);
                Print #1, "-";
                Print #1, Using "##"; plyrOff_GAME!(I, I1, 9);

                'Rebounds / PT / F / A /  B / S / TO
                Print #1, Using "  ##  ## ###  #  ##  ##  ##  ##  ##  ##"; plyrOff_GAME!(I, I1, 24), plyrOff_GAME!(I, I1, 11), plyrOff_GAME!(I, I1, 8) * 2 + plyrOff_GAME!(I, I1, 10) + threeFG(I, I1, 0), plyrOff_GAME!(I, I1, 12), plyrOff_GAME!(I, I1, 14), plyrOff_GAME!(I, I1, 15), plyrOff_GAME!(I, I1, 13), plyrOff_GAME!(I, I1, 23)

                statTotals(0) = statTotals(0) + plyrOff_GAME!(I, I1, 8)
                statTotals(1) = statTotals(1) + plyrOff_GAME!(I, I1, 7)
                statTotals(2) = statTotals(2) + plyrOff_GAME!(I, I1, 10)
                statTotals(3) = statTotals(3) + plyrOff_GAME!(I, I1, 9)
                statTotals(4) = statTotals(4) + plyrOff_GAME!(I, I1, 11)
                statTotals(5) = statTotals(5) + (plyrOff_GAME!(I, I1, 8) * 2) + plyrOff_GAME!(I, I1, 10) + threeFG(I, I1, 0)
                statTotals(13) = statTotals(13) + threeFG(I, I1, 0)
                statTotals(14) = statTotals(14) + threeFG(I, I1, 1)
                statTotals(6) = statTotals(6) + plyrOff_GAME!(I, I1, 12)
                statTotals(7) = statTotals(7) + plyrOff_GAME!(I, I1, 14)
                statTotals(8) = statTotals(8) + plyrOff_GAME!(I, I1, 15)
                statTotals(9) = statTotals(9) + plyrOff_GAME!(I, I1, 13)
                statTotals(11) = statTotals(11) + plyrOff_GAME!(I, I1, 24)
                statTotals(12) = statTotals(12) + plyrOff_GAME!(I, I1, 23)
                statTotals(10) = statTotals(10) + timePlayed(I, I1)

            End If

        Next I1

        If statTotals(3) = 0 Then statTotals(3) = 1

        Print #1,
        Print #1, "TOTALS"; Tab(14); Int(statTotals(10) / 60); Tab(21);

        Print #1, Using "##"; statTotals(0);
        Print #1, "-";
        Print #1, Using "###"; statTotals(1);

        Print #1, ; Tab(28);
        Print #1, Using "##"; statTotals(13);
        Print #1, "-";
        Print #1, Using "##"; statTotals(14);

        Print #1, ; Tab(35);
        Print #1, Using "##"; statTotals(2);
        Print #1, "-";
        Print #1, Using "##"; statTotals(3);

        Print #1, ; Tab(42);
        Print #1, Using "##  ## ### ##  ##  ##  ##  ##"; statTotals(11), statTotals(4), statTotals(5), statTotals(6), statTotals(7), statTotals(8), statTotals(9), statTotals(12)

        Print #1, ; Tab(22); Int(((statTotals(0) / statTotals(1)) * 100) + .5); "%"; Tab(35); Int(((statTotals(2) / statTotals(3)) * 100) + .5); "%"

        Print #1,
        Print #1, "TOTAL TURNOVERS -"; turnovers(I)
        Print #1, "TOTAL REBOUNDS  -"; R3!(I)

    Next I

    Print #1,

    '-- The code below was used to print
    '-- disabled players in the boxscore
    '-- output so that they could be easily identified.
    'Print #1, "BENCH WARMERS"
    '--Print #1, "DISABLED BUT PLAYED"

    'For I = 0 To 1

    '    For I1 = 0 To 13

    '        'If players$(I, I1) <> "XXX" And B%(I, I1) = -1 Then
    '--If players$(I, I1) <> "XXX" And B%(I, I1) = -1 And timePlayed(I, I1) > 0 Then
    '            Print #1, players$(I, I1); " ["; gameTeams$(I); "]"
    '        End If

    '    Next I1

    'Next I

    If printChoice = 1 Then Print #1, Chr$(12)

    Close #1

    If printChoice = 1 Then

        Open diskPaths$(1) + NM$ For Input As #2

        Do
            Line Input #2, X$
            LPrint X$
        Loop While Left$(X$, 1) <> Chr$(12)

        Close #2

        Kill "TEMPBOX"

    End If

End Sub


'----------------------------------------
'           BOX2SPC Subroutine
'----------------------------------------
'This subroutine adds any special event
'information to a boxscore file
Sub BOX2SPC (NM$)

    Open diskPaths$(1) + NM$ For Append As #1

    Print #1,

    'Output any special events
    If H - 3 > eventSettings(1) Then Print #1, Using "MORE THAN ## OVERTIMES"; eventSettings(1)
    If score(1, 0) + score(0, 0) > eventSettings(2) Then Print #1, Using "MORE THAN ### COMBINED POINTS"; eventSettings(2)
    If R3!(0) + R3!(1) > eventSettings(3) Then Print #1, Using "MORE THAN ### COMBINED REBOUNDS"; eventSettings(3)
    If score(0, 0) > eventSettings(4) Then Print #1, gameTeams$(0);: Print #1, Using " SCORED MORE THAN ### POINTS"; eventSettings(4)
    If score(1, 0) > eventSettings(4) Then Print #1, gameTeams$(1);: Print #1, Using " SCORED MORE THAN ### POINTS"; eventSettings(4)
    If R3!(0) > eventSettings(5) Then Print #1, gameTeams$(0);: Print #1, Using " HAD MORE THAN ### REBOUNDS"; eventSettings(5)
    If R3!(1) > eventSettings(5) Then Print #1, gameTeams$(1);: Print #1, Using " HAD MORE THAN ### REBOUNDS"; eventSettings(5)

    For I = 0 To 1
        For I1 = 0 To 13
            If plyrOff_GAME!(I, I1, 8) * 2 + plyrOff_GAME!(I, I1, 10) + threeFG(I, I1, 0) > eventSettings(6) Then Print #1, players$(I, I1);: Print #1, Using " SCORED MORE THAN ### POINTS"; eventSettings(6)
            If plyrOff_GAME!(I, I1, 11) > eventSettings(7) Then Print #1, players$(I, I1);: Print #1, Using " HAD MORE THAN ### REBOUNDS"; eventSettings(7)
            If plyrOff_GAME!(I, I1, 14) > eventSettings(8) Then Print #1, players$(I, I1);: Print #1, Using " HAD MORE THAN ### ASSISTS"; eventSettings(8)
            If plyrOff_GAME!(I, I1, 15) > eventSettings(9) Then Print #1, players$(I, I1);: Print #1, Using " BLOCKED MORE THAN ### SHOTS"; eventSettings(9)
            If plyrOff_GAME!(I, I1, 13) > eventSettings(10) Then Print #1, players$(I, I1);: Print #1, Using " HAD MORE THAN ### STEALS"; eventSettings(10)
            If threeFG(I, I1, 0) > eventSettings(11) Then Print #1, players$(I, I1);: Print #1, Using " MADE MORE THAN ### 3-PT FIELD GOALS"; eventSettings(11)
        Next
    Next

    Print #1,

    Close #1

End Sub


'----------------------------------------
'        STATS2SCREEN Subroutine
'----------------------------------------
'This subroutine formats the game stats
'for output to the end user display
Sub STATS2SCREEN

    For I = 0 To 1:

        Cls

        Color teamRat_GAME(I, 0), teamRat_GAME(I, 1)
        Print gameTeams$(I)

        Color 14, 0
        Print "NAME"; Tab(14); " MIN   FG- A 3FG- A  FT- A ORB REB PTS PF  AST BLK STL TO"

        Erase statTotals

        For I1 = 0 To 13

            If players$(I, I1) <> "XXX" And timePlayed(I, I1) <> 0 Then

                Color 15

                'Name
                Print players$(I, I1); Tab(14);

                'Minutes
                If timePlayed(I, I1) <> 0 Then
                    Print Using "##"; Int(timePlayed(I, I1) / 60);
                    Print ":";
                    If timePlayed(I, I1) - Int(timePlayed(I, I1) / 60) * 60 > 9 Then
                        Print Using "##"; timePlayed(I, I1) - Int(timePlayed(I, I1) / 60) * 60;
                    Else
                        Print "0";
                        Print Using "#"; timePlayed(I, I1) - Int(timePlayed(I, I1) / 60) * 60;
                    End If
                End If

                Locate , 21

                'FG
                Print Using "##"; plyrOff_GAME!(I, I1, 8);
                Print "-";
                Print Using "##"; plyrOff_GAME!(I, I1, 7);

                '3FG
                Print Using "  ##"; threeFG(I, I1, 0);
                Print "-";
                Print Using "##"; threeFG(I, I1, 1);

                'FT
                Print Using "  ##"; plyrOff_GAME!(I, I1, 10);
                Print "-";
                Print Using "##"; plyrOff_GAME!(I, I1, 9);

                'ORB / RB / PT / F / A /  B / S / TO
                Print Using "  ##  ## ###  #  ##  ##  ##  ##  ##  ##"; plyrOff_GAME!(I, I1, 24), plyrOff_GAME!(I, I1, 11), plyrOff_GAME!(I, I1, 8) * 2 + plyrOff_GAME!(I, I1, 10) + threeFG(I, I1, 0), plyrOff_GAME!(I, I1, 12), plyrOff_GAME!(I, I1, 14), plyrOff_GAME!(I, I1, 15), plyrOff_GAME!(I, I1, 13), plyrOff_GAME!(I, I1, 23);

                If timePlayed(I, I1) = 0 Then Locate , 15: Print "DNP" Else Print

                statTotals(0) = statTotals(0) + plyrOff_GAME!(I, I1, 8)
                statTotals(1) = statTotals(1) + plyrOff_GAME!(I, I1, 7)
                statTotals(2) = statTotals(2) + plyrOff_GAME!(I, I1, 10)
                statTotals(3) = statTotals(3) + plyrOff_GAME!(I, I1, 9)
                statTotals(4) = statTotals(4) + plyrOff_GAME!(I, I1, 11)
                statTotals(5) = statTotals(5) + (plyrOff_GAME!(I, I1, 8) * 2) + plyrOff_GAME!(I, I1, 10) + threeFG(I, I1, 0)

                statTotals(13) = statTotals(13) + threeFG(I, I1, 0)
                statTotals(14) = statTotals(14) + threeFG(I, I1, 1)

                statTotals(6) = statTotals(6) + plyrOff_GAME!(I, I1, 12)
                statTotals(7) = statTotals(7) + plyrOff_GAME!(I, I1, 14)
                statTotals(8) = statTotals(8) + plyrOff_GAME!(I, I1, 15)
                statTotals(9) = statTotals(9) + plyrOff_GAME!(I, I1, 13)
                statTotals(11) = statTotals(11) + plyrOff_GAME!(I, I1, 24)
                statTotals(12) = statTotals(12) + plyrOff_GAME!(I, I1, 23)
                statTotals(10) = statTotals(10) + timePlayed(I, I1)

            End If

        Next I1

        If statTotals(3) = 0 Then statTotals(3) = 1

        Print
        Color 14
        Print "TOTALS";

        Color 15
        'Minutes
        Print Tab(14); Int(statTotals(10) / 60);

        'FGM / FGA
        Locate , 21: Print Using "##"; statTotals(0);
        Print "-";
        Print Using "###"; statTotals(1);

        '3FGM / 3FGA
        Locate , 28: Print Using "##"; statTotals(13);
        Print "-";
        Print Using "##"; statTotals(14);

        'FTM / FTA
        Locate , 35: Print Using "##"; statTotals(2);
        Print "-";
        Print Using "##"; statTotals(3);

        'ORB / RB / PT / F / A / B / S / TO
        Locate , 42: Print Using "##  ## ### ##  ##  ##  ##  ##"; statTotals(11), statTotals(4), statTotals(5), statTotals(6), statTotals(7), statTotals(8), statTotals(9), statTotals(12)

        'FG    %
        Print Tab(22);
        If statTotals(1) <> 0 Then Print Int(((statTotals(0) / statTotals(1)) * 100) + .5); "%";

        'FT    %
        Print Tab(35);
        If statTotals(3) <> 0 Then Print Int(((statTotals(2) / statTotals(3)) * 100) + .5); "%"

        Print
        Color 14: Print "TOTAL TURNOVERS -";
        Color 15: Print turnovers(I)

        Color 14: Print "TOTAL REBOUNDS  -";
        Color 15: Print R3!(I)

        If Not (autoPlay = 1 And playerMode = 2) Then
            Locate 24, 1: Print "HIT ANY KEY TO CONTINUE";
            I$ = GetKeyPress$
        End If

    Next I

End Sub


'----------------------------------------
'          SAVESTATS Subroutine
'----------------------------------------
'This subroutine prompts the user in ORDER
'to determine which teams to save satts For
'(autoplay will always save both teams).
'It also updates the GAME82 progress file,
'since at this point only can the game be
'considered fully complete.
Sub SAVESTATS ()

    Shared scheduleFile$

    Color 15, 0
    Cls

    If autoPlay <> 1 Then

        Call TEAMBOX(1, 1)

        Do
            U$ = "SAVE STATS (YN)"
            Locate 7, (80 - Len(U$)) / 2
            Print U$
            Color 15, 0
            I$ = GetKeyPress$
        Loop Until UCase$(I$) = "Y" Or UCase$(I$) = "N"

    End If

    ' Update schedule, ticker, etc.
    If UCase$(I$) = "Y" Or autoPlay = 1 Then

        If _FileExists("GAME82") Then

            Call TickerSchedule

            If schedGame(1) < schedGame(0) + schedGame(2) Then
                Kill "GAME82"
                endAllGames = 1
            Else

                Open "GAME82" For Output As #1

                Print #1, RTrim$(scheduleFile$)

                For I = 0 To 2
                    Print #1, schedGame(I)
                Next

                Close #1

            End If

        Else

            If _FileExists("TOURNEY") Then

                Open "TOURNEY" For Input As #2

                Input #2, tourneyFile$

                For I = 0 To 2
                    Input #2, schedGame(I)
                Next

                Close #2

                Open diskPaths$(1) + tourneyFile$ + ".TOU" As #1 Len = 90

                For X = 0 To 14
                    Field #1, X * 2 As X$, 2 As Q$(X + 1), 90 - 2 - 2 * X As X$
                Next

                Field #1, 30 As X$, 2 As Q$(16), 2 As Q$(17), 15 As Q$(18), 15 As Q$(19), 26 As X$
                Field #1, 64 As X$, 3 As Q$(20), 3 As Q$(21), 6 As Q$(22), 8 As Q$(23), 6 As X$
                Field #1, 84 As X$, 2 As Q$(24), 2 As Q$(25), 2 As Q$(26)

                NG%(13) = 1

                For X = 0 To 14: LSet Q$(X + 1) = MKI$(NG%(X)): Next
                For X = 0 To 3: LSet Q$(20 + X) = YN$(X): Next
                For X = 1 To 3: LSet Q$(X + 23) = MKI$(NG%(X + 14)): Next

                LSet Q$(16) = MKI$(score(0, 0))
                LSet Q$(17) = MKI$(score(1, 0))
                LSet Q$(18) = VT$
                LSet Q$(19) = W$

                Put #1, schedGame(0) + schedGame(2)

                Close #1

                schedGame(2) = schedGame(2) + 1
                autoPlay = 1

                Open "TOURNEY" For Output As #2

                Print #2, tourneyFile$

                For I = 0 To 2
                    Print #2, schedGame(I)
                Next

                Close #2

                Call TOURNEY_Game

                If schedGame(1) < schedGame(0) + schedGame(2) Then
                    Kill "TOURNEY"
                    endAllGames = 1
                End If

            End If

        End If

        Cls

        H% = gameLoc

        For PX = 0 To 1
            For J = 0 To 13
                plyrOff_GAME!(PX, J, 16) = timePlayed(PX, J)
                plyrOff_GAME!(PX, J, 17) = plyrOff_GAME!(PX, J, 23)
                plyrOff_GAME!(PX, J, 18) = plyrOff_GAME!(PX, J, 24)
            Next
        Next

        For PX = 0 To 1

            For I = 0 To 13

                For J = 1 To 12
                    plyrOff_GAME!(PX, I, J) = plyrOff_GAME!(PX, I, J + 6)
                Next

                W0!(PX, I) = threeFG(PX, I, 0)
                W1!(PX, I) = threeFG(PX, I, 1)

            Next

        Next

        'Start with 1st team
        For idx = 0 To 1

            skipCompile% = 0

            Color 15, 0
            Cls

            Call TEAMBOX(1, idx)

            U$ = "COMPILE STATS FOR " + gameTeams$(idx) + " (YN)"
            Locate , (80 - Len(U$)) / 2
            Print U$
            Color 15, 0

            If autoPlay <> 1 Then
                Do
                    I$ = GetKeyPress$
                Loop Until UCase$(I$) = "Y" Or UCase$(I$) = "N"

                If UCase$(I$) = "N" Then skipCompile% = 1

            End If

            If skipCompile% <> 1 Then

                Call COMPILESTATFILES(idx)

            End If

            Z!(12) = 0

        Next idx

    End If

End Sub


'----------------------------------------
'      COMPILESTATFILES Subroutine
'----------------------------------------
'This subroutine updates the various stat
'files for the corresponding team based on
'the stats generated for a completed game.
Sub COMPILESTATFILES (teamIdx)

    Shared actualAttendance&
    Shared CRD&()
    
    statFile$ = nameStatFile$(gameTeams$(teamIdx))

    If _FileExists(diskPaths$(1) + statFile$) Then

        Open diskPaths$(1) + statFile$ For Input As #1

        Input #1, gameTeams$(teamIdx)

        For I = 0 To 13:

            Input #1, players$(teamIdx, I)

            For J = 0 To 13:
                Input #1, Z2!(I, J)
            Next J

            Input #1, W2(teamIdx, I)
            Input #1, W3(teamIdx, I)

        Next I

        For L = 0 To 15: Input #1, Z!(L): Next L

        For L = 0 To 15: Input #1, Z1!(L): Next L

        Close #1

    End If

    TG = 0

    For I = 0 To 13

        If plyrOff_GAME!(teamIdx, I, 2) * 2 + plyrOff_GAME!(teamIdx, I, 4) + W0!(teamIdx, I) > Z2!(I, 13) Then
            Z2!(I, 13) = plyrOff_GAME!(teamIdx, I, 2) * 2 + plyrOff_GAME!(teamIdx, I, 4) + W0!(teamIdx, I)
        End If

        If plyrOff_GAME!(teamIdx, I, 10) > 0 Then Z2!(I, 0) = Z2!(I, 0) + 1

        For J = 1 To 12

            Z2!(I, J) = Z2!(I, J) + plyrOff_GAME!(teamIdx, I, J)

            If J <> 5 And J <> 10 And J <> 11 Then
                Z!(J) = Z!(J) + plyrOff_GAME!(teamIdx, I, J)
                Z1!(J) = Z1!(J) + plyrOff_GAME!(1 - teamIdx, I, J)
            End If

        Next J

        Z!(0) = Z!(0) + plyrOff_GAME!(teamIdx, I, 10)
        TG = TG + plyrOff_GAME!(teamIdx, I, 10)

    Next I

    For I = 0 To 1

        statTotals(I) = 0

        For I1 = 0 To 13
            statTotals(I) = statTotals(I) + plyrOff_GAME!(I, I1, 5)
        Next

    Next

    Z!(15) = Z!(15) + R3!(teamIdx) - statTotals(teamIdx)
    Z1!(15) = Z1!(15) + R3!(1 - teamIdx) - statTotals(1 - teamIdx)
    Z!(5) = Z!(5) + R3!(teamIdx)
    Z1!(5) = Z1!(5) + R3!(1 - teamIdx)
    Z!(11) = Z!(11) + turnovers(teamIdx)
    Z1!(11) = Z1!(11) + turnovers(1 - teamIdx)

    For J = 0 To 13:
        Z!(13) = Z!(13) + W0!(teamIdx, J)
        Z!(14) = Z!(14) + W1!(teamIdx, J)
        Z1!(13) = Z1!(13) + W0!(1 - teamIdx, J)
        Z1!(14) = Z1!(14) + W1!(1 - teamIdx, J)
        W2(teamIdx, J) = W2(teamIdx, J) + W0!(teamIdx, J)
        W3(teamIdx, J) = W3(teamIdx, J) + W1!(teamIdx, J)
    Next J

    Z!(10) = Z!(10) + score(teamIdx, 0)
    Z1!(10) = Z1!(10) + score(1 - teamIdx, 0)

    Call TEAMBOX(1, teamIdx)
    U$ = "SAVING STATS FOR " + gameTeams$(teamIdx)
    Locate , (80 - Len(U$)) / 2
    Print U$

    Color 15, 0

    Open diskPaths$(1) + statFile$ For Output As #2

    Print #2, gameTeams$(teamIdx)

    For I = 0 To 13:

        Print #2, players$(teamIdx, I)

        For J = 0 To 13:
            Print #2, Z2!(I, J)
        Next J

        Print #2, W2(teamIdx, I):
        Print #2, W3(teamIdx, I)

    Next I

    For L = 0 To 15:
        Print #2, Z!(L)
    Next L

    For L = 0 To 15:
        Print #2, Z1!(L)
    Next L

    Close #2

    Print

    numberGames = 0

    If _FileExists(diskPaths$(1) + statFile$ + "S") Then

        Open diskPaths$(1) + statFile$ + "S" For Input As #3

        Input #3, numberGames

        For I = 1 To NUM_STATRECORDS: Input #3, O%(I): Next I
        For I = 1 To NUM_STATRECORDS: Input #3, HO$(I): Next I
        For I = 1 To NUM_STATRECORDS: Input #3, HT%(I): Next I
        For I = 1 To NUM_STATRECORDS: Input #3, H$(I): Next I

        For I = 1 To NUM_STATRECORDS
            For I1 = 0 To 1
                Input #3, APT%(I, I1)
            Next
        Next

        For I = 1 To NUM_STATRECORDS: Input #3, CRD&(I): Next I
        For I = 1 To NUM_STATRECORDS: Input #3, SITE$(I): Next I

        Close #3

    End If

    If numberGames < NUM_STATRECORDS Then numberGames = numberGames + 1
    If H% = 2 And TG < 12100 Then H$(numberGames) = "N": GoTo 6540
    If H% <> teamIdx And TG < 12100 Then H$(numberGames) = "V": GoTo 6540
    If H% = teamIdx And TG < 12100 Then H$(numberGames) = "H": GoTo 6540
    If H% = teamIdx And TG < 13600 Then H$(numberGames) = "H1": GoTo 6540
    If H% = teamIdx And TG < 15100 Then H$(numberGames) = "H2": GoTo 6540
    If H% = teamIdx And TG < 16600 Then H$(numberGames) = "H3": GoTo 6540
    If H% = teamIdx And TG < 18100 Then H$(numberGames) = "H4": GoTo 6540
    If H% = 2 And TG < 13600 Then H$(numberGames) = "N1": GoTo 6540
    If H% = 2 And TG < 15100 Then H$(numberGames) = "N2": GoTo 6540
    If H% = 2 And TG < 16600 Then H$(numberGames) = "N3": GoTo 6540
    If H% = 2 And TG < 18100 Then H$(numberGames) = "N4": GoTo 6540
    If H% <> teamIdx And TG < 13600 Then H$(numberGames) = "V1": GoTo 6540
    If H% <> teamIdx And TG < 15100 Then H$(numberGames) = "V2": GoTo 6540
    If H% <> teamIdx And TG < 16600 Then H$(numberGames) = "V3": GoTo 6540
    If H% <> teamIdx And TG < 18100 Then H$(numberGames) = "V4": GoTo 6540

    6540 '
    O%(numberGames) = score(teamIdx, 0)
    HO$(numberGames) = gameTeams$(1 - teamIdx)
    HT%(numberGames) = score(1 - teamIdx, 0)
    CRD&(numberGames) = actualAttendance&

    If teamRat_GAME(0, 9) = 0 Then teamRat_GAME(0, 9) = 78
    If teamRat_GAME(1, 9) = 0 Then teamRat_GAME(1, 9) = 78

    APT%(numberGames, 0) = teamRat_GAME(teamIdx, 9)
    APT%(numberGames, 1) = teamRat_GAME(1 - teamIdx, 9)

    If gameArena$(1) = "" Then gameArena$(1) = "MEMORIAL COLISEUM"

    If gameLoc = 2 Then
        SITE$(numberGames) = "NEUTRAL SITE"
    Else
        SITE$(numberGames) = gameArena$(1)
    End If

    Open diskPaths$(1) + statFile$ + "S" For Output As #4

    Print #4, numberGames

    For I = 1 To NUM_STATRECORDS: Print #4, O%(I): Next I
    For I = 1 To NUM_STATRECORDS: Print #4, HO$(I): Next I
    For I = 1 To NUM_STATRECORDS: Print #4, HT%(I): Next I
    For I = 1 To NUM_STATRECORDS: Print #4, H$(I): Next I

    For I = 1 To NUM_STATRECORDS
        For I1 = 0 To 1
            Print #4, APT%(I, I1)
        Next
    Next

    For I = 1 To NUM_STATRECORDS: Print #4, CRD&(I): Next I
    For I = 1 To NUM_STATRECORDS: Print #4, SITE$(I): Next I

    Close #4

    For I = 1 To NUM_STATRECORDS
        O%(I) = 0
        HT%(I) = 0
        HO$(I) = ""
        H$(I) = ""
        CRD&(I) = 0
        SITE$(I) = ""

        For I1 = 0 To 1
            APT%(I, I1) = 0
        Next

    Next I

    For J = 0 To 13
        For K = 0 To 13
            Z2!(J, K) = 0
        Next K
    Next J

    For L = 0 To 15
        Z!(L) = 0
        Z1!(L) = 0
    Next L

End Sub


'----------------------------------------
'            pbplog Function
'----------------------------------------
'This subroutine is designed to help me
'print information about where the game
'is at during the code. The general idea
'was originally to be called everywhere
'there is PBP. This helps me debug where
'issues are happening in a game.
Sub pbplog (lineNumber)

    Print #7, "Called from line "; lineNumber

    For I3 = 0 To 1
        Print #7, gameTeams$(I3)
        For I4 = 0 To 4
            Print #7, "["; B1(I3, I4); "] "; players$(I3, B1(I3, I4)) + " (STATUS = "; B%(I3, B1(I3, I4)); ")"
            Print
        Next I4
    Next I3

    Print #7,

End Sub


'----------------------------------------
'       ChooseGameTeam Subroutine
'----------------------------------------
'This subroutine provides interface for
'choosing a team for the game
Sub ChooseGameTeam (yearNumber$, numberTeams, chosenIdx, teamName$, gameIdx)

    Shared previousYear$

    Shared teamIndicator$()

    Do

        Color 15, 0
        Cls

        JJ = 7

        Locate 6, 8
        Color 15, 4

        Print " " + Chr$(214); String$(61, 196); Chr$(183) + " ";

        For II = 1 To JJ
            Locate 6 + II, 8
            Print " " + Chr$(186); String$(61, 32); Chr$(186) + " ";
        Next

        Locate 7 + JJ, 8
        Print " " + Chr$(211); String$(61, 196); Chr$(189) + " ";

        Locate 7, 32

        Locate , 12: Print teamIndicator$(gameIdx)
        Locate , 12: Print "ENTER DISK ID: "
        Print
        Locate , 12: Print "THE DISK ID IS USUALLY THE LAST TWO DIGITS OF THE"
        Locate , 12: Print "SEASON DISK YOU ARE PLAYING FROM (IE. 89, 76, 67)."
        Print
        Locate , 12: Print "HIT <ENTER> TO USE PREVIOUS ID"
        Locate 8,

        I$ = GetKeyPress$

        If I$ <> Chr$(27) Then

            If I$ <> Chr$(13) Then

                Locate 8, 27: Print I$
                Locate 8, 28: Line Input NY$
                NY$ = I$ + NY$
                Color 15, 0

                If Not (NY$ = "" And yearNumber$ <> "") Then

                    yearNumber$ = RTrim$(NY$)
                    Erase teamNames$
                    numberTeams = 0

                    Cls

                    If Not _FileExists(diskPaths$(0) + TEAM_FILE_NAME$ + "." + yearNumber$) Then

                        MsgText$ = "NO TEAM FILES WERE FOUND MATCHING THIS ID. PRESS ANY KEY TO RETURN TO MAIN MENU"
                        BoxWidth = 20
                        BoxHeight = (Len(MsgText$) / BoxWidth) + 3 'top and box lines + 1 extra
                        Locate ((25 - BoxHeight) / 2), (80 - ((BoxWidth + 2) / 2))
                        Call CSMsgBox(MsgText$, BoxWidth, Pass)
                        I$ = GetKeyPress$
                        Call CSMsgBox("", 0, Pass)
                        Exit Sub

                    Else

                        Open diskPaths$(0) + TEAM_FILE_NAME$ + "." + yearNumber$ For Random As #1 Len = TEAM_SIZE_BYTES

                        fileLength& = LOF(1)

                        Field #1, 15 As Q$(0)

                        numberTeams = fileLength& / TEAM_SIZE_BYTES

                        For teamIdx = 1 To numberTeams
                            Get #1, teamIdx
                            'numberTeams = numberTeams + 1
                            teamNames$(teamIdx) = Q$(0)
                            teamIndex%(teamIdx) = teamIdx
                        Next teamIdx

                        Close #1

                        previousYear$ = yearNumber$

                    End If 'Done checking if file exists

                End If 'Done checking for blank year number

            Else

                yearNumber$ = previousYear$

            End If 'Done checking for ENTER key

            'Locate 2, 33
            'Color 31: Print "LOADING..."

            Do

                Call SelectGameTeam(numberTeams, yearNumber$, chosenIdx, teamName$, ExitCode%, gameIdx)

                If ExitCode% <> 27 And numberTeams <> 0 Then

                    Do
                        Locate 2, 33
                        Color teamRat_GAME(gameIdx, 0), teamRat_GAME(gameIdx, 1): Print teamName$

                        Color 15, 4
                        Locate 3, 32: Print "ANY CHANGE? (Y/N)";

                        J$ = GetKeyPress$

                    Loop Until J$ = Chr$(27) Or UCase$(J$) = "Y" Or UCase$(J$) = "N"

                End If

            Loop Until ExitCode% = 27 Or J$ = Chr$(27) Or UCase$(J$) = "N"

        End If 'Done checking for ESC

    Loop Until UCase$(J$) = "N" Or I$ = Chr$(27) 'Or J$ = Chr$(27)

    If I$ = Chr$(27) Or J$ = Chr$(27) Then chosenIdx = 0

End Sub


'----------------------------------------
'       SelectGameTeam Subroutine
'----------------------------------------
'This subroutine provides an interface for
'selecting a team from the list loaded by
'the disk ID.
Sub SelectGameTeam (numberTeams, yearNumber$, selectedIdx, teamName$, ExitCode%, gameIdx)

    If numberTeams > 0 Then

        SELECTION% = 1
        Count% = numberTeams
        Start% = 1
        FileFGColor% = 15: FileBGColor% = 4
        HiLiteFGColor% = 0: HiLiteBGColor% = 7
        Rows% = 20
        Columns% = 4
        Spacing% = 6
        Row% = 4
        Column% = 1

        Color , 4
        Cls
        Color 14
        Locate , 33: Print "TEAM SELECTION"
        Locate 25, 1
        Color 14: Print "ESC";: Color 15: Print "-SELECT NEW ID  PGDN  PGUP  ";
        Color 14: Print "ENTER";: Color 15: Print "-SELECTS TEAM";

        _MouseShow "DEFAULT"
        MAMenu teamNames$(), SELECTION%, Start%, Count%, ExitCode%, FileFGColor%, FileBGColor%, HiLiteFGColor%, HiLiteBGColor%, Rows%, Columns%, Spacing%, Row%, Column%
        _MouseHide

        If ExitCode% <> 27 Then

            selectedIdx = teamIndex%(SELECTION%)

            'Locate 2, 33
            'Color 31: Print "LOADING..."

            Call ReadGameTeam(yearNumber$, teamName$, selectedIdx, gameIdx)

        End If

    End If

End Sub


'----------------------------------------
'        ReadGameTeam Subroutine
'----------------------------------------
'This subroutine reads in the data for the
'selected tema into each of the data arrays
'needed by the game.
Sub ReadGameTeam (YN$, targetTeam$, I1, gameIdx)

    Shared d3FG_Adj(), d3FGA_Adj()
    Shared avgAttendance&()
    
    teamYear$ = RTrim$(YN$)

    Open diskPaths$(0) + TEAM_FILE_NAME$ + "." + teamYear$ For Random As #1 Len = TEAM_SIZE_BYTES

    Field #1, 15 As Q$(0), 2 As Q$(1), 2 As Q$(2), 2 As Q$(3), 2 As Q$(4), 2 As Q$(5), 2 As Q$(6), 2 As Q$(7), 2 As Q$(8), 2 As Q$(9), 2 As Q$(10), 2 As Q$(11), 2 As Q$(12), 2 As Q$(13), 2 As Q$(14), 2 As Q$(15), 2 As Q$(16), 2 As Q$(17), 2 As Q$(18), 2 As Q$(19), 602 As X$

    For I = 0 To 13
        Field #1, 53 + I * 43 As X$, 15 As Q$(I * 15 + 20), 2 As Q$(I * 15 + 21), 2 As Q$(I * 15 + 22), 2 As Q$(I * 15 + 23), 2 As Q$(I * 15 + 24), 2 As Q$(I * 15 + 25), 2 As Q$(I * 15 + 26), 2 As Q$(I * 15 + 27), 2 As Q$(I * 15 + 28), 2 As Q$(I * 15 + 29), 2 As Q$(I * 15 + 30), 2 As Q$(I * 15 + 31), 2 As Q$(I * 15 + 32), 2 As Q$(I * 15 + 33), 2 As Q$(I * 15 + 34), TEAM_SIZE_BYTES - 53 - 43 - I * 43 As X$
    Next

    Get #1, I1

    targetTeam$ = RTrim$(Q$(0))
    teamStamina(gameIdx) = CVI(Q$(1))
    dFGPA(gameIdx) = CVI(Q$(2))
    d3FG_Adj(gameIdx) = CVI(Q$(3))
    d3FGA_Adj(gameIdx) = CVI(Q$(4))

    For I3 = 0 To 4:
        leagRat_GAME(gameIdx, I3) = CVI(Q$(I3 + 5))
    Next

    For I3 = 0 To 9:
        teamRat_GAME(gameIdx, I3) = CVI(Q$(I3 + 10))
    Next

    For I3 = 0 To 13
        players$(gameIdx, I3) = RTrim$(Q$(I3 * 15 + 20))

        For I4 = 0 To 6
            plyrOff_GAME!(gameIdx, I3, I4) = CVI(Q$(I3 * 15 + I4 + 21))
            plyrRat_GAME(gameIdx, I3, I4) = CVI(Q$(I3 * 15 + I4 + 28))
        Next
    Next

    Close #1

    FY%(gameIdx) = 2 * teamRat_GAME(gameIdx, 3) - teamRat_GAME(gameIdx, 4)

    CNT% = 0
    CNTX% = 0

    Do
        If teamRat_GAME(gameIdx, 5) <> 0 Then

            For I = 0 To 13
                If B%(gameIdx, I) = -1 Then B%(gameIdx, I) = 0
                Call d100(RN)
                If UCase$(players$(gameIdx, I)) = "XXX" Then CNTX% = CNTX% + 1
                If UCase$(players$(gameIdx, I)) = "XXX" Or (B%(gameIdx, I) = 0 And RN > Int(plyrRat_GAME(gameIdx, I, 0) / teamRat_GAME(gameIdx, 5) * 100 + .5)) Then B%(gameIdx, I) = -1
            Next

            For I = 0 To 13:
                If B%(gameIdx, I) = 0 Then CNT% = CNT% + 1
            Next

        End If

    Loop Until (CNT% < 10 And CNTX% < 4) Or (CNTX% >= 5 And CNT% < 8)

    Open diskPaths$(0) + DATA_FILE_NAME$ + "." + teamYear$ As #2 Len = DATA_SIZE_BYTES

    Field #2, 15 As Q$(0), 40 As Q$(1), 15 As Q$(2), 4 As Q$(3)

    For I = 0 To 13
        Field #2, 74 + I * 32 As X$, 2 As Q$(I * 16 + 4), 2 As Q$(I * 16 + 5), 2 As Q$(I * 16 + 6), 2 As Q$(I * 16 + 7), 2 As Q$(I * 16 + 8), 2 As Q$(I * 16 + 9), 2 As Q$(I * 16 + 10), 2 As Q$(I * 16 + 11), 2 As Q$(I * 16 + 12), 2 As Q$(I * 16 + 13), 2 As Q$(I * 16 + 14), 2 As Q$(I * 16 + 15), 2 As Q$(I * 16 + 16), 2 As Q$(I * 16 + 17), 2 As Q$(I * 16 + 18), 2 As Q$(I * 16 + 19)
        Field #2, 522 As X$, 2 As Q$(228), 2 As Q$(229), 2 As Q$(230), 2 As Q$(231), 2 As Q$(232), 2 As Q$(233), 2 As Q$(234), 2 As Q$(235), 2 As Q$(236), 2 As Q$(237), 2 As Q$(238), 2 As Q$(239), 2 As Q$(240), 2 As Q$(241), 2 As Q$(242), 2 As Q$(243), 2 As Q$(244), 2 As Q$(245), 2 As Q$(246), 2 As Q$(247), 2 As Q$(248), 2 As Q$(249)
    Next

    Get #2, I1

    gameCoaches$(gameIdx) = Q$(0)
    gameArena$(gameIdx) = Q$(1)
    gameMascots$(gameIdx) = Q$(2)
    avgAttendance&(gameIdx) = CVL(Q$(3))

    For I = 0 To 13

        DF(gameIdx, I) = CVI(Q$(I * 16 + 4))
        PO$(gameIdx, I) = Q$(I * 16 + 5)

        For I1 = 0 To 13
            RS(gameIdx, I, I1) = CVI(Q$(I * 16 + I1 + 6))
        Next

    Next

    For I = 0 To 20
        T2%(gameIdx, I) = CVI(Q$(228 + I))
    Next

    CK = CVI(Q$(249))

    Close #2

    If CK <> 999 Then

        gameCoaches$(gameIdx) = ""
        gameArena$(gameIdx) = ""
        gameMascots$(gameIdx) = ""
        avgAttendance&(gameIdx) = 0

        For I = 0 To 13:
            DF(gameIdx, I) = 5
            PO$(gameIdx, I) = ""

            For I1 = 0 To 13
                RS(gameIdx, I, I1) = 0
            Next
        Next

        For I = 0 To 20:
            T2%(gameIdx, I) = 0
        Next

    End If

End Sub


'----------------------------------------
'        CheckRecords Subroutine
'----------------------------------------
'This subroutine checks all stats to see
'if any records were broken. Any that have
'been reached will be assigned to arrays
'for later updating the files.
Sub CheckRecords ()

    Dim RC$(50, 4), TRC$(125, 3)
    Dim REC!(50, 2), TREC!(125, 2)
    Dim V8(1, 14)
    Dim VERSUS$(1)

    VERSUS$(0) = "AT"
    VERSUS$(1) = "VS."

    If _FileExists(diskPaths$(1) + "RECORDS.GAM") Then

        Open diskPaths$(1) + "RECORDS.GAM" For Input As #1

        For I = 0 To 48
            For I1 = 0 To 2
                Input #1, REC!(I, I1)
            Next
            For I1 = 0 To 4
                Input #1, RC$(I, I1)
            Next
        Next

        For I = 0 To 125
            For I1 = 0 To 2
                Input #1, TREC!(I, I1)
            Next
            For I1 = 0 To 3
                Input #1, TRC$(I, I1)
            Next
        Next

        Close #1

    Else

        TREC!(2, 0) = 999
        TREC!(4, 0) = 999
        TREC!(7, 0) = 999
        TREC!(9, 0) = 999
        TREC!(11, 0) = 999
        TREC!(13, 0) = 999
        TREC!(15, 0) = 999
        TREC!(17, 0) = 999
        TREC!(19, 0) = 999
        TREC!(21, 0) = 999
        TREC!(23, 0) = 999
        TREC!(25, 0) = 999
        TREC!(27, 0) = 999
        TREC!(29, 0) = 999
        TREC!(31, 0) = 999
        TREC!(33, 0) = 999
        TREC!(35, 0) = 999
        TREC!(37, 0) = 999
        TREC!(43, 0) = 999
        TREC!(45, 0) = 999
        TREC!(61, 0) = 999
        TREC!(63, 0) = 999
        TREC!(65, 0) = 999
        TREC!(67, 0) = 999
        TREC!(73, 0) = 999
        TREC!(75, 0) = 999
        TREC!(81, 0) = 999
        TREC!(83, 0) = 999
        TREC!(87, 0) = 999
        TREC!(89, 0) = 999
        TREC!(92, 0) = 999
        TREC!(94, 0) = 999
        TREC!(97, 0) = 999
        TREC!(99, 0) = 999
        TREC!(105, 0) = 999
        TREC!(107, 0) = 999
        TREC!(113, 0) = 999
        TREC!(115, 0) = 999
        TREC!(120, 0) = 999
        TREC!(123, 0) = 999
        TREC!(125, 0) = 999

    End If

    'CHECK THE INDIVIDUAL RECORDS

    For I = 0 To 1

        For I1 = 0 To 13

            ' SCORING RECORDS FOR POINTS IN A GAME, HALF, QUARTER AND OVERTIME PERIOD
            If plyrOff_GAME!(I, I1, 8) * 2 + plyrOff_GAME!(I, I1, 10) + threeFG(I, I1, 0) > REC!(0, 0) Then
                REC!(0, 0) = plyrOff_GAME!(I, I1, 8) * 2 + plyrOff_GAME!(I, I1, 10) + threeFG(I, I1, 0) ' POINTS
                REC!(0, 1) = 1 ' TIMES DONE
                REC!(0, 2) = 0 ' GAME
                RC$(0, 0) = players$(I, I1) ' NAME
                RC$(0, 1) = gameTeams$(I) ' TEAM
                RC$(0, 2) = VERSUS$(I) ' AT/VS
                RC$(0, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(0, 4) = Date$ ' DATE
            End If

            If QQ(I, 1, I1, 13) > REC!(1, 0) Then
                REC!(1, 0) = QQ(I, 1, I1, 13) ' POINTS
                REC!(1, 1) = 1 ' TIMES DONE
                REC!(1, 2) = 1 ' HALF
                RC$(1, 0) = players$(I, I1) ' NAME
                RC$(1, 1) = gameTeams$(I) ' TEAM
                RC$(1, 2) = VERSUS$(I) ' AT/VS
                RC$(1, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(1, 4) = Date$ ' DATE
            End If

            If QQ(I, 2, I1, 13) > REC!(1, 0) Then
                REC!(1, 0) = QQ(I, 2, I1, 13) ' POINTS
                REC!(1, 1) = 1 ' TIMES DONE
                REC!(1, 2) = 2 ' HALF
                RC$(1, 0) = players$(I, I1) ' NAME
                RC$(1, 1) = gameTeams$(I) ' TEAM
                RC$(1, 2) = VERSUS$(I) ' AT/VS
                RC$(1, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(1, 4) = Date$ ' DATE
            End If

            For I2 = 3 To 8
                If QQ(I, I2, I1, 13) > REC!(3, 0) Then
                    REC!(3, 0) = QQ(I, I2, I1, 13) ' POINTS
                    REC!(3, 1) = 1 ' TIMES DONE
                    REC!(3, 2) = I2 ' QTR
                    RC$(3, 0) = players$(I, I1) ' NAME
                    RC$(3, 1) = gameTeams$(I) ' TEAM
                    RC$(3, 2) = VERSUS$(I) ' AT/VS
                    RC$(3, 3) = gameTeams$(1 - I) ' OPPONENT
                    RC$(3, 4) = Date$ ' DATE
                End If
            Next I2

            ' FIELD GOAL PERCENTAGE RECORDS FOR HIGH %, MOST W/NO MISSES, MOST W/NONE MADE
            If plyrOff_GAME!(I, I1, 8) >= 15 And plyrOff_GAME!(I, I1, 7) <> 0 Then
                If plyrOff_GAME!(I, I1, 8) / plyrOff_GAME!(I, I1, 7) > REC!(4, 0) Then
                    REC!(4, 0) = plyrOff_GAME!(I, I1, 8) / plyrOff_GAME!(I, I1, 7) ' PCTG
                    REC!(4, 1) = plyrOff_GAME!(I, I1, 8) ' FGM
                    REC!(4, 2) = plyrOff_GAME!(I, I1, 7) ' FGA
                    RC$(4, 0) = players$(I, I1) ' NAME
                    RC$(4, 1) = gameTeams$(I) ' TEAM
                    RC$(4, 2) = VERSUS$(I) ' AT/VS
                    RC$(4, 3) = gameTeams$(1 - I) ' OPPONENT
                    RC$(4, 4) = Date$ ' DATE
                End If
            End If

            If plyrOff_GAME!(I, I1, 8) = plyrOff_GAME!(I, I1, 7) And plyrOff_GAME!(I, I1, 7) > REC!(5, 0) Then
                REC!(5, 0) = plyrOff_GAME!(I, I1, 7) ' MOST FGM
                RC$(5, 0) = players$(I, I1) ' NAME
                RC$(5, 1) = gameTeams$(I) ' TEAM
                RC$(5, 2) = VERSUS$(I) ' AT/VS
                RC$(5, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(5, 4) = Date$ ' DATE
            End If

            If plyrOff_GAME!(I, I1, 8) = 0 And plyrOff_GAME!(I, I1, 7) > REC!(6, 0) Then
                REC!(6, 0) = plyrOff_GAME!(I, I1, 7) ' 0 FGM /FGA
                RC$(6, 0) = players$(I, I1) ' NAME
                RC$(6, 1) = gameTeams$(I) ' TEAM
                RC$(6, 2) = VERSUS$(I) ' AT/VS
                RC$(6, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(6, 4) = Date$ ' DATE
            End If

            ' FIELD GOALS MADE IN A GAME, HALF, QUARTER AND OVERTIME PERIOD
            If plyrOff_GAME!(I, I1, 8) > REC!(7, 0) Then
                REC!(7, 0) = plyrOff_GAME!(I, I1, 8) ' FGM
                REC!(7, 1) = 1 ' TIMES DONE
                REC!(7, 2) = 0 ' GAME
                RC$(7, 0) = players$(I, I1) ' NAME
                RC$(7, 1) = gameTeams$(I) ' TEAM
                RC$(7, 2) = VERSUS$(I) ' AT/VS
                RC$(7, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(7, 4) = Date$ ' DATE
            End If

            If QQ(I, 1, I1, 2) > REC!(8, 0) Then
                REC!(8, 0) = QQ(I, 1, I1, 2) ' FGM
                REC!(8, 1) = 1 ' TIMES DONE
                REC!(8, 2) = 1 ' HALF
                RC$(8, 0) = players$(I, I1) ' NAME
                RC$(8, 1) = gameTeams$(I) ' TEAM
                RC$(8, 2) = VERSUS$(I) ' AT/VS
                RC$(8, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(8, 4) = Date$ ' DATE
            End If

            If QQ(I, 2, I1, 2) > REC!(8, 0) Then
                REC!(8, 0) = QQ(I, 2, I1, 2) ' FGM
                REC!(8, 1) = 1 ' TIMES DONE
                REC!(8, 2) = 2 ' HALF
                RC$(8, 0) = players$(I, I1) ' NAME
                RC$(8, 1) = gameTeams$(I) ' TEAM
                RC$(8, 2) = VERSUS$(I) ' AT/VS
                RC$(8, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(8, 4) = Date$ ' DATE
            End If

            For I2 = 3 To 8
                If QQ(I, I2, I1, 2) > REC!(10, 0) Then
                    REC!(10, 0) = QQ(I, I2, I1, 2) ' FGM
                    REC!(10, 1) = 1 ' TIMES DONE
                    REC!(10, 2) = I2 ' QTR
                    RC$(10, 0) = players$(I, I1) ' NAME
                    RC$(10, 1) = gameTeams$(I) ' TEAM
                    RC$(10, 2) = VERSUS$(I) ' AT/VS
                    RC$(10, 3) = gameTeams$(1 - I) ' OPPONENT
                    RC$(10, 4) = Date$ ' DATE
                End If
            Next I2

            ' FIELD GOAL ATTEMPTS MADE IN A GAME, HALF, QUARTER AND OVERTIME PERIOD
            If plyrOff_GAME!(I, I1, 7) > REC!(11, 0) Then
                REC!(11, 0) = plyrOff_GAME!(I, I1, 7) ' FGA
                REC!(11, 1) = 1 ' TIMES DONE
                REC!(11, 2) = 0 ' GAME
                RC$(11, 0) = players$(I, I1) ' NAME
                RC$(11, 1) = gameTeams$(I) ' TEAM
                RC$(11, 2) = VERSUS$(I) ' AT/VS
                RC$(11, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(11, 4) = Date$ ' DATE
            End If

            If QQ(I, 1, I1, 1) > REC!(12, 0) Then
                REC!(12, 0) = QQ(I, 1, I1, 1) ' FGA
                REC!(12, 1) = 1 ' TIMES DONE
                REC!(12, 2) = 1 ' HALF
                RC$(12, 0) = players$(I, I1) ' NAME
                RC$(12, 1) = gameTeams$(I) ' TEAM
                RC$(12, 2) = VERSUS$(I) ' AT/VS
                RC$(12, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(12, 4) = Date$ ' DATE
            End If

            If QQ(I, 2, I1, 1) > REC!(12, 0) Then
                REC!(12, 0) = QQ(I, 2, I1, 1) ' FGA
                REC!(12, 1) = 1 ' TIMES DONE
                REC!(12, 2) = 2 ' HALF
                RC$(12, 0) = players$(I, I1) ' NAME
                RC$(12, 1) = gameTeams$(I) ' TEAM
                RC$(12, 2) = VERSUS$(I) ' AT/VS
                RC$(12, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(12, 4) = Date$ ' DATE
            End If

            For I2 = 3 To 8
                If QQ(I, I2, I1, 1) > REC!(14, 0) Then
                    REC!(14, 0) = QQ(I, I2, I1, 1) ' FGA
                    REC!(14, 1) = 1 ' TIMES DONE
                    REC!(14, 2) = I2 ' QTR
                    RC$(14, 0) = players$(I, I1) ' NAME
                    RC$(14, 1) = gameTeams$(I) ' TEAM
                    RC$(14, 2) = VERSUS$(I) ' AT/VS
                    RC$(14, 3) = gameTeams$(1 - I) ' OPPONENT
                    RC$(14, 4) = Date$ ' DATE
                End If
            Next I2

            ' THREE-POINT FIELD GOALS MOST MADE NO MISSES, MOST ATT NONE MADE
            If threeFG(I, I1, 0) = threeFG(I, I1, 1) And threeFG(I, I1, 0) > REC!(15, 0) Then
                REC!(15, 0) = threeFG(I, I1, 0) ' MOST 3-FGM
                RC$(15, 0) = players$(I, I1) ' NAME
                RC$(15, 1) = gameTeams$(I) ' TEAM
                RC$(15, 2) = VERSUS$(I) ' AT/VS
                RC$(15, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(15, 4) = Date$ ' DATE
            End If

            If threeFG(I, I1, 0) = 0 And threeFG(I, I1, 1) > REC!(16, 0) Then
                REC!(16, 0) = threeFG(I, I1, 1) ' 0 3FGM /3FGA
                RC$(16, 0) = players$(I, I1) ' NAME
                RC$(16, 1) = gameTeams$(I) ' TEAM
                RC$(16, 2) = VERSUS$(I) ' AT/VS
                RC$(16, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(16, 4) = Date$ ' DATE
            End If

            ' 3-FIELD GOALS MADE IN A GAME, HALF, QUARTER AND OVERTIME PERIOD
            If threeFG(I, I1, 0) > REC!(17, 0) Then
                REC!(17, 0) = threeFG(I, I1, 0) ' 3FGM
                REC!(17, 1) = 1 ' TIMES DONE
                REC!(17, 2) = 0 ' GAME
                RC$(17, 0) = players$(I, I1) ' NAME
                RC$(17, 1) = gameTeams$(I) ' TEAM
                RC$(17, 2) = VERSUS$(I) ' AT/VS
                RC$(17, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(17, 4) = Date$ ' DATE
            End If

            If QQ(I, 1, I1, 10) > REC!(18, 0) Then
                REC!(18, 0) = QQ(I, 1, I1, 10) ' 3FGM
                REC!(18, 1) = 1 ' TIMES DONE
                REC!(18, 2) = 1 ' HALF
                RC$(18, 0) = players$(I, I1) ' NAME
                RC$(18, 1) = gameTeams$(I) ' TEAM
                RC$(18, 2) = VERSUS$(I) ' AT/VS
                RC$(18, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(18, 4) = Date$ ' DATE
            End If

            If QQ(I, 2, I1, 10) > REC!(18, 0) Then
                REC!(18, 0) = QQ(I, 2, I1, 10) ' 3FGM
                REC!(18, 1) = 1 ' TIMES DONE
                REC!(18, 2) = 2 ' HALF
                RC$(18, 0) = players$(I, I1) ' NAME
                RC$(18, 1) = gameTeams$(I) ' TEAM
                RC$(18, 2) = VERSUS$(I) ' AT/VS
                RC$(18, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(18, 4) = Date$ ' DATE
            End If

            For I2 = 3 To 8
                If QQ(I, I2, I1, 10) > REC!(20, 0) Then
                    REC!(20, 0) = QQ(I, I2, I1, 10) ' 3FGM
                    REC!(20, 1) = 1 ' TIMES DONE
                    REC!(20, 2) = I2 ' QTR
                    RC$(20, 0) = players$(I, I1) ' NAME
                    RC$(20, 1) = gameTeams$(I) ' TEAM
                    RC$(20, 2) = VERSUS$(I) ' AT/VS
                    RC$(20, 3) = gameTeams$(1 - I) ' OPPONENT
                    RC$(20, 4) = Date$ ' DATE
                End If
            Next I2

            ' 3-FIELD GOALS ATT IN A GAME, HALF
            If threeFG(I, I1, 1) > REC!(21, 0) Then
                REC!(21, 0) = threeFG(I, I1, 1) ' 3FGA
                REC!(21, 1) = 1 ' TIMES DONE
                REC!(21, 2) = 0 ' GAME
                RC$(21, 0) = players$(I, I1) ' NAME
                RC$(21, 1) = gameTeams$(I) ' TEAM
                RC$(21, 2) = VERSUS$(I) ' AT/VS
                RC$(21, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(21, 4) = Date$ ' DATE
            End If

            If QQ(I, 1, I1, 11) > REC!(22, 0) Then
                REC!(22, 0) = QQ(I, 1, I1, 11) ' 3FGA
                REC!(22, 1) = 1 ' TIMES DONE
                REC!(22, 2) = 1 ' HALF
                RC$(22, 0) = players$(I, I1) ' NAME
                RC$(22, 1) = gameTeams$(I) ' TEAM
                RC$(22, 2) = VERSUS$(I) ' AT/VS
                RC$(22, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(22, 4) = Date$ ' DATE
            End If

            If QQ(I, 2, I1, 11) > REC!(22, 0) Then
                REC!(22, 0) = QQ(I, 2, I1, 10) ' 3FGA
                REC!(22, 1) = 1 ' TIMES DONE
                REC!(22, 2) = 2 ' HALF
                RC$(22, 0) = players$(I, I1) ' NAME
                RC$(22, 1) = gameTeams$(I) ' TEAM
                RC$(22, 2) = VERSUS$(I) ' AT/VS
                RC$(22, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(22, 4) = Date$ ' DATE
            End If

            ' FREE THROWS -  MOST MADE NO MISSES, MOST ATT NONE MADE
            If plyrOff_GAME!(I, I1, 9) = plyrOff_GAME!(I, I1, 10) And plyrOff_GAME!(I, I1, 9) > REC!(23, 0) Then
                REC!(23, 0) = plyrOff_GAME!(I, I1, 9) ' MOST FTM
                RC$(23, 0) = players$(I, I1) ' NAME
                RC$(23, 1) = gameTeams$(I) ' TEAM
                RC$(23, 2) = VERSUS$(I) ' AT/VS
                RC$(23, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(23, 4) = Date$ ' DATE
            End If

            If plyrOff_GAME!(I, I1, 10) = 0 And plyrOff_GAME!(I, I1, 9) > REC!(24, 0) Then
                REC!(24, 0) = plyrOff_GAME!(I, I1, 10) ' 0 FTM /FTA
                RC$(24, 0) = players$(I, I1) ' NAME
                RC$(24, 1) = gameTeams$(I) ' TEAM
                RC$(24, 2) = VERSUS$(I) ' AT/VS
                RC$(24, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(24, 4) = Date$ ' DATE
            End If

            ' MADE FREE THROWS IN A GAME, HALF, QUARTER
            If plyrOff_GAME!(I, I1, 10) > REC!(25, 0) Then
                REC!(25, 0) = plyrOff_GAME!(I, I1, 10) ' FTM
                REC!(25, 1) = 1 ' TIMES DONE
                REC!(25, 2) = 0 ' GAME
                RC$(25, 0) = players$(I, I1) ' NAME
                RC$(25, 1) = gameTeams$(I) ' TEAM
                RC$(25, 2) = VERSUS$(I) ' AT/VS
                RC$(25, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(25, 4) = Date$ ' DATE
            End If

            If QQ(I, 1, I1, 4) > REC!(26, 0) Then
                REC!(26, 0) = QQ(I, 1, I1, 4) ' FTM
                REC!(26, 1) = 1 ' TIMES DONE
                REC!(26, 2) = 1 ' HALF
                RC$(26, 0) = players$(I, I1) ' NAME
                RC$(26, 1) = gameTeams$(I) ' TEAM
                RC$(26, 2) = VERSUS$(I) ' AT/VS
                RC$(26, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(26, 4) = Date$ ' DATE
            End If

            If QQ(I, 2, I1, 4) > REC!(26, 0) Then
                REC!(26, 0) = QQ(I, 2, I1, 4) ' FTM
                REC!(26, 1) = 1 ' TIMES DONE
                REC!(26, 2) = 2 ' HALF
                RC$(26, 0) = players$(I, I1) ' NAME
                RC$(26, 1) = gameTeams$(I) ' TEAM
                RC$(26, 2) = VERSUS$(I) ' AT/VS
                RC$(26, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(26, 4) = Date$ ' DATE
            End If

            ' FREE THROWS ATTEMPTS IN A GAME, HALF, QUARTER
            If plyrOff_GAME!(I, I1, 9) > REC!(28, 0) Then
                REC!(28, 0) = plyrOff_GAME!(I, I1, 9) ' FTA
                REC!(28, 1) = 1 ' TIMES DONE
                REC!(28, 2) = 0 ' GAME
                RC$(28, 0) = players$(I, I1) ' NAME
                RC$(28, 1) = gameTeams$(I) ' TEAM
                RC$(28, 2) = VERSUS$(I) ' AT/VS
                RC$(28, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(28, 4) = Date$ ' DATE
            End If

            If QQ(I, 1, I1, 3) > REC!(29, 0) Then
                REC!(29, 0) = QQ(I, 1, I1, 3) ' FTA
                REC!(29, 1) = 1 ' TIMES DONE
                REC!(29, 2) = 1 ' HALF
                RC$(29, 0) = players$(I, I1) ' NAME
                RC$(29, 1) = gameTeams$(I) ' TEAM
                RC$(29, 2) = VERSUS$(I) ' AT/VS
                RC$(29, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(29, 4) = Date$ ' DATE
            End If

            If QQ(I, 2, I1, 3) > REC!(29, 0) Then
                REC!(29, 0) = QQ(I, 2, I1, 3) ' FTM
                REC!(29, 1) = 1 ' TIMES DONE
                REC!(29, 2) = 2 ' HALF
                RC$(29, 0) = players$(I, I1) ' NAME
                RC$(29, 1) = gameTeams$(I) ' TEAM
                RC$(29, 2) = VERSUS$(I) ' AT/VS
                RC$(29, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(29, 4) = Date$ ' DATE
            End If

            ' TOTAL REBOUNDS IN A GAME, HALF, QUARTER
            If plyrOff_GAME!(I, I1, 11) > REC!(31, 0) Then
                REC!(31, 0) = plyrOff_GAME!(I, I1, 11) ' FTA
                REC!(31, 1) = 1 ' TIMES DONE
                REC!(31, 2) = 0 ' GAME
                RC$(31, 0) = players$(I, I1) ' NAME
                RC$(31, 1) = gameTeams$(I) ' TEAM
                RC$(31, 2) = VERSUS$(I) ' AT/VS
                RC$(31, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(31, 4) = Date$ ' DATE
            End If

            If QQ(I, 1, I1, 5) > REC!(32, 0) Then
                REC!(32, 0) = QQ(I, 1, I1, 5) ' RB
                REC!(32, 1) = 1 ' TIMES DONE
                REC!(32, 2) = 1 ' HALF
                RC$(32, 0) = players$(I, I1) ' NAME
                RC$(32, 1) = gameTeams$(I) ' TEAM
                RC$(32, 2) = VERSUS$(I) ' AT/VS
                RC$(32, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(32, 4) = Date$ ' DATE
            End If

            If QQ(I, 2, I1, 5) > REC!(32, 0) Then
                REC!(32, 0) = QQ(I, 2, I1, 5) ' RB
                REC!(32, 1) = 1 ' TIMES DONE
                REC!(32, 2) = 2 ' HALF
                RC$(32, 0) = players$(I, I1) ' NAME
                RC$(32, 1) = gameTeams$(I) ' TEAM
                RC$(32, 2) = VERSUS$(I) ' AT/VS
                RC$(32, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(32, 4) = Date$ ' DATE
            End If

            ' TOTAL OFFENSIVE REBOUNDS IN A GAME, HALF, QUARTER
            If plyrOff_GAME!(I, I1, 24) > REC!(34, 0) Then
                REC!(34, 0) = plyrOff_GAME!(I, I1, 24) ' FTA
                REC!(34, 1) = 1 ' TIMES DONE
                REC!(34, 2) = 0 ' GAME
                RC$(34, 0) = players$(I, I1) ' NAME
                RC$(34, 1) = gameTeams$(I) ' TEAM
                RC$(34, 2) = VERSUS$(I) ' AT/VS
                RC$(34, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(34, 4) = Date$ ' DATE
            End If

            If QQ(I, 1, I1, 12) > REC!(35, 0) Then
                REC!(35, 0) = QQ(I, 1, I1, 12) ' RB
                REC!(35, 1) = 1 ' TIMES DONE
                REC!(35, 2) = 1 ' HALF
                RC$(35, 0) = players$(I, I1) ' NAME
                RC$(35, 1) = gameTeams$(I) ' TEAM
                RC$(35, 2) = VERSUS$(I) ' AT/VS
                RC$(35, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(35, 4) = Date$ ' DATE
            End If

            If QQ(I, 2, I1, 12) > REC!(35, 0) Then
                REC!(35, 0) = QQ(I, 2, I1, 12) ' RB
                REC!(35, 1) = 1 ' TIMES DONE
                REC!(35, 2) = 2 ' HALF
                RC$(35, 0) = players$(I, I1) ' NAME
                RC$(35, 1) = gameTeams$(I) ' TEAM
                RC$(35, 2) = VERSUS$(I) ' AT/VS
                RC$(35, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(35, 4) = Date$ ' DATE
            End If

            ' TOTAL DEFENSIVE REBOUNDS IN A GAME, HALF, QUARTER
            If plyrOff_GAME!(I, I1, 11) - plyrOff_GAME!(I, I1, 24) > REC!(37, 0) Then
                REC!(37, 0) = plyrOff_GAME!(I, I1, 11) - plyrOff_GAME!(I, I1, 24) ' FTA
                REC!(37, 1) = 1 ' TIMES DONE
                REC!(37, 2) = 0 ' GAME
                RC$(37, 0) = players$(I, I1) ' NAME
                RC$(37, 1) = gameTeams$(I) ' TEAM
                RC$(37, 2) = VERSUS$(I) ' AT/VS
                RC$(37, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(37, 4) = Date$ ' DATE
            End If

            If QQ(I, 1, I1, 5) - QQ(I, 1, I1, 12) > REC!(38, 0) Then
                REC!(38, 0) = QQ(I, 1, I1, 5) - QQ(I, 1, I1, 12) ' RB
                REC!(38, 1) = 1 ' TIMES DONE
                REC!(38, 2) = 1 ' HALF
                RC$(38, 0) = players$(I, I1) ' NAME
                RC$(38, 1) = gameTeams$(I) ' TEAM
                RC$(38, 2) = VERSUS$(I) ' AT/VS
                RC$(38, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(38, 4) = Date$ ' DATE
            End If

            If QQ(I, 2, I1, 5) - QQ(I, 2, I1, 12) > REC!(38, 0) Then
                REC!(38, 0) = QQ(I, 2, I1, 5) - QQ(I, 2, I1, 12) ' RB
                REC!(38, 1) = 1 ' TIMES DONE
                REC!(38, 2) = 2 ' HALF
                RC$(38, 0) = players$(I, I1) ' NAME
                RC$(38, 1) = gameTeams$(I) ' TEAM
                RC$(38, 2) = VERSUS$(I) ' AT/VS
                RC$(38, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(38, 4) = Date$ ' DATE
            End If

            ' ASSISTS IN A GAME, HALF, QUARTER
            If plyrOff_GAME!(I, I1, 14) > REC!(40, 0) Then
                REC!(40, 0) = plyrOff_GAME!(I, I1, 14) ' FTA
                REC!(40, 1) = 1 ' TIMES DONE
                REC!(40, 2) = 0 ' GAME
                RC$(40, 0) = players$(I, I1) ' NAME
                RC$(40, 1) = gameTeams$(I) ' TEAM
                RC$(40, 2) = VERSUS$(I) ' AT/VS
                RC$(40, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(40, 4) = Date$ ' DATE
            End If

            If QQ(I, 1, I1, 8) > REC!(41, 0) Then
                REC!(41, 0) = QQ(I, 1, I1, 8) ' FTA
                REC!(41, 1) = 1 ' TIMES DONE
                REC!(41, 2) = 1 ' HALF
                RC$(41, 0) = players$(I, I1) ' NAME
                RC$(41, 1) = gameTeams$(I) ' TEAM
                RC$(41, 2) = VERSUS$(I) ' AT/VS
                RC$(41, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(41, 4) = Date$ ' DATE
            End If

            If QQ(I, 2, I1, 8) > REC!(41, 0) Then
                REC!(41, 0) = QQ(I, 2, I1, 8) ' FTM
                REC!(41, 1) = 1 ' TIMES DONE
                REC!(41, 2) = 2 ' HALF
                RC$(41, 0) = players$(I, I1) ' NAME
                RC$(41, 1) = gameTeams$(I) ' TEAM
                RC$(41, 2) = VERSUS$(I) ' AT/VS
                RC$(41, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(41, 4) = Date$ ' DATE
            End If

            ' STEALS IN A GAME, HALF, QUARTER
            If plyrOff_GAME!(I, I1, 13) > REC!(43, 0) Then
                REC!(43, 0) = plyrOff_GAME!(I, I1, 13) ' FTA
                REC!(43, 1) = 1 ' TIMES DONE
                REC!(43, 2) = 0 ' GAME
                RC$(43, 0) = players$(I, I1) ' NAME
                RC$(43, 1) = gameTeams$(I) ' TEAM
                RC$(43, 2) = VERSUS$(I) ' AT/VS
                RC$(43, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(43, 4) = Date$ ' DATE
            End If
            If QQ(I, 1, I1, 7) > REC!(44, 0) Then
                REC!(44, 0) = QQ(I, 1, I1, 7) ' FTA
                REC!(44, 1) = 1 ' TIMES DONE
                REC!(44, 2) = 1 ' HALF
                RC$(44, 0) = players$(I, I1) ' NAME
                RC$(44, 1) = gameTeams$(I) ' TEAM
                RC$(44, 2) = VERSUS$(I) ' AT/VS
                RC$(44, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(44, 4) = Date$ ' DATE
            End If
            If QQ(I, 2, I1, 7) > REC!(44, 0) Then
                REC!(44, 0) = QQ(I, 2, I1, 7) ' FTM
                REC!(44, 1) = 1 ' TIMES DONE
                REC!(44, 2) = 2 ' HALF
                RC$(44, 0) = players$(I, I1) ' NAME
                RC$(44, 1) = gameTeams$(I) ' TEAM
                RC$(44, 2) = VERSUS$(I) ' AT/VS
                RC$(44, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(44, 4) = Date$ ' DATE
            End If

            ' BLOCKS IN A GAME, HALF, QUARTER
            If plyrOff_GAME!(I, I1, 15) > REC!(46, 0) Then
                REC!(46, 0) = plyrOff_GAME!(I, I1, 15) ' FTA
                REC!(46, 1) = 1 ' TIMES DONE
                REC!(46, 2) = 0 ' GAME
                RC$(46, 0) = players$(I, I1) ' NAME
                RC$(46, 1) = gameTeams$(I) ' TEAM
                RC$(46, 2) = VERSUS$(I) ' AT/VS
                RC$(46, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(46, 4) = Date$ ' DATE
            End If

            If QQ(I, 1, I1, 9) > REC!(47, 0) Then
                REC!(47, 0) = QQ(I, 1, I1, 9) ' FTA
                REC!(47, 1) = 1 ' TIMES DONE
                REC!(47, 2) = 1 ' HALF
                RC$(47, 0) = players$(I, I1) ' NAME
                RC$(47, 1) = gameTeams$(I) ' TEAM
                RC$(47, 2) = VERSUS$(I) ' AT/VS
                RC$(47, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(47, 4) = Date$ ' DATE
            End If

            If QQ(I, 2, I1, 9) > REC!(47, 0) Then
                REC!(47, 0) = QQ(I, 2, I1, 9) ' FTM
                REC!(47, 1) = 1 ' TIMES DONE
                REC!(47, 2) = 2 ' HALF
                RC$(47, 0) = players$(I, I1) ' NAME
                RC$(47, 1) = gameTeams$(I) ' TEAM
                RC$(47, 2) = VERSUS$(I) ' AT/VS
                RC$(47, 3) = gameTeams$(1 - I) ' OPPONENT
                RC$(47, 4) = Date$ ' DATE
            End If

        Next
    Next

    ' MOST OVERTIME PERIODS
    If H - 3 > TREC!(0, 0) Then
        TREC!(0, 0) = H - 3
        TREC!(0, 1) = score(0, 0)
        TREC!(0, 2) = score(1, 0)
        TRC$(0, 0) = gameTeams$(0)
        TRC$(0, 1) = gameTeams$(1)
        TRC$(0, 2) = Date$
    End If

    For I = 0 To 1

        If score(I, 0) > TREC!(1, 0) Then
            TREC!(1, 0) = score(I, 0)
            TREC!(1, 1) = 1
            TREC!(1, 2) = 0
            TRC$(1, 0) = gameTeams$(I)
            TRC$(1, 1) = VERSUS$(I)
            TRC$(1, 2) = gameTeams$(1 - I)
            TRC$(1, 3) = Date$
        End If

        If score(I, 0) < TREC!(2, 0) Then
            TREC!(2, 0) = score(I, 0)
            TREC!(2, 1) = 1
            TREC!(2, 2) = 0
            TRC$(2, 0) = gameTeams$(I)
            TRC$(2, 1) = VERSUS$(I)
            TRC$(2, 2) = gameTeams$(1 - I)
            TRC$(2, 3) = Date$
        End If

        If score(I, 0) + score(1 - I, 0) > TREC!(3, 0) Then
            TREC!(3, 0) = score(I, 0) + score(1 - I, 0)
            TREC!(3, 1) = score(I, 0)
            TREC!(3, 2) = score(1 - I, 0)
            TRC$(3, 0) = gameTeams$(I)
            TRC$(3, 1) = VERSUS$(I)
            TRC$(3, 2) = gameTeams$(1 - I)
            TRC$(3, 3) = Date$
        End If

        If score(I, 0) + score(1 - I, 0) < TREC!(4, 0) Then
            TREC!(4, 0) = score(I, 0) + score(1 - I, 0)
            TREC!(4, 1) = score(I, 0)
            TREC!(4, 2) = score(1 - I, 0)
            TRC$(4, 0) = gameTeams$(I)
            TRC$(4, 1) = VERSUS$(I)
            TRC$(4, 2) = gameTeams$(1 - I)
            TRC$(4, 3) = Date$
        End If

        If score(I, 1) > TREC!(6, 0) Then
            TREC!(6, 0) = score(I, 1)
            TREC!(6, 1) = 1
            TREC!(6, 2) = 0
            TRC$(6, 0) = gameTeams$(I)
            TRC$(6, 1) = VERSUS$(I)
            TRC$(6, 2) = gameTeams$(1 - I)
            TRC$(6, 3) = Date$
        End If

        If score(I, 1) < TREC!(7, 0) Then
            TREC!(7, 0) = score(I, 1)
            TREC!(7, 1) = 1
            TREC!(7, 2) = 0
            TRC$(7, 0) = gameTeams$(I)
            TRC$(7, 1) = VERSUS$(I)
            TRC$(7, 2) = gameTeams$(1 - I)
            TRC$(7, 3) = Date$
        End If

        If score(I, 1) + score(1 - I, 1) > TREC!(8, 0) Then
            TREC!(8, 0) = score(I, 1) + score(1 - I, 1)
            TREC!(8, 1) = score(I, 1)
            TREC!(8, 2) = score(1 - I, 1)
            TRC$(8, 0) = gameTeams$(I)
            TRC$(8, 1) = VERSUS$(I)
            TRC$(8, 2) = gameTeams$(1 - I)
            TRC$(8, 3) = Date$
        End If

        If score(I, 1) + score(1 - I, 1) < TREC!(9, 0) Then
            TREC!(9, 0) = score(I, 1) + score(1 - I, 1)
            TREC!(9, 1) = score(I, 1)
            TREC!(9, 2) = score(1 - I, 1)
            TRC$(9, 0) = gameTeams$(I)
            TRC$(9, 1) = VERSUS$(I)
            TRC$(9, 2) = gameTeams$(1 - I)
            TRC$(9, 3) = Date$
        End If

        If score(I, 2) > TREC!(10, 0) Then
            TREC!(10, 0) = score(I, 2)
            TREC!(10, 1) = 1
            TREC!(10, 2) = 0
            TRC$(10, 0) = gameTeams$(I)
            TRC$(10, 1) = VERSUS$(I)
            TRC$(10, 2) = gameTeams$(1 - I)
            TRC$(10, 3) = Date$
        End If

        If score(I, 2) < TREC!(11, 0) Then
            TREC!(11, 0) = score(I, 2)
            TREC!(11, 1) = 1
            TREC!(11, 2) = 0
            TRC$(11, 0) = gameTeams$(I)
            TRC$(11, 1) = VERSUS$(I)
            TRC$(11, 2) = gameTeams$(1 - I)
            TRC$(11, 3) = Date$
        End If

        If score(I, 2) + score(1 - I, 2) > TREC!(12, 0) Then
            TREC!(12, 0) = score(I, 2) + score(1 - I, 2)
            TREC!(12, 1) = score(I, 2)
            TREC!(12, 2) = score(1 - I, 2)
            TRC$(12, 0) = gameTeams$(I)
            TRC$(12, 1) = VERSUS$(I)
            TRC$(12, 2) = gameTeams$(1 - I)
            TRC$(12, 3) = Date$
        End If

        If score(I, 2) + score(1 - I, 2) < TREC!(13, 0) Then
            TREC!(13, 0) = score(I, 2) + score(1 - I, 2)
            TREC!(13, 1) = score(I, 2)
            TREC!(13, 2) = score(1 - I, 2)
            TRC$(13, 0) = gameTeams$(I)
            TRC$(13, 1) = VERSUS$(I)
            TRC$(13, 2) = gameTeams$(1 - I)
            TRC$(13, 3) = Date$
        End If

        For I2 = 3 To 8
            If score(I, I2) > TREC!(14, 0) Then
                TREC!(14, 0) = score(I, I2)
                TREC!(14, 1) = I2
                TREC!(14, 2) = 0
                TRC$(14, 0) = gameTeams$(I)
                TRC$(14, 1) = VERSUS$(I)
                TRC$(14, 2) = gameTeams$(1 - I)
                TRC$(14, 3) = Date$
            End If

            If score(I, I2) < TREC!(15, 0) Then
                TREC!(15, 0) = score(I, I2)
                TREC!(15, 1) = I2
                TREC!(15, 2) = 0
                TRC$(15, 0) = gameTeams$(I)
                TRC$(15, 1) = VERSUS$(I)
                TRC$(15, 2) = gameTeams$(1 - I)
                TRC$(15, 3) = Date$
            End If

            If score(I, I2) + score(1 - I, I2) > TREC!(16, 0) Then
                TREC!(16, 0) = score(I, I2) + score(1 - I, I2)
                TREC!(16, 1) = score(I, I2)
                TREC!(16, 2) = score(1 - I, I2)
                TRC$(16, 0) = gameTeams$(I)
                TRC$(16, 1) = VERSUS$(I)
                TRC$(16, 2) = gameTeams$(1 - I)
                TRC$(16, 3) = Date$
            End If

            If score(I, I2) + score(1 - I, I2) < TREC!(17, 0) Then
                TREC!(17, 0) = score(I, I2) + score(1 - I, I2)
                TREC!(17, 1) = score(I, I2)
                TREC!(17, 2) = score(1 - I, I2)
                TRC$(17, 0) = gameTeams$(I)
                TRC$(17, 1) = VERSUS$(I)
                TRC$(17, 2) = gameTeams$(1 - I)
                TRC$(17, 3) = Date$
            End If
        Next I2

        ' TEAM FIELD GOAL PERCENTAGES
        For I1 = 0 To 14: V8(I, I1) = 0: V8(1 - I, I1) = 0: Next
        For I2 = 0 To 1
            For I1 = 0 To 13
                V8(I2, 0) = V8(I2, 0) + plyrOff_GAME!(I2, I1, 8)
                V8(I2, 1) = V8(I2, 1) + plyrOff_GAME!(I2, I1, 7)
                V8(I2, 2) = V8(I2, 2) + plyrOff_GAME!(I2, I1, 10)
                V8(I2, 3) = V8(I2, 3) + plyrOff_GAME!(I2, I1, 9)
                V8(I2, 4) = V8(I2, 4) + plyrOff_GAME!(I2, I1, 11)
                V8(I2, 5) = V8(I2, 5) + (plyrOff_GAME!(I2, I1, 8) * 2) + plyrOff_GAME!(I2, I1, 10) + threeFG(I2, I1, 0)
                V8(I2, 13) = V8(I2, 13) + threeFG(I2, I1, 0)
                V8(I2, 14) = V8(I2, 14) + threeFG(I2, I1, 1)
                V8(I2, 6) = V8(I2, 6) + plyrOff_GAME!(I2, I1, 12)
                V8(I2, 7) = V8(I2, 7) + plyrOff_GAME!(I2, I1, 14)
                V8(I2, 8) = V8(I2, 8) + plyrOff_GAME!(I2, I1, 15)
                V8(I2, 9) = V8(I2, 9) + plyrOff_GAME!(I2, I1, 13)
                V8(I2, 11) = V8(I2, 11) + plyrOff_GAME!(I2, I1, 24)
                V8(I2, 12) = V8(I2, 12) + plyrOff_GAME!(I2, I1, 23)
                V8(I2, 10) = V8(I2, 10) + timePlayed(I2, I1)
            Next
        Next

        If V8(I, 1) <> 0 Then

            If V8(I, 0) / V8(I, 1) > TREC!(30, 0) Then
                TREC!(30, 0) = V8(I, 0) / V8(I, 1)
                TREC!(30, 1) = V8(I, 0)
                TREC!(30, 2) = V8(I, 1)
                TRC$(30, 0) = gameTeams$(I)
                TRC$(30, 1) = VERSUS$(I)
                TRC$(30, 2) = gameTeams$(1 - I)
                TRC$(30, 3) = Date$
            End If

            If V8(I, 0) / V8(I, 1) < TREC!(31, 0) Then
                TREC!(31, 0) = V8(I, 0) / V8(I, 1)
                TREC!(31, 1) = V8(I, 0)
                TREC!(31, 2) = V8(I, 1)
                TRC$(31, 0) = gameTeams$(I)
                TRC$(31, 1) = VERSUS$(I)
                TRC$(31, 2) = gameTeams$(1 - I)
                TRC$(31, 3) = Date$
            End If

        End If

        If V8(I, 1) + V8(1 - I, 1) <> 0 Then

            If (V8(I, 0) + V8(1 - I, 0)) / (V8(I, 1) + V8(1 - I, 1)) > TREC!(32, 0) Then
                TREC!(32, 0) = (V8(I, 0) + V8(1 - I, 0)) / (V8(I, 1) + V8(1 - I, 1))
                TREC!(32, 1) = V8(I, 0) / V8(I, 1)
                TREC!(32, 2) = V8(1 - I, 0) / (V8(1 - I, 1) + 0.01)
                TRC$(32, 0) = gameTeams$(I)
                TRC$(32, 1) = VERSUS$(I)
                TRC$(32, 2) = gameTeams$(1 - I)
                TRC$(32, 3) = Date$
            End If

            If (V8(I, 0) + V8(1 - I, 0)) / (V8(I, 1) + V8(1 - I, 1)) < TREC!(33, 0) Then
                TREC!(33, 0) = (V8(I, 0) + V8(1 - I, 0)) / (V8(I, 1) + V8(1 - I, 1))
                TREC!(33, 1) = V8(I, 0) / V8(I, 1)
                TREC!(33, 2) = V8(1 - I, 0) / (V8(1 - I, 1) + 0.01)
                TRC$(33, 0) = gameTeams$(I)
                TRC$(33, 1) = VERSUS$(I)
                TRC$(33, 2) = gameTeams$(1 - I)
                TRC$(33, 3) = Date$
            End If

        End If

        ' TEAM FIELD GOALS MADE
        If V8(I, 0) > TREC!(34, 0) Then
            TREC!(34, 0) = V8(I, 0)
            TREC!(34, 1) = 0
            TREC!(34, 2) = 0
            TRC$(34, 0) = gameTeams$(I)
            TRC$(34, 1) = VERSUS$(I)
            TRC$(34, 2) = gameTeams$(1 - I)
            TRC$(34, 3) = Date$
        End If

        If V8(I, 0) < TREC!(35, 0) Then
            TREC!(35, 0) = V8(I, 0)
            TREC!(35, 1) = 0
            TREC!(35, 2) = 0
            TRC$(35, 0) = gameTeams$(I)
            TRC$(35, 1) = VERSUS$(I)
            TRC$(35, 2) = gameTeams$(1 - I)
            TRC$(35, 3) = Date$
        End If

        If V8(I, 0) + V8(1 - I, 0) > TREC!(36, 0) Then
            TREC!(36, 0) = V8(I, 0) + V8(1 - I, 0)
            TREC!(36, 1) = V8(I, 0)
            TREC!(36, 2) = V8(1 - I, 0)
            TRC$(36, 0) = gameTeams$(I)
            TRC$(36, 1) = VERSUS$(I)
            TRC$(36, 2) = gameTeams$(1 - I)
            TRC$(36, 3) = Date$
        End If

        If V8(I, 0) + V8(1 - I, 0) < TREC!(37, 0) Then
            TREC!(37, 0) = V8(I, 0) + V8(1 - I, 0)
            TREC!(37, 1) = V8(I, 0)
            TREC!(37, 2) = V8(1 - I, 0)
            TRC$(37, 0) = gameTeams$(I)
            TRC$(37, 1) = VERSUS$(I)
            TRC$(37, 2) = gameTeams$(1 - I)
            TRC$(37, 3) = Date$
        End If

        If QR(I, 1, 0) > TREC!(38, 0) Then
            TREC!(38, 0) = QR(I, 1, 0)
            TREC!(38, 1) = 1
            TREC!(38, 2) = 0
            TRC$(38, 0) = gameTeams$(I)
            TRC$(38, 1) = VERSUS$(I)
            TRC$(38, 2) = gameTeams$(1 - I)
            TRC$(38, 3) = Date$
        End If

        If QR(I, 2, 0) > TREC!(38, 0) Then
            TREC!(38, 0) = QR(I, 2, 0)
            TREC!(38, 1) = 2
            TREC!(38, 2) = 0
            TRC$(38, 0) = gameTeams$(I)
            TRC$(38, 1) = VERSUS$(I)
            TRC$(38, 2) = gameTeams$(1 - I)
            TRC$(38, 3) = Date$
        End If

        If QR(I, 1, 0) + QR(1 - I, 1, 0) > TREC!(39, 0) Then
            TREC!(39, 0) = QR(I, 1, 0) + QR(1 - I, 1, 0)
            TREC!(39, 1) = 1
            TREC!(39, 2) = 0
            TRC$(39, 0) = gameTeams$(I)
            TRC$(39, 1) = VERSUS$(I)
            TRC$(39, 2) = gameTeams$(1 - I)
            TRC$(39, 3) = Date$
        End If

        If QR(I, 2, 0) + QR(1 - I, 2, 0) > TREC!(39, 0) Then
            TREC!(39, 0) = QR(I, 2, 0) + QR(1 - I, 2, 0)
            TREC!(39, 1) = 2
            TREC!(39, 2) = 0
            TRC$(39, 0) = gameTeams$(I)
            TRC$(39, 1) = VERSUS$(I)
            TRC$(39, 2) = gameTeams$(1 - I)
            TRC$(39, 3) = Date$
        End If

        'TEAM FIELD GOAL ATTEMPTS
        If V8(I, 1) > TREC!(42, 0) Then
            TREC!(42, 0) = V8(I, 1)
            TREC!(42, 1) = 0
            TREC!(42, 2) = 0
            TRC$(42, 0) = gameTeams$(I)
            TRC$(42, 1) = VERSUS$(I)
            TRC$(42, 2) = gameTeams$(1 - I)
            TRC$(42, 3) = Date$
        End If

        If V8(I, 1) < TREC!(43, 0) Then
            TREC!(43, 0) = V8(I, 1)
            TREC!(43, 1) = 0
            TREC!(43, 2) = 0
            TRC$(43, 0) = gameTeams$(I)
            TRC$(43, 1) = VERSUS$(I)
            TRC$(43, 2) = gameTeams$(1 - I)
            TRC$(43, 3) = Date$
        End If

        If V8(I, 1) + V8(1 - I, 1) > TREC!(44, 0) Then
            TREC!(44, 0) = V8(I, 1) + V8(1 - I, 1)
            TREC!(44, 1) = V8(I, 1)
            TREC!(44, 2) = V8(1 - I, 1)
            TRC$(44, 0) = gameTeams$(I)
            TRC$(44, 1) = VERSUS$(I)
            TRC$(44, 2) = gameTeams$(1 - I)
            TRC$(44, 3) = Date$
        End If

        If V8(I, 1) + V8(1 - I, 1) < TREC!(45, 0) Then
            TREC!(45, 0) = V8(I, 1) + V8(1 - I, 1)
            TREC!(45, 1) = V8(I, 1)
            TREC!(45, 2) = V8(1 - I, 1)
            TRC$(45, 0) = gameTeams$(I)
            TRC$(45, 1) = VERSUS$(I)
            TRC$(45, 2) = gameTeams$(1 - I)
            TRC$(45, 3) = Date$
        End If

        If QR(I, 1, 1) > TREC!(46, 0) Then
            TREC!(46, 0) = QR(I, 1, 1)
            TREC!(46, 1) = 1
            TREC!(46, 2) = 0
            TRC$(46, 0) = gameTeams$(I)
            TRC$(46, 1) = VERSUS$(I)
            TRC$(46, 2) = gameTeams$(1 - I)
            TRC$(46, 3) = Date$
        End If

        If QR(I, 2, 1) > TREC!(46, 0) Then
            TREC!(46, 0) = QR(I, 2, 1)
            TREC!(46, 1) = 2
            TREC!(46, 2) = 0
            TRC$(46, 0) = gameTeams$(I)
            TRC$(46, 1) = VERSUS$(I)
            TRC$(46, 2) = gameTeams$(1 - I)
            TRC$(46, 3) = Date$
        End If

        If QR(I, 1, 1) + QR(1 - I, 1, 1) > TREC!(47, 0) Then
            TREC!(47, 0) = QR(I, 1, 1) + QR(1 - I, 1, 1)
            TREC!(47, 1) = 1
            TREC!(47, 2) = QR(I, 1, 1)
            TRC$(47, 0) = gameTeams$(I)
            TRC$(47, 1) = VERSUS$(I)
            TRC$(47, 2) = gameTeams$(1 - I)
            TRC$(47, 3) = Date$
        End If

        If QR(I, 2, 1) + QR(1 - I, 2, 1) > TREC!(47, 0) Then
            TREC!(47, 0) = QR(I, 2, 1) + QR(1 - I, 2, 1)
            TREC!(47, 1) = 2
            TREC!(47, 2) = QR(I, 2, 1)
            TRC$(47, 0) = gameTeams$(I)
            TRC$(47, 1) = VERSUS$(I)
            TRC$(47, 2) = gameTeams$(1 - I)
            TRC$(47, 3) = Date$
        End If

        'TEAM FIELD GOAL ATTEMPTS
        If V8(I, 13) = V8(I, 14) And V8(I, 14) > TREC!(50, 0) Then
            TREC!(50, 0) = V8(I, 13)
            TREC!(50, 1) = 0
            TREC!(50, 2) = 0
            TRC$(50, 0) = gameTeams$(I)
            TRC$(50, 1) = VERSUS$(I)
            TRC$(50, 2) = gameTeams$(1 - I)
            TRC$(50, 3) = Date$
        End If

        'TEAM FIELD GOAL ATTEMPTS MOST MADE
        If V8(I, 13) = V8(I, 14) And V8(1 - I, 13) = V8(1 - I, 14) And V8(I, 14) + V8(1 - I, 14) > TREC!(51, 0) Then
            TREC!(51, 0) = V8(I, 13)
            TREC!(51, 1) = V8(1 - I, 13)
            TREC!(51, 2) = 0
            TRC$(51, 0) = gameTeams$(I)
            TRC$(51, 1) = VERSUS$(I)
            TRC$(51, 2) = gameTeams$(1 - I)
            TRC$(51, 3) = Date$
        End If

        'TEAM FIELD GOAL ATTEMPTS NONE MADE
        If V8(I, 13) = 0 And V8(I, 14) > TREC!(52, 0) Then
            TREC!(52, 0) = V8(I, 14)
            TREC!(52, 1) = 0
            TREC!(52, 2) = 0
            TRC$(52, 0) = gameTeams$(I)
            TRC$(52, 1) = VERSUS$(I)
            TRC$(52, 2) = gameTeams$(1 - I)
            TRC$(52, 3) = Date$
        End If

        'TEAM FIELD GOAL ATTEMPTS NONE MADE
        If V8(I, 13) > TREC!(53, 0) Then
            TREC!(53, 0) = V8(I, 13)
            TREC!(53, 1) = 0
            TREC!(53, 2) = 0
            TRC$(53, 0) = gameTeams$(I)
            TRC$(53, 1) = VERSUS$(I)
            TRC$(53, 2) = gameTeams$(1 - I)
            TRC$(53, 3) = Date$
        End If

        'TEAM FIELD GOAL ATTEMPTS NONE MADE
        If V8(I, 13) + V8(1 - I, 13) > TREC!(54, 0) Then
            TREC!(54, 0) = V8(I, 13) + V8(1 - I, 13)
            TREC!(54, 1) = V8(I, 13)
            TREC!(54, 2) = V8(1 - I, 13)
            TRC$(54, 0) = gameTeams$(I)
            TRC$(54, 1) = VERSUS$(I)
            TRC$(54, 2) = gameTeams$(1 - I)
            TRC$(54, 3) = Date$
        End If

        If QR(I, 1, 13) > TREC!(55, 0) Then
            TREC!(55, 0) = QR(I, 1, 13)
            TREC!(55, 1) = 1
            TREC!(55, 2) = 0
            TRC$(55, 0) = gameTeams$(I)
            TRC$(55, 1) = VERSUS$(I)
            TRC$(55, 2) = gameTeams$(1 - I)
            TRC$(55, 3) = Date$
        End If

        If QR(I, 2, 13) > TREC!(55, 0) Then
            TREC!(55, 0) = QR(I, 2, 13)
            TREC!(55, 1) = 2
            TREC!(55, 2) = 0
            TRC$(55, 0) = gameTeams$(I)
            TRC$(55, 1) = VERSUS$(I)
            TRC$(55, 2) = gameTeams$(1 - I)
            TRC$(55, 3) = Date$
        End If

        'TEAM FIELD GOAL ATTEMPTS NONE MADE
        If V8(I, 14) > TREC!(57, 0) Then
            TREC!(57, 0) = V8(I, 14)
            TREC!(57, 1) = 0
            TREC!(57, 2) = 0
            TRC$(57, 0) = gameTeams$(I)
            TRC$(57, 1) = VERSUS$(I)
            TRC$(57, 2) = gameTeams$(1 - I)
            TRC$(57, 3) = Date$
        End If

        'TEAM FIELD GOAL ATTEMPTS NONE MADE
        If V8(I, 14) + V8(1 - I, 14) > TREC!(58, 0) Then
            TREC!(58, 0) = V8(I, 14) + V8(1 - I, 14)
            TREC!(58, 1) = V8(I, 14)
            TREC!(58, 2) = V8(1 - I, 14)
            TRC$(58, 0) = gameTeams$(I)
            TRC$(58, 1) = VERSUS$(I)
            TRC$(58, 2) = gameTeams$(1 - I)
            TRC$(58, 3) = Date$
        End If

        If QR(I, 1, 14) > TREC!(59, 0) Then
            TREC!(59, 0) = QR(I, 1, 14)
            TREC!(59, 1) = 1
            TREC!(59, 2) = 0
            TRC$(59, 0) = gameTeams$(I)
            TRC$(59, 1) = VERSUS$(I)
            TRC$(59, 2) = gameTeams$(1 - I)
            TRC$(59, 3) = Date$
        End If

        If QR(I, 2, 14) > TREC!(59, 0) Then
            TREC!(59, 0) = QR(I, 2, 14)
            TREC!(59, 1) = 2
            TREC!(59, 2) = 0
            TRC$(59, 0) = gameTeams$(I)
            TRC$(59, 1) = VERSUS$(I)
            TRC$(59, 2) = gameTeams$(1 - I)
            TRC$(59, 3) = Date$
        End If

        ' FREE THROW ATTEMPTS NO MISS
        If V8(I, 2) = V8(I, 3) And V8(I, 2) > TREC!(60, 0) Then
            TREC!(60, 0) = V8(I, 2)
            TREC!(60, 1) = 0
            TREC!(60, 2) = 0
            TRC$(60, 0) = gameTeams$(I)
            TRC$(60, 1) = VERSUS$(I)
            TRC$(60, 2) = gameTeams$(1 - I)
            TRC$(60, 3) = Date$
        End If

        ' FREE THROW ATTEMPTS LOW %
        If V8(I, 3) <> 0 Then

            If V8(I, 2) / V8(I, 3) < TREC!(61, 0) Then
                TREC!(61, 0) = V8(I, 2) / V8(I, 3)
                TREC!(61, 1) = V8(I, 2)
                TREC!(61, 2) = V8(I, 3)
                TRC$(61, 0) = gameTeams$(I)
                TRC$(61, 1) = VERSUS$(I)
                TRC$(61, 2) = gameTeams$(1 - I)
                TRC$(61, 3) = Date$
            End If

        End If

        ' FREE THROW ATTEMPTS COMBINED HIGH %
        If V8(I, 3) + V8(1 - I, 3) <> 0 Then

            If (V8(I, 2) + V8(1 - I, 2)) / (V8(I, 3) + V8(1 - I, 3)) > TREC!(62, 0) Then
                TREC!(62, 0) = (V8(I, 2) + V8(1 - I, 2)) / (V8(I, 3) + V8(1 - I, 3))
                TREC!(62, 1) = V8(I, 2) / V8(I, 3)
                TREC!(62, 2) = V8(1 - I, 2) / (V8(1 - I, 3) + 0.01)
                TRC$(62, 0) = gameTeams$(I)
                TRC$(62, 1) = VERSUS$(I)
                TRC$(62, 2) = gameTeams$(1 - I)
                TRC$(62, 3) = Date$
            End If

            ' FREE THROW ATTEMPTS COMBINED LOW %
            If (V8(I, 2) + V8(1 - I, 2)) / (V8(I, 3) + V8(1 - I, 3)) < TREC!(63, 0) Then
                TREC!(63, 0) = (V8(I, 2) + V8(1 - I, 2)) / (V8(I, 3) + V8(1 - I, 3))
                TREC!(63, 1) = V8(I, 2) / V8(I, 3)
                TREC!(63, 2) = V8(1 - I, 2) / (V8(1 - I, 3) + 0.01)
                TRC$(63, 0) = gameTeams$(I)
                TRC$(63, 1) = VERSUS$(I)
                TRC$(63, 2) = gameTeams$(1 - I)
                TRC$(63, 3) = Date$
            End If
        End If

        ' TEAM FREE THROWS MADE
        104 If V8(I, 2) > TREC!(64, 0) Then
            TREC!(64, 0) = V8(I, 2)
            TREC!(64, 1) = 0
            TREC!(64, 2) = 0
            TRC$(64, 0) = gameTeams$(I)
            TRC$(64, 1) = VERSUS$(I)
            TRC$(64, 2) = gameTeams$(1 - I)
            TRC$(64, 3) = Date$
        End If

        If V8(I, 2) < TREC!(65, 0) Then
            TREC!(65, 0) = V8(I, 2)
            TREC!(65, 1) = 0
            TREC!(65, 2) = 0
            TRC$(65, 0) = gameTeams$(I)
            TRC$(65, 1) = VERSUS$(I)
            TRC$(65, 2) = gameTeams$(1 - I)
            TRC$(65, 3) = Date$
        End If

        If V8(I, 2) + V8(1 - I, 2) > TREC!(66, 0) Then
            TREC!(66, 0) = V8(I, 2) + V8(1 - I, 2)
            TREC!(66, 1) = V8(I, 2)
            TREC!(66, 2) = V8(1 - I, 2)
            TRC$(66, 0) = gameTeams$(I)
            TRC$(66, 1) = VERSUS$(I)
            TRC$(66, 2) = gameTeams$(1 - I)
            TRC$(66, 3) = Date$
        End If

        If V8(I, 2) + V8(1 - I, 2) < TREC!(67, 0) Then
            TREC!(67, 0) = V8(I, 2) + V8(1 - I, 2)
            TREC!(67, 1) = V8(I, 2)
            TREC!(67, 2) = V8(1 - I, 2)
            TRC$(67, 0) = gameTeams$(I)
            TRC$(67, 1) = VERSUS$(I)
            TRC$(67, 2) = gameTeams$(1 - I)
            TRC$(67, 3) = Date$
        End If

        If QR(I, 1, 2) > TREC!(68, 0) Then
            TREC!(68, 0) = QR(I, 1, 2)
            TREC!(68, 1) = 1
            TREC!(68, 2) = 0
            TRC$(68, 0) = gameTeams$(I)
            TRC$(68, 1) = VERSUS$(I)
            TRC$(68, 2) = gameTeams$(1 - I)
            TRC$(68, 3) = Date$
        End If

        If QR(I, 2, 2) > TREC!(68, 0) Then
            TREC!(68, 0) = QR(I, 2, 2)
            TREC!(68, 1) = 2
            TREC!(68, 2) = 0
            TRC$(68, 0) = gameTeams$(I)
            TRC$(68, 1) = VERSUS$(I)
            TRC$(68, 2) = gameTeams$(1 - I)
            TRC$(68, 3) = Date$
        End If

        ' TEAM FREE THROWS ATTEMPTED
        If V8(I, 3) > TREC!(72, 0) Then
            TREC!(72, 0) = V8(I, 3)
            TREC!(72, 1) = 0
            TREC!(72, 2) = 0
            TRC$(72, 0) = gameTeams$(I)
            TRC$(72, 1) = VERSUS$(I)
            TRC$(72, 2) = gameTeams$(1 - I)
            TRC$(72, 3) = Date$
        End If

        If V8(I, 3) < TREC!(73, 0) Then
            TREC!(73, 0) = V8(I, 3)
            TREC!(73, 1) = 0
            TREC!(73, 2) = 0
            TRC$(73, 0) = gameTeams$(I)
            TRC$(73, 1) = VERSUS$(I)
            TRC$(73, 2) = gameTeams$(1 - I)
            TRC$(73, 3) = Date$
        End If

        If V8(I, 3) + V8(1 - I, 3) > TREC!(74, 0) Then
            TREC!(74, 0) = V8(I, 3) + V8(1 - I, 3)
            TREC!(74, 1) = V8(I, 3)
            TREC!(74, 2) = V8(1 - I, 3)
            TRC$(74, 0) = gameTeams$(I)
            TRC$(74, 1) = VERSUS$(I)
            TRC$(74, 2) = gameTeams$(1 - I)
            TRC$(74, 3) = Date$
        End If

        If V8(I, 3) + V8(1 - I, 3) < TREC!(75, 0) Then
            TREC!(75, 0) = V8(I, 3) + V8(1 - I, 3)
            TREC!(75, 1) = V8(I, 3)
            TREC!(75, 2) = V8(1 - I, 3)
            TRC$(75, 0) = gameTeams$(I)
            TRC$(75, 1) = VERSUS$(I)
            TRC$(75, 2) = gameTeams$(1 - I)
            TRC$(75, 3) = Date$
        End If

        If QR(I, 1, 3) > TREC!(76, 0) Then
            TREC!(76, 0) = QR(I, 1, 3)
            TREC!(76, 1) = 1
            TREC!(76, 2) = 0
            TRC$(76, 0) = gameTeams$(I)
            TRC$(76, 1) = VERSUS$(I)
            TRC$(76, 2) = gameTeams$(1 - I)
            TRC$(76, 3) = Date$
        End If

        If QR(I, 2, 3) > TREC!(76, 0) Then
            TREC!(76, 0) = QR(I, 2, 3)
            TREC!(76, 1) = 2
            TREC!(76, 2) = 0
            TRC$(76, 0) = gameTeams$(I)
            TRC$(76, 1) = VERSUS$(I)
            TRC$(76, 2) = gameTeams$(1 - I)
            TRC$(76, 3) = Date$
        End If

        If QR(I, 1, 3) + QR(1 - I, 1, 3) > TREC!(77, 0) Then
            TREC!(77, 0) = QR(I, 1, 3) + QR(1 - I, 1, 3)
            TREC!(77, 1) = 1
            TREC!(77, 2) = QR(I, 1, 3)
            TRC$(77, 0) = gameTeams$(I)
            TRC$(77, 1) = VERSUS$(I)
            TRC$(77, 2) = gameTeams$(1 - I)
            TRC$(77, 3) = Date$
        End If

        If QR(I, 2, 3) + QR(1 - I, 2, 3) > TREC!(77, 0) Then
            TREC!(77, 0) = QR(I, 2, 3) + QR(1 - I, 2, 3)
            TREC!(77, 1) = 2
            TREC!(77, 2) = QR(I, 2, 3)
            TRC$(77, 0) = gameTeams$(I)
            TRC$(77, 1) = VERSUS$(I)
            TRC$(77, 2) = gameTeams$(1 - I)
            TRC$(77, 3) = Date$
        End If

        If R3!(I) > TREC!(80, 0) Then
            TREC!(80, 0) = R3!(I)
            TREC!(80, 1) = 0
            TREC!(80, 2) = 0
            TRC$(80, 0) = gameTeams$(I)
            TRC$(80, 1) = VERSUS$(I)
            TRC$(80, 2) = gameTeams$(1 - I)
            TRC$(80, 3) = Date$
        End If

        If R3!(I) < TREC!(81, 0) Then
            TREC!(81, 0) = R3!(I)
            TREC!(81, 1) = 0
            TREC!(81, 2) = 0
            TRC$(81, 0) = gameTeams$(I)
            TRC$(81, 1) = VERSUS$(I)
            TRC$(81, 2) = gameTeams$(1 - I)
            TRC$(81, 3) = Date$
        End If

        If R3!(I) + R3!(1 - I) > TREC!(82, 0) Then
            TREC!(82, 0) = R3!(I) + R3!(1 - I)
            TREC!(82, 1) = R3!(I)
            TREC!(82, 2) = R3!(1 - I)
            TRC$(82, 0) = gameTeams$(I)
            TRC$(82, 1) = VERSUS$(I)
            TRC$(82, 2) = gameTeams$(1 - I)
            TRC$(82, 3) = Date$
        End If

        If R3!(I) + R3!(1 - I) < TREC!(83, 0) Then
            TREC!(83, 0) = R3!(I) + R3!(1 - I)
            TREC!(83, 1) = R3!(I)
            TREC!(83, 2) = R3!(1 - I)
            TRC$(83, 0) = gameTeams$(I)
            TRC$(83, 1) = VERSUS$(I)
            TRC$(83, 2) = gameTeams$(1 - I)
            TRC$(83, 3) = Date$
        End If

        If QR(I, 1, 4) > TREC!(84, 0) Then
            TREC!(84, 0) = QR(I, 1, 4)
            TREC!(84, 1) = 1
            TREC!(84, 2) = 0
            TRC$(84, 0) = gameTeams$(I)
            TRC$(84, 1) = VERSUS$(I)
            TRC$(84, 2) = gameTeams$(1 - I)
            TRC$(84, 3) = Date$
        End If

        If QR(I, 2, 4) > TREC!(84, 0) Then
            TREC!(84, 0) = QR(I, 2, 4)
            TREC!(84, 1) = 2
            TREC!(84, 2) = 0
            TRC$(84, 0) = gameTeams$(I)
            TRC$(84, 1) = VERSUS$(I)
            TRC$(84, 2) = gameTeams$(1 - I)
            TRC$(84, 3) = Date$
        End If

        If V8(I, 11) > TREC!(86, 0) Then
            TREC!(86, 0) = V8(I, 11)
            TREC!(86, 1) = 0
            TREC!(86, 2) = 0
            TRC$(86, 0) = gameTeams$(I)
            TRC$(86, 1) = VERSUS$(I)
            TRC$(86, 2) = gameTeams$(1 - I)
            TRC$(86, 3) = Date$
        End If

        If V8(I, 11) < TREC!(87, 0) Then
            TREC!(87, 0) = V8(I, 11)
            TREC!(87, 1) = 0
            TREC!(87, 2) = 0
            TRC$(87, 0) = gameTeams$(I)
            TRC$(87, 1) = VERSUS$(I)
            TRC$(87, 2) = gameTeams$(1 - I)
            TRC$(87, 3) = Date$
        End If

        If V8(I, 11) + V8(1 - I, 11) > TREC!(88, 0) Then
            TREC!(88, 0) = V8(I, 11) + V8(1 - I, 11)
            TREC!(88, 1) = V8(I, 11)
            TREC!(88, 2) = V8(1 - I, 11)
            TRC$(88, 0) = gameTeams$(I)
            TRC$(88, 1) = VERSUS$(I)
            TRC$(88, 2) = gameTeams$(1 - I)
            TRC$(88, 3) = Date$
        End If

        If V8(I, 11) + V8(1 - I, 11) < TREC!(89, 0) Then
            TREC!(89, 0) = V8(I, 11) + V8(1 - I, 11)
            TREC!(89, 1) = V8(I, 11)
            TREC!(89, 2) = V8(1 - I, 11)
            TRC$(89, 0) = gameTeams$(I)
            TRC$(89, 1) = VERSUS$(I)
            TRC$(89, 2) = gameTeams$(1 - I)
            TRC$(89, 3) = Date$
        End If

        If QR(I, 1, 11) > TREC!(90, 0) Then
            TREC!(90, 0) = QR(I, 1, 11)
            TREC!(90, 1) = 1
            TREC!(90, 2) = 0
            TRC$(90, 0) = gameTeams$(I)
            TRC$(90, 1) = VERSUS$(I)
            TRC$(90, 2) = gameTeams$(1 - I)
            TRC$(90, 3) = Date$
        End If

        If QR(I, 2, 11) > TREC!(90, 0) Then
            TREC!(90, 0) = QR(I, 2, 11)
            TREC!(90, 1) = 2
            TREC!(90, 2) = 0
            TRC$(90, 0) = gameTeams$(I)
            TRC$(90, 1) = VERSUS$(I)
            TRC$(90, 2) = gameTeams$(1 - I)
            TRC$(90, 3) = Date$
        End If

        ' ASSISTS
        If V8(I, 7) > TREC!(96, 0) Then
            TREC!(96, 0) = V8(I, 7)
            TREC!(96, 1) = 0
            TREC!(96, 2) = 0
            TRC$(96, 0) = gameTeams$(I)
            TRC$(96, 1) = VERSUS$(I)
            TRC$(96, 2) = gameTeams$(1 - I)
            TRC$(96, 3) = Date$
        End If

        If V8(I, 7) < TREC!(97, 0) Then
            TREC!(97, 0) = V8(I, 7)
            TREC!(97, 1) = 0
            TREC!(97, 2) = 0
            TRC$(97, 0) = gameTeams$(I)
            TRC$(97, 1) = VERSUS$(I)
            TRC$(97, 2) = gameTeams$(1 - I)
            TRC$(97, 3) = Date$
        1 End If

        If V8(I, 7) + V8(1 - I, 7) > TREC!(98, 0) Then
            TREC!(98, 0) = V8(I, 7) + V8(1 - I, 7)
            TREC!(98, 1) = V8(I, 7)
            TREC!(98, 2) = V8(1 - I, 7)
            TRC$(98, 0) = gameTeams$(I)
            TRC$(98, 1) = VERSUS$(I)
            TRC$(98, 2) = gameTeams$(1 - I)
            TRC$(98, 3) = Date$
        2 End If

        If V8(I, 7) + V8(1 - I, 7) < TREC!(99, 0) Then
            TREC!(99, 0) = V8(I, 7) + V8(1 - I, 7)
            TREC!(99, 1) = V8(I, 7)
            TREC!(99, 2) = V8(1 - I, 7)
            TRC$(99, 0) = gameTeams$(I)
            TRC$(99, 1) = VERSUS$(I)
            TRC$(99, 2) = gameTeams$(1 - I)
            TRC$(99, 3) = Date$
        3 End If

        If QR(I, 1, 7) > TREC!(100, 0) Then
            TREC!(100, 0) = QR(I, 1, 7)
            TREC!(100, 1) = 1
            TREC!(100, 2) = 0
            TRC$(100, 0) = gameTeams$(I)
            TRC$(100, 1) = VERSUS$(I)
            TRC$(100, 2) = gameTeams$(1 - I)
            TRC$(100, 3) = Date$
        4 End If

        If QR(I, 2, 7) > TREC!(100, 0) Then
            TREC!(100, 0) = QR(I, 2, 7)
            TREC!(100, 1) = 2
            TREC!(100, 2) = 0
            TRC$(100, 0) = gameTeams$(I)
            TRC$(100, 1) = VERSUS$(I)
            TRC$(100, 2) = gameTeams$(1 - I)
            TRC$(100, 3) = Date$
        End If

        If QR(I, 2, 7) + QR(1 - I, 2, 7) > TREC!(101, 0) Then
            TREC!(101, 0) = QR(I, 2, 7) + QR(1 - I, 2, 7)
            TREC!(101, 1) = 2
            TREC!(101, 2) = 0
            TRC$(101, 0) = gameTeams$(I)
            TRC$(101, 1) = VERSUS$(I)
            TRC$(101, 2) = gameTeams$(1 - I)
            TRC$(101, 3) = Date$
        5 End If

        ' FOULS
        If V8(I, 6) > TREC!(104, 0) Then
            TREC!(104, 0) = V8(I, 6)
            TREC!(104, 1) = 0
            TREC!(104, 2) = 0
            TRC$(104, 0) = gameTeams$(I)
            TRC$(104, 1) = VERSUS$(I)
            TRC$(104, 2) = gameTeams$(1 - I)
            TRC$(104, 3) = Date$
        10 End If

        If V8(I, 6) < TREC!(105, 0) Then
            TREC!(105, 0) = V8(I, 6)
            TREC!(105, 1) = 0
            TREC!(105, 2) = 0
            TRC$(105, 0) = gameTeams$(I)
            TRC$(105, 1) = VERSUS$(I)
            TRC$(105, 2) = gameTeams$(1 - I)
            TRC$(105, 3) = Date$
        11 End If

        If V8(I, 6) + V8(1 - I, 6) > TREC!(106, 0) Then
            TREC!(106, 0) = V8(I, 6) + V8(1 - I, 6)
            TREC!(106, 1) = V8(I, 6)
            TREC!(106, 2) = V8(1 - I, 6)
            TRC$(106, 0) = gameTeams$(I)
            TRC$(106, 1) = VERSUS$(I)
            TRC$(106, 2) = gameTeams$(1 - I)
            TRC$(106, 3) = Date$
        12 End If

        If V8(I, 6) + V8(1 - I, 6) < TREC!(107, 0) Then
            TREC!(107, 0) = V8(I, 6) + V8(1 - I, 6)
            TREC!(107, 1) = V8(I, 6)
            TREC!(107, 2) = V8(1 - I, 6)
            TRC$(107, 0) = gameTeams$(I)
            TRC$(107, 1) = VERSUS$(I)
            TRC$(107, 2) = gameTeams$(1 - I)
            TRC$(107, 3) = Date$
        13 End If

        If QR(I, 1, 6) > TREC!(108, 0) Then
            TREC!(108, 0) = QR(I, 1, 6)
            TREC!(108, 1) = 1
            TREC!(108, 2) = 0
            TRC$(108, 0) = gameTeams$(I)
            TRC$(108, 1) = VERSUS$(I)
            TRC$(108, 2) = gameTeams$(1 - I)
            TRC$(108, 3) = Date$
        14 End If

        If QR(I, 2, 6) > TREC!(108, 0) Then
            TREC!(108, 0) = QR(I, 2, 6)
            TREC!(108, 1) = 2
            TREC!(108, 2) = 0
            TRC$(108, 0) = gameTeams$(I)
            TRC$(108, 1) = VERSUS$(I)
            TRC$(108, 2) = gameTeams$(1 - I)
            TRC$(108, 3) = Date$
        15 End If

        If QR(I, 1, 6) + QR(1 - I, 1, 6) > TREC!(109, 0) Then
            TREC!(109, 0) = QR(I, 1, 6) + QR(1 - I, 1, 6)
            TREC!(109, 1) = 1
            TREC!(109, 2) = QR(I, 1, 6)
            TRC$(109, 0) = gameTeams$(I)
            TRC$(109, 1) = VERSUS$(I)
            TRC$(109, 2) = gameTeams$(1 - I)
            TRC$(109, 3) = Date$
        16 End If

        If QR(I, 2, 6) + QR(1 - I, 2, 6) > TREC!(109, 0) Then
            TREC!(109, 0) = QR(I, 2, 6) + QR(1 - I, 2, 6)
            TREC!(109, 1) = 2
            TREC!(109, 2) = QR(I, 2, 6)
            TRC$(109, 0) = gameTeams$(I)
            TRC$(109, 1) = VERSUS$(I)
            TRC$(109, 2) = gameTeams$(1 - I)
            TRC$(109, 3) = Date$
        17 End If

        ' STEALS
        If V8(I, 9) > TREC!(112, 0) Then
            TREC!(112, 0) = V8(I, 9)
            TREC!(112, 1) = 0
            TREC!(112, 2) = 0
            TRC$(112, 0) = gameTeams$(I)
            TRC$(112, 1) = VERSUS$(I)
            TRC$(112, 2) = gameTeams$(1 - I)
            TRC$(112, 3) = Date$
        20 End If

        If V8(I, 9) + V8(1 - I, 9) > TREC!(114, 0) Then
            TREC!(114, 0) = V8(I, 9) + V8(1 - I, 9)
            TREC!(114, 1) = V8(I, 9)
            TREC!(114, 2) = V8(1 - I, 9)
            TRC$(114, 0) = gameTeams$(I)
            TRC$(114, 1) = VERSUS$(I)
            TRC$(114, 2) = gameTeams$(1 - I)
            TRC$(114, 3) = Date$
        21 End If

        If QR(I, 1, 9) > TREC!(116, 0) Then
            TREC!(116, 0) = QR(I, 1, 9)
            TREC!(116, 1) = 1
            TREC!(116, 2) = 0
            TRC$(116, 0) = gameTeams$(I)
            TRC$(116, 1) = VERSUS$(I)
            TRC$(116, 2) = gameTeams$(1 - I)
            TRC$(116, 3) = Date$
        End If

        If QR(I, 2, 9) > TREC!(116, 0) Then
            TREC!(116, 0) = QR(I, 2, 9)
            TREC!(116, 1) = 2
            TREC!(116, 2) = 0
            TRC$(116, 0) = gameTeams$(I)
            TRC$(116, 1) = VERSUS$(I)
            TRC$(116, 2) = gameTeams$(1 - I)
            TRC$(116, 3) = Date$
        23 End If

        ' BLOCKS
        If V8(I, 8) > TREC!(118, 0) Then
            TREC!(118, 0) = V8(I, 8)
            TREC!(118, 1) = 0
            TREC!(118, 2) = 0
            TRC$(118, 0) = gameTeams$(I)
            TRC$(118, 1) = VERSUS$(I)
            TRC$(118, 2) = gameTeams$(1 - I)
            TRC$(118, 3) = Date$
        25 End If

        If V8(I, 8) + V8(1 - I, 8) > TREC!(119, 0) Then
            TREC!(119, 0) = V8(I, 8) + V8(1 - I, 8)
            TREC!(119, 1) = V8(I, 8)
            TREC!(119, 2) = V8(1 - I, 8)
            TRC$(119, 0) = gameTeams$(I)
            TRC$(119, 1) = VERSUS$(I)
            TRC$(119, 2) = gameTeams$(1 - I)
            TRC$(119, 3) = Date$
        26 End If

        If QR(I, 1, 8) > TREC!(121, 0) Then
            TREC!(121, 0) = QR(I, 1, 8)
            TREC!(121, 1) = 1
            TREC!(121, 2) = 0
            TRC$(121, 0) = gameTeams$(I)
            TRC$(121, 1) = VERSUS$(I)
            TRC$(121, 2) = gameTeams$(1 - I)
            TRC$(121, 3) = Date$
        22 End If

        If QR(I, 2, 8) > TREC!(121, 0) Then
            TREC!(121, 0) = QR(I, 2, 8)
            TREC!(121, 1) = 1
            TREC!(121, 2) = 0
            TRC$(121, 0) = gameTeams$(I)
            TRC$(121, 1) = VERSUS$(I)
            TRC$(121, 2) = gameTeams$(1 - I)
            TRC$(121, 3) = Date$
        End If

        ' TURNOVERS
        If V8(I, 12) > TREC!(122, 0) Then
            TREC!(122, 0) = V8(I, 12)
            TREC!(122, 1) = 0
            TREC!(122, 2) = 0
            TRC$(122, 0) = gameTeams$(I)
            TRC$(122, 1) = VERSUS$(I)
            TRC$(122, 2) = gameTeams$(1 - I)
            TRC$(122, 3) = Date$
        29 End If

        If V8(I, 12) < TREC!(123, 0) Then
            TREC!(123, 0) = V8(I, 12)
            TREC!(123, 1) = 0
            TREC!(123, 2) = 0
            TRC$(123, 0) = gameTeams$(I)
            TRC$(123, 1) = VERSUS$(I)
            TRC$(123, 2) = gameTeams$(1 - I)
            TRC$(123, 3) = Date$
        30 End If

        If V8(I, 12) + V8(1 - I, 12) > TREC!(124, 0) Then
            TREC!(124, 0) = V8(I, 12) + V8(1 - I, 12)
            TREC!(124, 1) = V8(I, 12)
            TREC!(124, 2) = V8(1 - I, 12)
            TRC$(124, 0) = gameTeams$(I)
            TRC$(124, 1) = VERSUS$(I)
            TRC$(124, 2) = gameTeams$(1 - I)
            TRC$(124, 3) = Date$
        31 End If

        If V8(I, 12) + V8(1 - I, 12) < TREC!(125, 0) Then
            TREC!(125, 0) = V8(I, 12) + V8(1 - I, 12)
            TREC!(125, 1) = V8(I, 12)
            TREC!(125, 2) = V8(1 - I, 12)
            TRC$(125, 0) = gameTeams$(I)
            TRC$(125, 1) = VERSUS$(I)
            TRC$(125, 2) = gameTeams$(1 - I)
            TRC$(125, 3) = Date$
        32 End If

    Next

    Open diskPaths$(1) + "RECORDS.GAM" For Output As #2

    For I = 0 To 48

        For I1 = 0 To 2
            Write #2, REC!(I, I1)
        Next

        For I1 = 0 To 4
            Write #2, RC$(I, I1)
        Next

    Next

    For I = 0 To 125

        For I1 = 0 To 2
            Write #2, TREC!(I, I1)
        Next

        For I1 = 0 To 3
            Write #2, TRC$(I, I1)
        Next

    Next

    Close #2

End Sub


