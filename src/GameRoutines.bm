'----------------------------------------
'            INFO Subroutine
'----------------------------------------
'This subroutine displays a simple header
'and footer for the game options menu.
Sub INFO ()

    Cls

    Color , 1
    Locate 1, 1
    Print Tab(80);

    Locate , 33
    Color 14
    Print "GAME OPTIONS MENU"

    Locate 24, 1
    Print Tab(80);
    Locate , 1
    Print "    LANCE HAFFNER 1986-2000"; Tab(70); Left$(Time$, 5);
    Locate 3, 1
    Color , 0

End Sub


'----------------------------------------
'           InitVar Subroutine
'----------------------------------------
' Initializes variables for the game
' Does not process any that will be read
' in from file or assigned elsewhere
Sub InitVar ()

    Shared actualAttendance&

    Shared scheduleFile$, tourneyFile$

    Shared avgAttendance&(), gameAttendance&()

    Shared d3FG_Adj(), d3FGA_Adj()
    Shared powerRating()
    Shared oppScore(), rosterStatus()
    Shared teamScore(), tourneySettings()

    Shared gameW0!(), gameW1!()
    Shared statsZ!(), statsZ1!(), statsZ2!()
    Shared indRecords!(), teamRecords!()

    Shared alpha$()
    Shared gameSite$(), locIndicator$(), oppName$()
    Shared indRecDesc$(), teamRecDesc$()
    Shared teamIndicator$(), teamYrTourn$()

    For I = 0 To 1
        For I1 = 0 To 4
            B1(I, I1) = -1
        Next I1
    Next I

    teamIndicator$(0) = "VISITING TEAM"
    teamIndicator$(1) = "HOME TEAM"

    alpha$(0) = "A "
    alpha$(1) = "B "
    alpha$(2) = "C "
    alpha$(3) = "D "

    pbpType$(0) = "VERBOSE        "
    pbpType$(1) = "HAFFNER CLASSIC"

    posnName$(0) = "G"
    posnName$(1) = "G"
    posnName$(2) = "F"
    posnName$(3) = "F"
    posnName$(4) = "C"

    scSettings(0) = 0
    scSettings(1) = 45
    scSettings(2) = 35
    scSettings(3) = 30

    gameClock! = 1200

    nbrLines = 1

    currHalf = 1

    ' # of timeouts
    timeouts(1) = 5
    timeouts(0) = 5

    PA% = -1

    teamRat_GAME(0, 0) = 15
    teamRat_GAME(0, 1) = 1
    teamRat_GAME(1, 0) = 15
    teamRat_GAME(1, 1) = 1

    autoPlay = 0
    ballCarrier = 0
    C1 = 0
    compTeam = 0
    D = 0
    DY = 0
    endAllGames = 0
    endGame = 0
    F3 = 0
    FO = 0
    G9 = 0
    halfTime = 0
    IN = 0
    M5 = 0
    MJ = 0
    P = 0
    P9 = 0
    S2 = 0
    S9 = 0
    shotClock = 0
    statSpecial = 0
    timeElapsed! = 0
    TMT = 0
    TOU = 0
    XM = 0
    XS = 0

    BO% = 0
    BU% = 0
    DK% = 0
    F3S% = 0
    fastBreak = 0
    FT% = 0
    J8% = 0
    LC% = 0
    PASS% = 0
    PT% = 0
    PZ% = 0
    X0% = 0
    X1% = 0
    XX% = 0

    skipUserOpts% = 0

    F! = 0

    A1$ = ""
    B1$ = ""
    C1$ = ""
    D1$ = ""
    E1$ = ""
    F1$ = ""
    G1$ = ""
    H1$ = ""

    pbpString$ = ""
    prevBall$ = ""
    scheduleFile$ = ""
    tourneyFile$ = ""
    schedVisTm$ = ""
    schedHomeTm$ = ""
    YN$ = ""

    'These are read in from teams
    'Erase dFGPA, d3FG_Adj, d3FGA_Adj
    Erase leagRat_GAME, plyrOff_GAME!, plyrRat_GAME
    'Erase playerDef_GAME, playerStat_GAME, teamStats_GAME
    'Erase rosterStatus, teamStamina
    'Erase gameArena$, gameCoaches$, gameMascots$
    'Erase players$, positions_GAME$, posnName$

    'Erase tourneySettings
    'Erase seedSlotName$

    Erase B1
    Erase defStrat, defType, eventSettings
    Erase F1, ft3PtFoul, G4, G5
    Erase offStrat
    Erase oppScore, teamScore
    Erase P2, P4, P5, P7
    Erase plyrStamina, powerRating
    Erase pbpFG, pbpBG
    Erase QQ, QR, RB, schedGame
    Erase score

    Erase teamAdj, threeFG, timePlayed, tmFatigue
    Erase turnovers, statTotals
    Erase W2, W3, Z5, Z6

    Erase CZ%, FY%
    Erase G9%, NG%, NG1%
    Erase PR%, ST%, SX%
    Erase teamIndex%, TM%, TP%

    Erase diskIDs$, gameSite$, gameTeams$
    Erase indRecDesc$, locIndicator$, oppName$
    Erase Q$, SX$
    Erase teamNames$, teamRecDesc$, teamYrTourn$

    Erase gameR3!, gameW0!, gameW1!
    Erase statsZ!, statsZ1!, statsZ2!
    Erase indRecords!, teamRecords!

    actualAttendance& = 0
    Erase avgAttendance&, gameAttendance&

End Sub


'----------------------------------------
'          AUTOSETUP Subroutine
'----------------------------------------
'This subroutine auto-assigns game param-
'eters from a schedule file's data.
Sub AUTOSETUP ()

    Shared tickerStart

    Shared tourneyFile$

    Shared tourneySettings()

    gameLoc = NG%(2)
    threePtOpt = NG%(3)
    pbpDelay! = NG%(4) / 10
    foulsToDQ = NG%(5)
    ft10thFoul = NG%(6)
    sClockVal = NG%(7)
    playerOpt = NG%(8)
    coachOpt = NG%(9)
    ft3PtFoul = NG%(10)
    tickerStart = NG%(12)
    ft6FloorFouls = NG%(14)

    For P9 = 0 To 1

        I1 = NG%(P9)

        Call ReadGameTeam(diskIDs$(P9), gameTeams$(P9), I1, P9)

        If I1 <> 0 Then
            Call TEAMSETUP(P9)
            'Else
            '   -- throw an error message
        End If

    Next P9

    If TOU = 1 Then

        'Read in tournament settings
        tournFileNoExt$ = Mid$(tourneyFile$, 1, Len(tourneyFile$) - 4)
        Open diskPaths$(1) + tournFileNoExt$ + ".INF" For Input As #1

        Input #1, X$

        Input #1, X$ ' NUMBER OF REGIONS

        For I = 1 To 16
            Input #1, X$ ' NUMBER OF TEAMS IN REGION
            Input #1, X$ ' NAME OF REGION
        Next

        For I = 1 To 16
            For I1 = 1 To 16
                For I2 = 1 To 4
                    Input #1, seedSlotName$(I, I1, I2) ' SEED SLOT NAME
                    Input #1, tourneySettings(I, I1, I2) ' REGION, SEED NUMBER, MODE PLAY/TM#
                Next
            Next
        Next

        Close #1

        TOU = 0

        'Check if there are more games to play
        For I = 1 To 16

            For I1 = 1 To 16

                If NG%(0) = tourneySettings(I, I1, 0) And diskIDs$(0) = seedSlotName$(I, I1, 1) And tourneySettings(I, I1, 1) = 0 Then
                    TOU = 1
                    exitAll% = 1
                    Exit For
                End If

                If NG%(1) = tourneySettings(I, I1, 0) And diskIDs$(1) = seedSlotName$(I, I1, 1) And tourneySettings(I, I1, 1) = 0 Then
                    TOU = 1
                    exitAll% = 1
                    Exit For
                End If
            Next

            If exitAll% = 1 Then Exit For

        Next

    End If

End Sub


'------------------------------
'    LetterToNumber Subroutine
'------------------------------
' ...explanation...
Sub LetterToNumber (promptVal$, J)

    J = Val(promptVal$)
    If UCase$(promptVal$) = "A" Then J = 10
    If UCase$(promptVal$) = "B" Then J = 11
    If UCase$(promptVal$) = "C" Then J = 12
    If UCase$(promptVal$) = "D" Then J = 13
    If UCase$(promptVal$) = "E" Then J = 14

End Sub


'----------------------------------------
'          TEAMSETUP Subroutine
'----------------------------------------
'This subroutine initializes team data,
'sets up player data and configures any
'league adjustments
Sub TEAMSETUP (teamIdx)

    Shared d3FG_Adj(), d3FGA_Adj()

    'This is where we "adjust" values that were in the 90's
    teamAdj(teamIdx, 4) = leagRat_GAME(teamIdx, 0)
    If teamAdj(teamIdx, 4) > 20 Then teamAdj(teamIdx, 4) = teamAdj(teamIdx, 4) - 100

    teamAdj(teamIdx, 6) = leagRat_GAME(teamIdx, 2)
    If teamAdj(teamIdx, 6) > 20 Then teamAdj(teamIdx, 6) = teamAdj(teamIdx, 6) - 100

    teamAdj(teamIdx, 7) = leagRat_GAME(teamIdx, 3)
    If teamAdj(teamIdx, 7) > 20 Then teamAdj(teamIdx, 7) = teamAdj(teamIdx, 7) - 100

    'Off T/O Rating
    teamAdj(teamIdx, 5) = leagRat_GAME(teamIdx, 1)

    'Default to 4 if not provided
    If teamAdj(teamIdx, 5) = 0 Then teamAdj(teamIdx, 5) = 4

    '"99" Value
    teamAdj(teamIdx, 8) = leagRat_GAME(teamIdx, 4)
    If teamAdj(teamIdx, 8) <> 99 Then
        teamAdj(teamIdx, 4) = 0
        teamAdj(teamIdx, 5) = 4
        teamAdj(teamIdx, 6) = 0
        teamAdj(teamIdx, 7) = 0
    End If

    For I = 0 To 13

        plyrOff_GAME!(teamIdx, I, 16) = plyrRat_GAME(teamIdx, I, 6)
        If plyrOff_GAME!(teamIdx, I, 16) = 0 Then plyrOff_GAME!(teamIdx, I, 16) = 6

        plyrOff_GAME!(teamIdx, I, 17) = plyrRat_GAME(teamIdx, I, 5)
        If plyrOff_GAME!(teamIdx, I, 17) = 0 Then plyrOff_GAME!(teamIdx, I, 17) = 40

        plyrOff_GAME!(teamIdx, I, 19) = plyrRat_GAME(teamIdx, I, 3)
        plyrOff_GAME!(teamIdx, I, 20) = plyrRat_GAME(teamIdx, I, 2)
        plyrOff_GAME!(teamIdx, I, 21) = plyrRat_GAME(teamIdx, I, 4)
        plyrOff_GAME!(teamIdx, I, 2) = plyrOff_GAME!(teamIdx, I, 2)

    Next I

    teamAdj(teamIdx, 2) = d3FG_Adj(teamIdx)
    If teamAdj(teamIdx, 2) > 20 Then teamAdj(teamIdx, 2) = teamAdj(teamIdx, 2) - 100

    teamAdj(teamIdx, 3) = d3FGA_Adj(teamIdx)
    If teamAdj(teamIdx, 3) > 20 Then teamAdj(teamIdx, 3) = teamAdj(teamIdx, 3) - 100

End Sub


'----------------------------------------
'           TEAMBOX Subroutine
'----------------------------------------
'This subroutine draws an ASCII box using
'team colors. The box starts at row 6 and
'is approx. 60 char's wide. When done, the
'cursor is set at the first printable row
'and column inside the box.
Sub TEAMBOX (boxHeight, teamIdx)

    Locate 6, 8
    Color teamRat_GAME(teamIdx, 0), teamRat_GAME(teamIdx, 1)

    'Print box top
    Print " "; Chr$(201); String$(61, 205); Chr$(187); " ";

    'Print box sides
    For II = 1 To boxHeight
        Locate 6 + II, 8
        Print " " + Chr$(186); String$(61, 32); Chr$(186) + " ";
    Next

    'Print box bottom
    Locate 7 + boxHeight, 8
    Print " "; Chr$(200); String$(61, 205); Chr$(188); " ";

    Locate 7, 11

End Sub


'----------------------------------------
'         FRAMEOPTION Subroutine
'----------------------------------------
'This subroutine draws an ASCII box using
'team colors. The box starts at row 8 and
'is approx. 60 char's wide. When done, the
'cursor is set at the first printable row
'and column inside the box.
Sub FRAMEOPTION (boxHeight, teamIdx)

    Locate 8, 8
    Color teamRat_GAME(teamIdx, 0), teamRat_GAME(teamIdx, 1)

    'Print box top
    Print " " + Chr$(214); String$(61, 196); Chr$(183) + " ";

    'Print box sides
    For II = 1 To boxHeight
        Locate 8 + II, 8
        Print " " + Chr$(186); String$(61, 32); Chr$(186) + " ";
    Next

    'Print box bottom
    Locate 9 + boxHeight, 8
    Print " " + Chr$(211); String$(61, 196); Chr$(189) + " ";

    Locate 9, 12

End Sub


'----------------------------------------
'            d100 Subroutine
'----------------------------------------
'This subroutine assigns a random number
'between 1 and 100 to the variable that
'it is called with
Sub d100 (randNumVar)

    randNumVar = Int(Rnd(1) * 100) + 1

End Sub


'----------------------------------------
'       DISABLEPLAYERS Subroutine
'----------------------------------------
'This subroutine gives the user an inter-
'face for disabling team players. It will
'then take care of updating the associated
'arrays for the available roster.
Sub DISABLEPLAYERS (teamIdx)

    Do

        Color 15, 0
        Cls

        Call TEAMBOX(1, teamIdx)

        U$ = "DISABLE PLAYERS FOR " + gameTeams$(teamIdx) + "? (Y/N)"
        Locate , (80 - Len(U$)) / 2
        Print U$
        Color 15, 0

        Print
        Print
        Print "NOTE:: THE COMPUTER WILL AUTOMATICALLY DISABLE PLAYERS BASED ON"
        Print "       THE RATIO OF GAMES PLAYED FOR EACH PLAYER TO THE TOTAL"
        Print "       NUMBER OF GAMES PLAYED BY THE TEAM. YOU MAY WANT TO CHECK"
        Print "       TO ACTIVATE ANY COMPUTER DEACTIVATED PLAYERS"
        I$ = GetKeyPress$

    Loop Until UCase$(I$) = "Y" Or UCase$(I$) = "N"

    If UCase$(I$) = "Y" Then

        DX% = 0

        Cls
        Print "TEAM ROSTER FOR ";
        Color teamRat_GAME(teamIdx, 0), teamRat_GAME(teamIdx, 1): Print gameTeams$(teamIdx)
        Color 15, 0
        Print "# NAME            POS   GP"

        For I = 0 To 13

            If I <= 9 Then Print Using "#"; I;
            If I = 10 Then Print "A";
            If I = 11 Then Print "B";
            If I = 12 Then Print "C";
            If I = 13 Then Print "D";
            If I = 14 Then Print "E";

            Print " ";

            'Automatically disable "non-existent" players
            If players$(teamIdx, I) = "XXX" Then rosterStatus(teamIdx, I) = -1: Color teamRat_GAME(teamIdx, 0), teamRat_GAME(teamIdx, 1)

            'Color players who have been disabled
            If rosterStatus(teamIdx, I) = 1 Or rosterStatus(teamIdx, I) = -1 Then Color teamRat_GAME(teamIdx, 0), teamRat_GAME(teamIdx, 1)

            'Print player name
            Print players$(teamIdx, I);
            Color 15, 0

            'Print player position, GP
            Print Tab(20); positions_GAME$(teamIdx, I); Tab(22); plyrRat_GAME(teamIdx, I, 0)

        Next

        Do
            Locate 19, 1
            Print "ENTER PLAYER # TO DISABLE/ENABLE (Z=FINISHED)"
            Print "YOU MUST HAVE AT LEAST 8 ACTIVE PLAYERS"

            I$ = GetKeyPress$

            If UCase$(I$) <> "Z" Then

                I1 = Val(I$)
                Call LetterToNumber(I$, I1)

                If rosterStatus(teamIdx, I1) = 0 And DX% < 4 Then
                    rosterStatus(teamIdx, I1) = -1
                    DX% = DX% + 1
                    Locate 3 + I1, 3
                    Color teamRat_GAME(teamIdx, 0), teamRat_GAME(teamIdx, 1): Print players$(teamIdx, I1)
                    Color 15, 0
                Else
                    If rosterStatus(teamIdx, I1) = -1 Then
                        rosterStatus(teamIdx, I1) = 0
                        DX% = DX% - 1
                        Locate 3 + I1, 2
                        Color 15, 0
                        Print " "; players$(teamIdx, I1)
                    End If
                End If
            End If

        Loop Until UCase$(I$) = "Z"

    End If

End Sub


'----------------------------------------
'            DELAY Subroutine
'----------------------------------------
'This subroutine simply serves as a place-
'holder for the command to initiate the
'pbp delay.
Sub DELAY ()

    _Delay pbpDelay!

End Sub


'----------------------------------------
'             PBP Subroutine
'----------------------------------------
'This is the classic Haffner Play-by-play
'subroutine. Given the target text, it will
'place it in the correct spot in the pbp
'text window. No text is placed if the
'delay is 0.
Sub PBP ()

    M$ = InKey$

    If UCase$(M$) = "Q" Then
        Cls
        End
    End If

    If UCase$(M$) = "O" Then
        Call OPTIONS
    End If

    'Positive delay or Verbose PBP
    If pbpDelay! > 0 And pbpOpt <> 1 Then

        pbpString$ = PadRight$(pbpString$, 38)
        'Print #11, pbpString$

        Locate 8, 1

        If nbrLines = 1 Then A1$ = pbpString$: pbpFG(1) = teamRat_GAME(P, 0): pbpBG(1) = teamRat_GAME(P, 1)
        If nbrLines = 2 Then B1$ = pbpString$: pbpFG(2) = teamRat_GAME(P, 0): pbpBG(2) = teamRat_GAME(P, 1)
        If nbrLines = 3 Then C1$ = pbpString$: pbpFG(3) = teamRat_GAME(P, 0): pbpBG(3) = teamRat_GAME(P, 1)
        If nbrLines = 4 Then D1$ = pbpString$: pbpFG(4) = teamRat_GAME(P, 0): pbpBG(4) = teamRat_GAME(P, 1)
        If nbrLines = 5 Then E1$ = pbpString$: pbpFG(5) = teamRat_GAME(P, 0): pbpBG(5) = teamRat_GAME(P, 1)
        If nbrLines = 6 Then F1$ = pbpString$: pbpFG(6) = teamRat_GAME(P, 0): pbpBG(6) = teamRat_GAME(P, 1)
        If nbrLines = 7 Then G1$ = pbpString$: pbpFG(7) = teamRat_GAME(P, 0): pbpBG(7) = teamRat_GAME(P, 1)
        If nbrLines = 8 Then H1$ = pbpString$: pbpFG(8) = teamRat_GAME(P, 0): pbpBG(8) = teamRat_GAME(P, 1)

        If nbrLines > 8 Then

            A1$ = B1$
            B1$ = C1$
            C1$ = D1$
            D1$ = E1$
            E1$ = F1$
            F1$ = G1$
            G1$ = H1$
            H1$ = pbpString$

            For I = 1 To 7
                pbpFG(I) = pbpFG(I + 1)
                pbpBG(I) = pbpBG(I + 1)
            Next

            pbpFG(8) = teamRat_GAME(P, 0)
            pbpBG(8) = teamRat_GAME(P, 1)

        End If

        nbrLines = nbrLines + 1

        Color pbpFG(1), pbpBG(1): Print Left$(A1$, 38)
        Color pbpFG(2), pbpBG(2): Print Left$(B1$, 38)
        Color pbpFG(3), pbpBG(3): Print Left$(C1$, 38)
        Color pbpFG(4), pbpBG(4): Print Left$(D1$, 38)
        Color pbpFG(5), pbpBG(5): Print Left$(E1$, 38)
        Color pbpFG(6), pbpBG(6): Print Left$(F1$, 38)
        Color pbpFG(7), pbpBG(7): Print Left$(G1$, 38)
        Color pbpFG(8), pbpBG(8): Print Left$(H1$, 38)

        Color 15, 0
        Call DELAY

    End If

End Sub


'----------------------------------------
'          SELECTPBP Subroutine
'----------------------------------------
'This subroutine essentially handles the
'prep for PBP depending on the style that
'was chosen for the game (classic / verbose)
Sub SELECTPBP ()

    Select Case pbpOpt

        Case 0:
            Call PBP

        Case 1:
            If pbpDelay! <> 0 Then
                Call WINDEX
                Print pbpString$
                Call DELAY
            End If

    End Select

End Sub


'----------------------------------------
'           MAKEPBP Subroutine
'----------------------------------------
'This subroutine helps build strings for
'the Play-by-Play text, depending on the
'context given (assigned as PT%)
Sub MAKEPBP ()

    If pbpDelay! <> 0 Then

        Call d100(RN0)

        'PT% = pbpType
        Select Case PT%

            Case 1
                'TURNOVER
                pbpString$ = players$(P, B1(P, ballCarrier))

                If RN0 > 35 And RN0 <= 68 And P7(D) > 1 And PASS% = 1 Then

                    pbpString$ = gameTeams$(P) + " CALLED FOR 10 SEC VIOLATION"

                Else

                    RN1 = Int(Rnd(1) * 14) + 1

                    Select Case RN1

                        Case 1
                            pbpString$ = pbpString$ + " TURNS THE BALL OVER"
                        Case 2
                            pbpString$ = pbpString$ + " THROWS IT AWAY"
                        Case 3
                            pbpString$ = pbpString$ + " IS WHISTLED FOR TRAVELING"
                        Case 4
                            pbpString$ = pbpString$ + " TURNS IT OVER"
                        Case 5
                            pbpString$ = pbpString$ + " LOSES CONTROL OF THE BALL"
                        Case 6
                            pbpString$ = pbpString$ + " LOSES IT OUT OF BOUNDS"
                        Case 7
                            pbpString$ = pbpString$ + " LOSES THE HANDLE"
                        Case 8
                            pbpString$ = pbpString$ + " LOSES IT"
                        Case 9
                            pbpString$ = pbpString$ + " IS CALLED FOR STEPS"
                        Case 10
                            pbpString$ = pbpString$ + " TRAVELS"
                        Case 11
                            pbpString$ = pbpString$ + " WALKS WITH IT"
                        Case 12
                            pbpString$ = pbpString$ + " LETS IT GET AWAY"
                        Case 13
                            pbpString$ = pbpString$ + " DOUBLE DRIBBLES"
                        Case 14
                            pbpString$ = pbpString$ + " LOSES CONTROL"

                    End Select

                End If

            Case 2
                'DUNK
                RN1 = Int(Rnd(1) * 39) + 1

                Select Case RN1

                    Case 1
                        pbpString$ = "DIPSY-DOO DUNK-A-ROO!!!"
                    Case 2
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " MAKES IT HAMMER TIME!!!"
                    Case 3
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " SLAMS IT IN!!!"
                    Case 4
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " WITH THE 2-HANDED SLAM!!!"
                    Case 5
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " SLAMS IT HOME!!!"
                    Case 6
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " JAMS IT HOME!!!"
                    Case 7
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " THROWS IT DOWN!!!"
                    Case 8
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " THUNDERSLAM!!!"
                    Case 9
                        pbpString$ = "RIM ROCKING JAM!!!"
                    Case 10
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " WITH THE MONSTER SLAM!!"
                    Case 11
                        pbpString$ = players$(P, B1(P, ballCarrier)) + "POWER SLAMS IT!!!"
                    Case 12
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " WITH THE 2-HANDED STUFF!!!"
                    Case 13
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " BACKWARDS JAM!!!"
                    Case 14
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " WITH THE 1-HANDED SLAM!!!"
                    Case 15
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " WITH THE REVERSE SLAM!!!"
                    Case 16
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " WITH THE REVERSE JAM!!!"
                    Case 17
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " WITH THE WINDMILL JAM!!!"
                    Case 18
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " WITH THE WINDMILL SLAM!!!"
                    Case 19
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " WITH THE TOMAHAWK SLAM!!!"
                    Case 20
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " WITH THE 360 SLAM!!!"
                    Case 21
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " WITH THE SPINNING SLAM!!!"
                    Case 22
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " WITH THE LEFT HANDED DUNK!!!"
                    Case 23
                        pbpString$ = "DOUBLE CLUTCH JAM!!!"
                    Case 24
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " GETS THE FLUSH!!!"
                    Case 25
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " PUNCHES IT HOME!!!"
                    Case 26
                        pbpString$ = players$(P, B1(P, ballCarrier)) + "...DOUBLE PUMP SLAM!!!"
                    Case 27
                        pbpString$ = players$(P, B1(P, ballCarrier)) + "...IN YOUR FACE SLAM!!!"
                    Case 28
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " IS UP"
                        Call PBP
                        pbpString$ = "HE SPINS"
                        Call PBP
                        pbpString$ = "BEHIND THE BACK SLAM!!!"
                    Case 29
                        pbpString$ = "HE SLAMS IT HOME!!"
                    Case 30
                        pbpString$ = "HE LAYS IT UP AND IN!!"
                    Case 31
                        pbpString$ = "HE BANGS IT IN!!"
                    Case 32
                        pbpString$ = "HE RAMS IT IN!!"
                    Case 33
                        pbpString$ = "HE SLAMS IT IN!!!"
                    Case 34
                        pbpString$ = "DIPSY-DOO DUNK-A-ROO!!!"
                    Case 35
                        pbpString$ = "HE MAKES IT HAMMER TIME!!!"
                    Case 36
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " WITH THE 2-HANDED SLAM!!!"
                    Case 37
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " IS UP"
                        Call PBP
                        pbpString$ = "HE SPINS"
                        Call PBP
                        pbpString$ = "BEHIND THE BACK SLAM!!!"
                    Case 38
                        pbpString$ = "HE JAMS IT HOME!!!"
                    Case 39
                        pbpString$ = "HE HAMMERS IT HOME!"

                End Select

            Case 3
                'SHOT
                pbpString$ = players$(P, B1(P, ballCarrier))

                Select Case PZ%

                    Case 1
                        'BAD
                        Select Case RN0

                            Case 1 To 40
                                pbpString$ = pbpString$ + " TAKES A TOUGH SHOT"
                            Case 40 To 45
                                pbpString$ = pbpString$ + " SHOOTS OFF BALANCE"
                            Case 46 To 50
                                pbpString$ = pbpString$ + " FORCES ONE UP"
                            Case 51 To 60
                                pbpString$ = pbpString$ + " SHOOTS UNDER PRESSURE"
                            Case 61 To 65
                                pbpString$ = pbpString$ + " WITH A BAD SHOT"
                            Case 66 To 70
                                pbpString$ = pbpString$ + " SHOOTS IN HEAVY TRAFFIC"
                            Case 71 To 75
                                pbpString$ = pbpString$ + " THROWS UP A PRAYER"
                            Case 76 To 80
                                pbpString$ = pbpString$ + " TAKES A BAD SHOT"
                            Case 81 To 85
                                pbpString$ = pbpString$ + " FORCES THE INSIDE SHOT"
                            Case 86 To 100
                                pbpString$ = pbpString$ + " TURNS AND SHOOTS"

                        End Select

                    Case 2
                        'INSIDE W/ASSIST
                        Select Case RN0

                            Case 1 To 10
                                pbpString$ = "HE CUTS TO THE BASKET"
                                Call PBP
                                pbpString$ = "TAKES IT UP"

                                If (ballCarrier = 0 Or ballCarrier = 1) And Int(Rnd(1) * 100) + 1 <= 1 Then DK% = 1
                                If (ballCarrier = 2 Or ballCarrier = 3) And Int(Rnd(1) * 100) + 1 <= 5 Then DK% = 1
                                If ballCarrier = 4 And Int(Rnd(1) * 100) + 1 <= 7 Then DK% = 1

                            Case 11 To 20
                                pbpString$ = "HE TAKES IT TO THE HOLE"
                                If (ballCarrier = 0 Or ballCarrier = 1) And Int(Rnd(1) * 100) + 1 <= 1 Then DK% = 1
                                If (ballCarrier = 2 Or ballCarrier = 3) And Int(Rnd(1) * 100) + 1 <= 5 Then DK% = 1
                                If ballCarrier = 4 And Int(Rnd(1) * 100) + 1 <= 7 Then DK% = 1

                            Case 21 To 30
                                pbpString$ = "HE TAKES IT TO THE HOOP"
                                If (ballCarrier = 0 Or ballCarrier = 1) And Int(Rnd(1) * 100) + 1 <= 1 Then DK% = 1
                                If (ballCarrier = 2 Or ballCarrier = 3) And Int(Rnd(1) * 100) + 1 <= 5 Then DK% = 1
                                If ballCarrier = 4 And Int(Rnd(1) * 100) + 1 <= 7 Then DK% = 1

                            Case 31 To 40
                                pbpString$ = "HE LEANS IN AND SHOOTS"

                            Case 41 To 50
                                pbpString$ = "HE PUTS IT UP"

                            Case 51 To 60
                                pbpString$ = "HE TAKES IT TO THE BOARD"
                                If (ballCarrier = 0 Or ballCarrier = 1) And Int(Rnd(1) * 100) + 1 <= 1 Then DK% = 1
                                If (ballCarrier = 2 Or ballCarrier = 3) And Int(Rnd(1) * 100) + 1 <= 5 Then DK% = 1
                                If ballCarrier = 4 And Int(Rnd(1) * 100) + 1 <= 7 Then DK% = 1

                            Case 61 To 70
                                pbpString$ = "HE PUTS IT OFF THE GLASS"

                            Case 71 To 80
                                If ballCarrier = 4 Then
                                    pbpString$ = "HE SHOOTS THE HOOK"
                                Else
                                    'ballCarrier <> 4
                                    pbpString$ = "HE GOES IN FOR THE LAYUP"
                                End If

                            Case 81 To 90
                                pbpString$ = "HE TAKES IT UP STRONG"
                                If (ballCarrier = 0 Or ballCarrier = 1) And Int(Rnd(1) * 100) + 1 <= 1 Then DK% = 1
                                If (ballCarrier = 2 Or ballCarrier = 3) And Int(Rnd(1) * 100) + 1 <= 5 Then DK% = 1
                                If ballCarrier = 4 And Int(Rnd(1) * 100) + 1 <= 7 Then DK% = 1

                            Case 91 To 95
                                pbpString$ = "HE POWERS IT UP"
                                If (ballCarrier = 0 Or ballCarrier = 1) And Int(Rnd(1) * 100) + 1 <= 1 Then DK% = 1
                                If (ballCarrier = 2 Or ballCarrier = 3) And Int(Rnd(1) * 100) + 1 <= 5 Then DK% = 1
                                If ballCarrier = 4 And Int(Rnd(1) * 100) + 1 <= 7 Then DK% = 1

                            Case 96 To 100
                                pbpString$ = "HE LAYS IT UP"

                        End Select

                    Case 3
                        'PENETRATE
                        Select Case ballCarrier

                            Case 0, 1

                                Select Case RN0

                                    Case 1 To 25
                                        pbpString$ = "HE SPINS FREE"
                                        Call PBP
                                        pbpString$ = "SHOOTS"
                                    Case 26 To 50
                                        pbpString$ = "HE TAKES IT UP UNDER THE BASKET"
                                        If Int(Rnd(1) * 100) + 1 <= 2 Then DK% = 1
                                    Case 51 To 52
                                        pbpString$ = "HE MAKES A NICE SPIN MOVE"
                                        Call PBP
                                        pbpString$ = "AND SOARS TO THE HOOP"
                                        If Int(Rnd(1) * 100) + 1 <= 2 Then DK% = 1
                                    Case 53 To 54
                                        pbpString$ = "HE BLOWS PAST TWO DEFENDERS"
                                    Case 55 To 56
                                        pbpString$ = "HE DRIVES THE BASELINE"
                                        Call PBP
                                        pbpString$ = "SPINS RIGHT AND GOES UP"
                                        If Int(Rnd(1) * 100) + 1 <= 2 Then DK% = 1
                                    Case 57
                                        pbpString$ = "HE SLICES IN THE HOLE"
                                        Call PBP
                                        pbpString$ = "UNDERHAND SCOOP SHOT"
                                    Case 58
                                        pbpString$ = "STRONG CUT ALONG THE BASELINE"
                                        Call PBP
                                        pbpString$ = "DOUBLE PUMP REVERSE LAYUP"
                                    Case 59
                                        pbpString$ = "HE PENETRATES"
                                        Call PBP
                                        pbpString$ = "GORGEOUS FINGER ROLL!"
                                    Case 60 To 75
                                        pbpString$ = "HE TAKES THE JUMPER"
                                    Case 76 To 90
                                        pbpString$ = "HE STOPS"
                                        Call PBP
                                        pbpString$ = "SHOOTS"
                                    Case 91
                                        pbpString$ = "HE LOOKS TO PASS"
                                        Call PBP
                                        pbpString$ = "NO ONE IS OPEN"
                                        Call PBP
                                        pbpString$ = "HE PUTS IT UP"
                                    Case 92 To 100
                                        pbpString$ = "HE TAKES THE SHOT"

                                End Select

                            Case 2, 3

                                Select Case RN0

                                    Case 1 To 16
                                        pbpString$ = "HE TAKES IT UP"
                                        If Int(Rnd(1) * 100) + 1 <= 7 Then DK% = 1
                                    Case 17 To 32
                                        pbpString$ = "HE SPINS FREE"
                                        Call PBP
                                        pbpString$ = "SHOOTS"
                                        If Int(Rnd(1) * 100) + 1 <= 7 Then DK% = 1
                                    Case 33 To 48
                                        pbpString$ = "HE GETS LOOSE IN THE PAINT"
                                        Call PBP
                                        pbpString$ = "TAKES IT UP"
                                        If Int(Rnd(1) * 100) + 1 <= 7 Then DK% = 1
                                    Case 49 To 64
                                        pbpString$ = "HE PUTS IT UP"
                                    Case 65 To 67
                                        pbpString$ = "HE CURLS OFF A PICK IN THE PAINT"
                                        Call PBP
                                        pbpString$ = "TAKES IT UP"
                                        If Int(Rnd(1) * 100) + 1 <= 7 Then DK% = 1
                                    Case 68, 69
                                        pbpString$ = "HE MAKES A NICE SPIN MOVE"
                                        Call PBP
                                        pbpString$ = "AND SOARS TO THE HOOP"
                                        If Int(Rnd(1) * 100) + 1 <= 7 Then DK% = 1
                                    Case 70, 71
                                        pbpString$ = "HE DRIVES THE BASELINE"
                                        Call PBP
                                        pbpString$ = "SPINS RIGHT AND GOES UP"
                                        If Int(Rnd(1) * 100) + 1 <= 7 Then DK% = 1
                                    Case 72
                                        pbpString$ = "HE SLICES IN THE HOLE"
                                        Call PBP
                                        pbpString$ = "UNDERHAND SCOOP SHOT"
                                    Case 73
                                        pbpString$ = "STRONG CUT ALONG THE BASELINE"
                                        Call PBP
                                        pbpString$ = "DOUBLE PUMP REVERSE LAYUP"
                                    Case 74
                                        pbpString$ = "HE PENETRATES"
                                        Call PBP
                                        pbpString$ = "GORGEOUS FINGER ROLL!"
                                    Case 75 To 80
                                        pbpString$ = "HE SHOOTS"
                                    Case 81 To 100
                                        pbpString$ = "HE TAKES THE SHOT"

                                End Select

                            Case 4

                                Select Case RN0

                                    Case 1 To 15
                                        pbpString$ = "HE PUTS IT OFF THE GLASS"
                                    Case 16 To 25
                                        pbpString$ = "HE PIVOTS TO THE BASKET"
                                    Case 26 To 40
                                        pbpString$ = "HE POWERS IT UP"
                                    Case 41 To 58
                                        pbpString$ = "HE TAKES IT TO THE HOOP"
                                        If Int(Rnd(1) * 100) + 1 <= 15 Then DK% = 1
                                    Case 59 To 70
                                        pbpString$ = "HE TAKES THE SHOT"
                                    Case 71, 72
                                        pbpString$ = "HE CURLS OFF A PICK IN THE PAINT"
                                        Call PBP
                                        pbpString$ = "TAKES IT UP"
                                        If Int(Rnd(1) * 100) + 1 <= 15 Then DK% = 1
                                    Case 73, 74
                                        pbpString$ = "HE MAKES A NICE SPIN MOVE"
                                        Call PBP
                                        pbpString$ = "AND SOARS TO THE HOOP"
                                        If Int(Rnd(1) * 100) + 1 <= 15 Then DK% = 1
                                    Case 75 To 100
                                        pbpString$ = "HE TAKES IT UP STRONG"
                                        If Int(Rnd(1) * 100) + 1 <= 15 Then DK% = 1

                                End Select

                        End Select

                    Case 4
                        'THREE!
                        If FT% = 1 Then
                            If RN0 <= 50 Then
                                pbpString$ = pbpString$ + " THROWS UP A PRAYER"
                            Else
                                pbpString$ = pbpString$ + " LAUNCHES A THREE"
                            End If
                        End If

                        If FT% = 1 Then
                            FT% = 0
                        Else
                            Select Case RN0

                                Case 1 To 10
                                    pbpString$ = pbpString$ + " TRIES FOR THREE!"
                                Case 11 To 20
                                    pbpString$ = pbpString$ + " SHOOTS FROM 3-POINT RANGE!"
                                Case 21 To 30
                                    pbpString$ = pbpString$ + " HOISTS A THREE!"
                                Case 31 To 40
                                    pbpString$ = pbpString$ + " BOMBS A THREE FROM THE CORNER!"
                                Case 41 To 50
                                    pbpString$ = pbpString$ + " FIRES FROM THE 3-POINT LINE!"
                                Case 51 To 60
                                    pbpString$ = pbpString$ + " SHOOTS FOR THREE!"
                                Case 61 To 70
                                    pbpString$ = pbpString$ + " SHOOTS THE 3-POINTER!"
                                Case 71 To 80
                                    pbpString$ = pbpString$ + " FOR 3...!"
                                Case 81 To 90
                                    pbpString$ = pbpString$ + " PUTS UP THE TREY!"
                                Case 91 To 100
                                    pbpString$ = pbpString$ + " TAKES THE 3-POINTER!"

                            End Select

                        End If

                    Case 5
                        'SHORT JUMP
                        DK% = 0

                        RN1 = Int(Rnd(1) * 59) + 1

                        Select Case RN1

                            Case 1
                                pbpString$ = pbpString$ + " WITH A TWISTING JUMPER"
                            Case 2
                                pbpString$ = pbpString$ + " SHOOTS THE J"
                            Case 3
                                If ballCarrier = 4 Then
                                    pbpString$ = pbpString$ + " RELEASES THE HOOK"
                                Else
                                    'ballCarrier <> 4
                                    pbpString$ = pbpString$ + " TAKES THE SHOT"
                                End If
                            Case 4
                                pbpString$ = pbpString$ + " WITH A SHORT JUMPER"
                            Case 5
                                pbpString$ = pbpString$ + " WITH THE 10 FOOTER"
                            Case 6
                                If ballCarrier = 4 Then
                                    pbpString$ = pbpString$ + " WITH THE RUNNING HOOK"
                                Else
                                    'ballCarrier <> 4
                                    pbpString$ = pbpString$ + " WITH THE RUNNER"
                                End If

                            Case 7
                                If ballCarrier = 4 Then
                                    pbpString$ = pbpString$ + " WITH A SWEEPING HOOK"
                                Else
                                    'ballCarrier <> 4
                                    pbpString$ = pbpString$ + " WORKS FREE AND SHOOTS"
                                End If

                            Case 8
                                If ballCarrier = 4 Then
                                    pbpString$ = pbpString$ + " WITH A BABY HOOK SHOT"
                                Else
                                    'ballCarrier <> 4
                                    pbpString$ = pbpString$ + " TAKES THE SHOT"
                                End If

                            Case 9
                                pbpString$ = pbpString$ + " LEANS IN AND SHOOTS"
                            Case 10
                                pbpString$ = pbpString$ + " SHOOTS"
                            Case 11
                                pbpString$ = pbpString$ + " SHOOTS FALLING AWAY"
                            Case 12
                                pbpString$ = pbpString$ + " LEANS IN FOR THE SHOT"
                            Case 13
                                pbpString$ = pbpString$ + " TAKES THE LEFT HANDER"
                            Case 14
                                pbpString$ = pbpString$ + " HARD TO THE HOLE..."
                            Case 15
                                pbpString$ = pbpString$ + " FLIPS IT UP"
                            Case 16
                                pbpString$ = pbpString$ + " FORCES THE INSIDE SHOT"
                            Case 17
                                pbpString$ = pbpString$ + " CUTS TO THE BASKET"
                            Case 18
                                pbpString$ = pbpString$ + " TAKES IT IN THE PAINT"
                            Case 19
                                pbpString$ = pbpString$ + " FLOATS IT OVER HIS MAN"
                            Case 20
                                pbpString$ = pbpString$ + " TAKES HIS MAN INSIDE"
                            Case 21
                                pbpString$ = pbpString$ + " WHEELS IN THE LANE"
                            Case 22
                                pbpString$ = pbpString$ + " CUTS INSIDE FOR THE SHOT"
                            Case 23
                                pbpString$ = pbpString$ + " PENETRATES AND SHOOTS"
                            Case 24
                                pbpString$ = pbpString$ + " SLICES INSIDE"
                            Case 25
                                pbpString$ = pbpString$ + " LOOKS FOR TWO"
                            Case 26
                                pbpString$ = pbpString$ + " DRIVES INTO THE PAINT"
                            Case 27
                                pbpString$ = pbpString$ + " HAS THE BASELINE JUMPER"
                            Case 28
                                pbpString$ = pbpString$ + " GLIDES TO THE HOLE"
                            Case 29
                                pbpString$ = pbpString$ + " GETS INSIDE FOR THE SHOT"
                            Case 30
                                pbpString$ = pbpString$ + " SPINS TOWARD THE HOOP"
                            Case 31
                                pbpString$ = pbpString$ + " FROM SHORT RANGE"
                            Case 32
                                pbpString$ = pbpString$ + " GOES BASELINE"
                            Case 33
                                pbpString$ = pbpString$ + " PENETRATES AND SHOOTS"
                            Case 34
                                pbpString$ = pbpString$ + " FROM 8 FEET"
                            Case 35
                                pbpString$ = pbpString$ + " FROM 6 FEET"
                            Case 36
                                pbpString$ = pbpString$ + " FROM 5 FEET"
                            Case 37
                                pbpString$ = pbpString$ + " DRIVES TO THE HOLE"
                            Case 38
                                pbpString$ = pbpString$ + " GLIDES TO THE HOLE"
                            Case 39
                                pbpString$ = pbpString$ + " GETS INSIDE FOR THE SHOT"
                            Case 40
                                pbpString$ = pbpString$ + " GOES TO THE HOLE"
                            Case 41
                                pbpString$ = pbpString$ + " CUTS INSIDE"
                            Case 42
                                pbpString$ = pbpString$ + " SPINS INSIDE"
                            Case 43
                                pbpString$ = pbpString$ + " BREAKS INSIDE"
                            Case 44
                                pbpString$ = pbpString$ + " SNEAKS INSIDE"
                            Case 45
                                pbpString$ = pbpString$ + " SCOOTS INSIDE"
                            Case 46
                                pbpString$ = pbpString$ + " WORKS IT INSIDE"
                            Case 47
                                pbpString$ = pbpString$ + " KNIFES INSIDE"
                            Case 48
                                pbpString$ = pbpString$ + " SCISSORS THROUGH"
                            Case 49
                                pbpString$ = pbpString$ + " BANGS INSIDE"
                            Case 50
                                pbpString$ = pbpString$ + " SLICES INSIDE"
                            Case 51
                                pbpString$ = pbpString$ + " PUMPS AND SHOOTS"
                            Case 52
                                pbpString$ = pbpString$ + " DOUBLE PUMPS AND SHOOTS"
                            Case 53
                                pbpString$ = pbpString$ + "...ONE HANDED FADE AWAY"
                            Case 54
                                pbpString$ = pbpString$ + "...LEFT HANDED FADE AWAY"
                            Case 55
                                pbpString$ = pbpString$ + "...HIGH ARCHING SHOT"
                            Case 56
                                pbpString$ = pbpString$ + " WITH A RUNNING LEFT HANDER"
                            Case 57
                                pbpString$ = pbpString$ + " WITH A RUNNING SCOOP SHOT"
                            Case 58
                                pbpString$ = pbpString$ + " WITH THE SCOOP SHOT"
                            Case 59
                                pbpString$ = pbpString$ + " WITH THE FINGER ROLL"

                        End Select

                    Case 6
                        DK% = 0

                        RN1 = Int(Rnd(1) * 59) + 1

                        Select Case RN1

                            Case 1
                                pbpString$ = pbpString$ + " POPS FROM OUTSIDE"
                            Case 2
                                pbpString$ = pbpString$ + " DECIDES TO SHOOT IT"
                            Case 3
                                pbpString$ = pbpString$ + " FIRES THE FADE-AWAY"
                            Case 4
                                pbpString$ = pbpString$ + " LETS IT FLY"
                            Case 5
                                pbpString$ = pbpString$ + " LAUNCHES ONE"
                            Case 6
                                pbpString$ = pbpString$ + " WITH THE OUTSIDE SHOT"
                            Case 7
                                pbpString$ = pbpString$ + " OUT OF THE CORNER"
                            Case 8
                                pbpString$ = pbpString$ + " PUTS IT UP FROM 18"
                            Case 9
                                pbpString$ = pbpString$ + " SPOTS UP OUTSIDE"
                            Case 10
                                pbpString$ = pbpString$ + " RELEASES THE JUMPER"
                            Case 11
                                pbpString$ = pbpString$ + " FROM THE TOP OF THE KEY"
                            Case 12
                                pbpString$ = pbpString$ + " FIRES FROM THE LEFT WING"
                            Case 13
                                pbpString$ = pbpString$ + " TRIES THE 12 FOOTER"
                            Case 14
                                pbpString$ = pbpString$ + " PULLS UP AND POPS"
                            Case 15
                                pbpString$ = pbpString$ + " FIRES FROM 15"
                            Case 16
                                pbpString$ = pbpString$ + " FROM THE PERIMETER"
                            Case 17
                                pbpString$ = pbpString$ + " TURNS AND SHOOTS"
                            Case 18
                                pbpString$ = pbpString$ + " SHOOTS OFF THE SCREEN"
                            Case 19
                                pbpString$ = pbpString$ + " FAKES AND SHOOTS"
                            Case 20
                                pbpString$ = pbpString$ + " FIRES AWAY"
                            Case 21
                                pbpString$ = pbpString$ + " POPS FROM THE BASELINE"
                            Case 22
                                pbpString$ = pbpString$ + " DRIVES THE LANE"
                            Case 23
                                pbpString$ = pbpString$ + " TAKES THE SHOT"
                            Case 24
                                pbpString$ = pbpString$ + " WORKS FREE AND FIRES"
                            Case 25
                                pbpString$ = pbpString$ + " SHOOTS OVER HIS MAN"
                            Case 26
                                pbpString$ = pbpString$ + " SHOOTS FALLING AWAY"
                            Case 27
                                pbpString$ = pbpString$ + " FAKES AND SHOOTS"
                            Case 28
                                pbpString$ = pbpString$ + " FIRES AWAY"
                            Case 29
                                pbpString$ = pbpString$ + " POPS FROM THE BASELINE"
                            Case 30
                                pbpString$ = pbpString$ + " DRIVES THE LANE"
                            Case 31
                                pbpString$ = pbpString$ + " TAKES THE SHOT"
                            Case 32
                                pbpString$ = pbpString$ + " WORKS FREE AND FIRES"
                            Case 33
                                pbpString$ = pbpString$ + " SHOOTS FROM 15"
                            Case 34
                                pbpString$ = pbpString$ + " SHOOTS"
                            Case 35
                                pbpString$ = pbpString$ + " TAKES THE JUMPER"
                            Case 36
                                pbpString$ = pbpString$ + " FROM THE RIGHT CORNER"
                            Case 37
                                pbpString$ = pbpString$ + " FROM THE LEFT CORNER"
                            Case 38
                                pbpString$ = pbpString$ + " FROM THE KEY"
                            Case 39
                                pbpString$ = pbpString$ + " FIRES FROM OUTSIDE"
                            Case 40
                                pbpString$ = pbpString$ + " PUTS IT UP FROM 16"
                            Case 41
                                pbpString$ = pbpString$ + " FROM THE PERIMETER"
                            Case 42
                                pbpString$ = pbpString$ + " FAKES AND SHOOTS"
                            Case 43
                                pbpString$ = pbpString$ + " FROM AROUND 16 FEET"
                            Case 44
                                pbpString$ = pbpString$ + " PUTS IT UP"
                            Case 45
                                pbpString$ = pbpString$ + " WITH A RUNNING ONE-HANDER"
                            Case 46
                                pbpString$ = pbpString$ + " PULLS UP"
                            Case 47
                                pbpString$ = pbpString$ + " KISSES THE GLASS"
                            Case 48
                                pbpString$ = pbpString$ + " SPINS AND SHOOTS"
                            Case 49
                                pbpString$ = pbpString$ + " PUTS IT UP FROM 16"
                            Case 50
                                pbpString$ = pbpString$ + " WITH A LONG JUMPER"
                            Case 51
                                pbpString$ = pbpString$ + " PUMPS AND SHOOTS"
                            Case 52
                                pbpString$ = pbpString$ + " DOUBLE PUMPS AND SHOOTS"
                            Case 53
                                pbpString$ = pbpString$ + "...ONE HANDED FADE AWAY"
                            Case 54
                                pbpString$ = pbpString$ + "...LEFT HANDED FADE AWAY"
                            Case 55
                                pbpString$ = pbpString$ + "...HIGH ARCHING SHOT"
                            Case 56
                                pbpString$ = pbpString$ + " WITH A RUNNING LEFT HANDER"
                            Case 57
                                pbpString$ = pbpString$ + " WITH A RUNNING SCOOP SHOT"
                            Case 58
                                pbpString$ = pbpString$ + " WITH THE SCOOP SHOT"
                            Case 59
                                pbpString$ = pbpString$ + " WITH THE FINGER ROLL"

                        End Select

                    Case 7
                        DK% = 0

                        Select Case RN0

                            Case 1 To 10
                                pbpString$ = pbpString$ + " FIRES FROM THE PERIMETER"
                            Case 11 To 20
                                pbpString$ = pbpString$ + " SHOOTS FROM 17"
                            Case 21 To 30
                                pbpString$ = pbpString$ + " PUTS IT UP FROM 17"
                            Case 31 To 40
                                pbpString$ = pbpString$ + " PUTS IT UP"
                            Case 41 To 45
                                pbpString$ = pbpString$ + " FROM INSIDE THE THE KEY"
                            Case 46 To 50
                                pbpString$ = pbpString$ + " FIRES FROM THE CORNER"
                            Case 51 To 60
                                pbpString$ = pbpString$ + " SHOOTS FROM OUTSIDE"
                            Case 61 To 70
                                pbpString$ = pbpString$ + " PUMPS AND SHOOTS"
                            Case 71 To 80
                                pbpString$ = pbpString$ + " FIRES THE FADE-AWAY"
                            Case 81 To 90
                                If threePtOpt = 1 Then
                                    pbpString$ = pbpString$ + " FROM INSIDE THE 3-POINT LINE"
                                End If
                            Case 91
                                If threePtOpt = 1 Then
                                    pbpString$ = pbpString$ + " FOR THREE!"
                                    Call PBP

                                    pbpString$ = "NO!"
                                    Call PBP

                                    pbpString$ = "HIS FOOT IS ON THE 3-POINT LINE"
                                End If
                            Case 92 To 100
                                pbpString$ = pbpString$ + " SHOOTS FROM THE WING"

                        End Select

                    Case 8

                        Select Case RN0

                            Case 1 To 20
                                pbpString$ = "HE SAILS TO THE HOOP"
                            Case 21 To 23
                                pbpString$ = "HE TAKES IT TO THE BUCKET"
                            Case 24 To 26
                                pbpString$ = "HE TAKES IT TO THE HOLE"
                            Case 27 To 29
                                pbpString$ = "HE SLASHES TO THE HOLE"
                            Case 30 To 32
                                pbpString$ = "HE SLASHES TO THE BUCKET"
                            Case 33 To 35
                                pbpString$ = "HE SOARS TO THE BUCKET"
                            Case 36 To 38
                                pbpString$ = "HE SOARS TO THE HOLE"
                            Case 39 To 40
                                pbpString$ = "HE GLIDES TO THE HOLE"
                            Case 41 To 60
                                pbpString$ = "HE GOES IN STRONG"
                            Case 61 To 80
                                pbpString$ = "HE TAKES IT IN"
                            Case 81 To 90
                                pbpString$ = "HE TAKES A DEFENDER WITH HIM"
                            Case 91 To 100
                                pbpString$ = "HE GOES UP WITH IT"

                        End Select

                    Case 9
                        'BACK AFTER REB
                        pbpString$ = "HE "

                        RN1 = Int(Rnd(1) * 11) + 1

                        Select Case RN1

                            Case 1
                                pbpString$ = pbpString$ + "TAKES IT BACK UP"
                            Case 2
                                pbpString$ = pbpString$ + "GOES BACK UP WITH IT"
                            Case 3
                                pbpString$ = pbpString$ + "POWERS HIS WAY UP WITH IT"
                            Case 4
                                pbpString$ = pbpString$ + "GOES STRONG TO THE BASKET"
                            Case 5
                                pbpString$ = pbpString$ + "MUSCLES IT UP"
                            Case 6
                                pbpString$ = pbpString$ + "SHOOTS"
                            Case 7
                                pbpString$ = pbpString$ + "TAKES IT TO THE GOAL"
                            Case 8
                                pbpString$ = pbpString$ + "PUTS IT UP AGAIN"
                            Case 9
                                pbpString$ = pbpString$ + "SHOOTS IT AGAIN"
                            Case 10
                                pbpString$ = pbpString$ + "CLAWS HIS WAY UP"
                            Case 11
                                pbpString$ = pbpString$ + "SHOOTS IN TRAFFIC"

                        End Select

                        If ballCarrier = 2 Or ballCarrier = 3 And Int(Rnd(1) * 100) + 1 <= 7 Then DK% = 1
                        If ballCarrier = 4 And Int(Rnd(1) * 100) + 1 <= 15 Then DK% = 1

                    Case 10
                        DK% = 0

                        Call d100(RN1)

                        Select Case RN1

                            Case 1 To 20
                                pbpString$ = pbpString$ + " SHOOTS FROM 15"
                            Case 21 To 40
                                pbpString$ = pbpString$ + " SHOOTS"
                            Case 41 To 60
                                pbpString$ = pbpString$ + " TAKES THE JUMPER"
                            Case 61 To 80
                                pbpString$ = pbpString$ + " PUTS IT UP FROM 16"
                            Case 81 To 100
                                pbpString$ = pbpString$ + " FAKES AND SHOOTS"

                        End Select

                End Select

            Case 4
                'THREE GOOD
                pbpString$ = "HE "

                Select Case RN0

                    Case 1 To 6
                        pbpString$ = pbpString$ + " DRAINS THE THREE!"
                        Call PBP
                        pbpString$ = "NO!"
                        Call PBP
                        pbpString$ = "HIS FOOT IS ON THE 3-POINT LINE"
                        XX% = 1
                    Case 7 To 10
                        pbpString$ = pbpString$ + "FILLS UP THE BASKET!!!"
                    Case 11 To 20
                        pbpString$ = pbpString$ + "HITS THE TREY!!!"
                    Case 21 To 30
                        pbpString$ = "IT'S GOOOODD!!"
                    Case 31 To 40
                        pbpString$ = pbpString$ + "GETS IT!!!"
                    Case 41 To 45
                        pbpString$ = "NOTHING BUT THE BOTTOM OF THE NET"
                    Case 46 To 50
                        pbpString$ = "COUNT IT!!"
                    Case 51 To 55
                        pbpString$ = "WAY DOWNTOWN BANG!!!"
                    Case 56 To 60
                        pbpString$ = pbpString$ + "RINGS IT UP!!!"
                    Case 61 To 80
                        pbpString$ = pbpString$ + "DRAINS IT!!!"
                    Case 81 To 90
                        pbpString$ = "HE BURIES IT!!!"
                    Case 91 To 100
                        pbpString$ = "IT'S ALL NET!!!"

                End Select

            Case 5
                'THREE BAD
                pbpString$ = "HE "

                Select Case RN0

                    Case 1 To 20
                        pbpString$ = pbpString$ + "GETS NONE"
                    Case 21 To 25
                        pbpString$ = "IT NEVER HAD A CHANCE"
                    Case 26 To 35
                        pbpString$ = "AIRRRR BALLLL!!"
                    Case 36 To 40
                        pbpString$ = pbpString$ + "MISFIRES"
                    Case 41 To 60
                        pbpString$ = "IT'S OFF THE RIM...NO GOOD!"
                    Case 61 To 80
                        pbpString$ = "IT'S SHORT"
                    Case 81 To 100
                        pbpString$ = pbpString$ + "MISSES"

                End Select

            Case 6
                'FAST BREAK
                pbpString$ = players$(P, B1(P, ballCarrier))

                RN1 = Int(Rnd(1) * 38) + 1

                Select Case RN1

                    Case 1
                        pbpString$ = pbpString$ + " HAS IT ON THE FAST BREAK!"
                    Case 2
                        pbpString$ = pbpString$ + " IS IN TRANSITION!"
                    Case 3
                        pbpString$ = pbpString$ + " STARTS THE BREAK!"
                    Case 4
                        pbpString$ = pbpString$ + " IS DOWN COURT IN A HURRY!"
                    Case 5
                        pbpString$ = pbpString$ + " IS ON THE RUN!"
                    Case 6
                        pbpString$ = pbpString$ + " GOES COAST TO COAST!"
                    Case 7
                        pbpString$ = pbpString$ + " ON THE BREAK!"
                    Case 8
                        pbpString$ = pbpString$ + " ON THE RUN!"
                    Case 9
                        pbpString$ = pbpString$ + " ON THE FAST BREAK!"
                    Case 10
                        pbpString$ = pbpString$ + " HAS THE FAST BREAK!"
                    Case 11
                        pbpString$ = pbpString$ + " BREAKS INTO THE FORECOURT!"
                    Case 12
                        pbpString$ = pbpString$ + " FLIES UPCOURT!"
                    Case 13
                        pbpString$ = pbpString$ + " STARTS THE FASTBREAK!"
                    Case 14
                        pbpString$ = pbpString$ + " ON THE MOVE!"
                    Case 15
                        pbpString$ = pbpString$ + " IN TRANSITION!"
                    Case 16
                        pbpString$ = pbpString$ + " DOWN COURT IN A HURRY!"
                    Case 17
                        pbpString$ = pbpString$ + " CHARGES ACROSS THE LINE!"
                    Case 18
                        pbpString$ = pbpString$ + " BREAKS QUICKLY!"
                    Case 19
                        pbpString$ = pbpString$ + " BREAKS DOWN COURT!"
                    Case 20
                        pbpString$ = pbpString$ + " STARTS THE RUNNING GAME!"
                    Case 21
                        pbpString$ = pbpString$ + " FLIES DOWN THE FLOOR!"
                    Case 22
                        pbpString$ = pbpString$ + " GOES RIGHT TO WORK!"
                    Case 23
                        pbpString$ = pbpString$ + " BACK THE OTHER WAY!"
                    Case 24
                        pbpString$ = pbpString$ + " QUICKLY UP THE FLOOR!"
                    Case 25
                        pbpString$ = pbpString$ + " PUSHES IT UP COURT!"
                    Case 26
                        pbpString$ = pbpString$ + " WASTES NO TIME!"
                    Case 27
                        pbpString$ = pbpString$ + " UPS THE TEMPO!"
                    Case 28
                        pbpString$ = pbpString$ + " HUSTLES DOWN COURT!"
                    Case 29
                        pbpString$ = pbpString$ + " RUSHES UP THE FLOOR!"
                    Case 30
                        pbpString$ = pbpString$ + " ON THE MOVE!"
                    Case 31
                        pbpString$ = pbpString$ + " STREAKS UP THE COURT!"
                    Case 32
                        pbpString$ = pbpString$ + " FLIES DOWN THE COURT!"
                    Case 33
                        pbpString$ = pbpString$ + " JETS DOWN COURT!"
                    Case 34
                        pbpString$ = pbpString$ + " QUICKLY GETS IT UP COURT!"
                    Case 35
                        pbpString$ = pbpString$ + " TAKES IT COAST TO COAST!"
                    Case 36
                        pbpString$ = pbpString$ + " IS RUNNING AND GUNNING!"
                    Case 37
                        pbpString$ = pbpString$ + " FLIES OVER THE TIME LINE!"
                    Case 38
                        pbpString$ = pbpString$ + " RUSHES IT UP THE FLOOR!"

                End Select

                Call SHOTSTRING

            Case 7
                'FAST BREAK SCORE
                fastBreak = 0

                RN1 = Int(Rnd(1) * 39) + 1

                Select Case RN1

                    Case 1
                        pbpString$ = "DIPSY-DOO DUNK-A-ROO!!!"
                    Case 2
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " MAKES IT HAMMER TIME!!!"
                    Case 3
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " SLAMS IT IN!!!"
                    Case 4
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " WITH THE 2-HANDED SLAM!!!"
                    Case 5
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " SLAMS IT HOME!!!"
                    Case 6
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " JAMS IT HOME!!!"
                    Case 7
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " THROWS IT DOWN!!!"
                    Case 8
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " THUNDERSLAM!!!"
                    Case 9
                        pbpString$ = "RIM ROCKING JAM!!!"
                    Case 10
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " WITH THE MONSTER SLAM!!"
                    Case 11
                        pbpString$ = players$(P, B1(P, ballCarrier)) + "POWER SLAMS IT!!!"
                    Case 12
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " WITH THE 2-HANDED STUFF!!!"
                    Case 13
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " BACKWARDS JAM!!!"
                    Case 14
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " WITH THE 1-HANDED SLAM!!!"
                    Case 15
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " WITH THE REVERSE SLAM!!!"
                    Case 16
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " WITH THE REVERSE JAM!!!"
                    Case 17
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " WITH THE WINDMILL JAM!!!"
                    Case 18
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " WITH THE WINDMILL SLAM!!!"
                    Case 19
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " WITH THE TOMAHAWK SLAM!!!"
                    Case 20
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " WITH THE 360 SLAM!!!"
                    Case 21
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " WITH THE SPINNING SLAM!!!"
                    Case 22
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " WITH THE LEFT HANDED DUNK!!!"
                    Case 23
                        pbpString$ = "DOUBLE CLUTCH JAM!!!"
                    Case 24
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " GETS THE FLUSH!!!"
                    Case 25
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " PUNCHES IT HOME!!!"
                    Case 26
                        pbpString$ = players$(P, B1(P, ballCarrier)) + "...DOUBLE PUMP SLAM!!!"
                    Case 27
                        pbpString$ = players$(P, B1(P, ballCarrier)) + "...IN YOUR FACE SLAM!!!"
                    Case 28
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " IS UP"
                        Call PBP
                        pbpString$ = "HE SPINS"
                        Call PBP
                        pbpString$ = "BEHIND THE BACK SLAM!!!"
                    Case 29
                        pbpString$ = "HE SLAMS IT HOME!!"
                    Case 30
                        pbpString$ = "HE LAYS IT UP AND IN!!"
                    Case 31
                        pbpString$ = "HE BANGS IT IN!!"
                    Case 32
                        pbpString$ = "HE RAMS IT IN!!"
                    Case 33
                        pbpString$ = "HE SLAMS IT IN!!!"
                    Case 34
                        pbpString$ = "DIPSY-DOO DUNK-A-ROO!!!"
                    Case 35
                        pbpString$ = "HE MAKES IT HAMMER TIME!!!"
                    Case 36
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " WITH THE 2-HANDED SLAM!!!"
                    Case 37
                        pbpString$ = players$(P, B1(P, ballCarrier)) + " IS UP"
                        Call PBP
                        pbpString$ = "HE SPINS"
                        Call PBP
                        pbpString$ = "BEHIND THE BACK SLAM!!!"
                    Case 38
                        pbpString$ = "HE JAMS IT HOME!!!"
                    Case 39
                        pbpString$ = "HE HAMMERS IT HOME!"

                End Select

            Case 8
                'MISS
                If PZ% = 8 Then

                    PZ% = 0
                    fastBreak = 0
                    pbpString$ = "HE "

                    Select Case RN0

                        Case 1 To 20
                            pbpString$ = pbpString$ + "MISSES THE EASY BASKET!"
                        Case 21 To 40
                            pbpString$ = pbpString$ + "JAMS IT TOO HARD!!"
                        Case 41 To 60
                            pbpString$ = pbpString$ + "SLAMS IT OFF THE IRON...NO GOOD!"
                        Case 61 To 80
                            pbpString$ = pbpString$ + "CAN'T GET IT DOWN!"
                        Case 81 To 100
                            pbpString$ = pbpString$ + "BLOWS THE EASY BASKET!!"

                    End Select

                Else

                    RN1 = Int(Rnd(1) * 50) + 1

                    Select Case RN1

                        Case 1
                            pbpString$ = "IT RATTLES IN AND OUT...NO GOOD"
                        Case 2
                            pbpString$ = "OFF THE IRON"
                        Case 3
                            pbpString$ = "IT SPINS IN AND OUT"
                        Case 4
                            pbpString$ = "IT'S OFF THE GLASS"
                        Case 5
                            pbpString$ = "IT'S NO GOOD"
                        Case 6
                            pbpString$ = "IT'S OFF THE MARK"
                        Case 7
                            pbpString$ = "IT'S A BRICK"
                        Case 8
                            pbpString$ = "OFF THE RIM"
                        Case 9
                            pbpString$ = "NOT EVEN CLOSE!"
                        Case 10
                            pbpString$ = "NO GOOD"
                        Case 11
                            pbpString$ = "HE MISSES"
                        Case 12
                            pbpString$ = "DOESN'T GET THE ROLL"
                        Case 13
                            pbpString$ = "OFF THE GLASS"
                        Case 14
                            pbpString$ = "FALLS SHORT"
                        Case 15
                            pbpString$ = "NO GOOD"
                        Case 16
                            pbpString$ = "NO"
                        Case 17
                            pbpString$ = "HE MISSES"
                        Case 18
                            pbpString$ = "IN AND OUT"
                        Case 19
                            pbpString$ = "OFF THE RIM"
                        Case 20
                            pbpString$ = "OFF THE IRON"
                        Case 21
                            pbpString$ = "IT'S NOT THERE"
                        Case 22
                            pbpString$ = "OFF TARGET"
                        Case 23
                            pbpString$ = "IT RATTLES OUT"
                        Case 24
                            pbpString$ = "IT DOESN'T FALL"
                        Case 25
                            pbpString$ = "IT BOUNCES OFF"
                        Case 26
                            pbpString$ = "IT ROLLS OFF"
                        Case 27
                            pbpString$ = "SHORT"
                        Case 28
                            pbpString$ = "IT DOESN'T GO DOWN"
                        Case 29
                            pbpString$ = "IT'S NO GOOD"
                        Case 30
                            pbpString$ = "NO GOOD"
                        Case 31
                            pbpString$ = "HE MISSES"
                        Case 32
                            pbpString$ = "IT'S A BRICK"
                        Case 33
                            pbpString$ = "HE FAILS TO CONNECT"
                        Case 34
                            pbpString$ = "OFF THE SIDE OF THE RIM"
                        Case 35
                            pbpString$ = "IT COMES UP SHORT"
                        Case 36
                            pbpString$ = "IT ROLLS OUT"
                        Case 37
                            pbpString$ = "AROUND AND OUT"
                        Case 38
                            pbpString$ = "OFF THE BACK OF THE IRON"
                        Case 39
                            pbpString$ = "ON THE FRONT RIM...ROLLS OFF"
                        Case 40
                            pbpString$ = "IN THE AIR...NO GOOD"
                        Case 41
                            pbpString$ = "TOO SHORT"
                        Case 42
                            pbpString$ = "NO GOOD"
                        Case 43
                            pbpString$ = "IT COMES UP SHORT"
                        Case 44
                            pbpString$ = "IT ROLLS OUT"
                        Case 45
                            pbpString$ = "IN AND OUT"
                        Case 46
                            pbpString$ = "OFF THE FRONT OF THE IRON"
                        Case 47
                            pbpString$ = "ON THE RIM...ROLLS OFF"
                        Case 48
                            pbpString$ = "OFF THE FRONT OF THE RIM"
                        Case 49
                            pbpString$ = "TOO SHORT"
                        Case 50
                            pbpString$ = "TOO STRONG"

                    End Select

                End If

            Case 9
                'NOPASS
                pbpString$ = players$(P, B1(P, ballCarrier)) + " "

                RN1 = Int(Rnd(1) * 56) + 1

                Select Case RN1

                    Case 1
                        pbpString$ = pbpString$ + "LOOKS INSIDE"
                    Case 2
                        pbpString$ = pbpString$ + "TRIES TO WORK FREE"
                    Case 3
                        pbpString$ = pbpString$ + "SETS UP THE PLAY"
                    Case 4
                        pbpString$ = pbpString$ + "LOOKS FOR AN OPENING"
                    Case 5
                        pbpString$ = pbpString$ + "DRIBBLES AROUND HIS MAN"
                    Case 6
                        pbpString$ = pbpString$ + "SIGNALS THE PLAY"
                    Case 7
                        pbpString$ = pbpString$ + "IS IN CONTROL"
                    Case 8
                        pbpString$ = pbpString$ + "IS IN POSSESSION"
                    Case 9
                        pbpString$ = pbpString$ + "TRIES TO GET OPEN"
                    Case 10
                        pbpString$ = pbpString$ + "YO-YO'S OUT TOP"
                    Case 11
                        pbpString$ = pbpString$ + "GOES TO WORK"
                    Case 12
                        pbpString$ = pbpString$ + "WORKS OFF THE PICK"
                    Case 13
                        pbpString$ = pbpString$ + "ON THE DRIBBLE"
                    Case 14
                        pbpString$ = pbpString$ + "CUTS TO THE LEFT"
                    Case 15
                        pbpString$ = pbpString$ + "CUTS TO THE RIGHT"
                    Case 16
                        pbpString$ = pbpString$ + "WHEELS AND DEALS"
                    Case 17
                        pbpString$ = pbpString$ + "SETS UP ON TOP"
                    Case 18
                        pbpString$ = pbpString$ + "SLIDES RIGHT"
                    Case 19
                        pbpString$ = pbpString$ + "SLIDES LEFT"
                    Case 20
                        pbpString$ = pbpString$ + "GOES TO WORK"
                    Case 21
                        pbpString$ = pbpString$ + "MOVES IT LEFT-SIDE"
                    Case 22
                        pbpString$ = pbpString$ + "MOVES IT RIGHT-SIDE"
                    Case 23
                        pbpString$ = pbpString$ + "REVERSES THE DRIBBLE"
                    Case 24
                        pbpString$ = pbpString$ + "TRIES TO GET OPEN"
                    Case 25
                        pbpString$ = pbpString$ + "DRIBBLES TO THE MIDDLE"
                    Case 26
                        pbpString$ = pbpString$ + "FAKES THE PASS"
                    Case 27
                        pbpString$ = pbpString$ + "SETS UP ON TOP"
                    Case 28
                        pbpString$ = pbpString$ + "SLIDES RIGHT"
                    Case 29
                        pbpString$ = pbpString$ + "SLIDES LEFT"
                    Case 30
                        pbpString$ = pbpString$ + "DRIBBLES IT BEHIND THE BACK"
                    Case 31
                        pbpString$ = pbpString$ + "FAKES LEFT...GOES RIGHT"
                    Case 32
                        pbpString$ = pbpString$ + "FAKES RIGHT...GOES LEFT"
                    Case 33
                        pbpString$ = pbpString$ + "SPINS HARD TO THE LEFT"
                    Case 34
                        pbpString$ = pbpString$ + "SPINS HARD TO THE RIGHT"
                    Case 35
                        pbpString$ = pbpString$ + "LEANS LEFT...GOES RIGHT"
                    Case 36
                        pbpString$ = pbpString$ + "LEANS RIGHT...GOES LEFT"
                    Case 37
                        pbpString$ = pbpString$ + "LEANS LEFT...CUTS RIGHT"
                    Case 38
                        pbpString$ = pbpString$ + "LEANS RIGHT...CUTS LEFT"
                    Case 39
                        pbpString$ = pbpString$ + "DOUBLE REVERSES HIS DRIBBLE"
                    Case 40
                        pbpString$ = pbpString$ + "BACKS IN"
                    Case 41
                        pbpString$ = pbpString$ + "LEANS FORWARD"
                    Case 42
                        pbpString$ = pbpString$ + "CROSSES OVER...SPINS"
                    Case 43
                        pbpString$ = pbpString$ + "CUTS LEFT"
                    Case 44
                        pbpString$ = pbpString$ + "CUTS RIGHT"
                    Case 45
                        pbpString$ = pbpString$ + "WITH THE HESITATION DRIBBLE"
                        Call PBP
                        pbpString$ = "HE SPINS LEFT"
                    Case 46
                        pbpString$ = pbpString$ + "WITH THE HESITATION DRIBBLE"
                        Call PBP
                        pbpString$ = "HE SPINS RIGHT"
                    Case 47
                        pbpString$ = pbpString$ + "WITH THE HESITATION DRIBBLE"
                        Call PBP
                        pbpString$ = "HE CUTS LEFT"
                    Case 48
                        pbpString$ = pbpString$ + "WITH THE HESITATION DRIBBLE"
                        Call PBP
                        pbpString$ = "HE CUTS RIGHT"
                    Case 49
                        pbpString$ = pbpString$ + "STUTTER STEPS"
                        Call PBP
                        pbpString$ = "HE MOVES LEFT"
                    Case 50
                        pbpString$ = pbpString$ + "MAINTAINS HIS DRIBBLE"
                    Case 51
                        pbpString$ = pbpString$ + "FAKE SPINS LEFT...GOES RIGHT"
                    Case 52
                        pbpString$ = pbpString$ + "FAKE SPINS RIGHT...GOES LEFT"
                    Case 53
                        pbpString$ = pbpString$ + "PALMS THE BALL"
                        Call PBP
                        pbpString$ = "HE TAKES IT AND SPINS"
                    Case 54
                        pbpString$ = pbpString$ + "SHAKES AND BAKES"
                    Case 55
                        pbpString$ = pbpString$ + "DRIBBLES WITH THE LEFT HAND"
                    Case 56
                        pbpString$ = pbpString$ + "DRIBBLES WITH THE RIGHT HAND"

                End Select

            Case 10
                'PASS prevBall$=PREV HANDLER
                V$ = players$(P, B1(P, ballCarrier))

                RN1 = Int(Rnd(1) * 60) + 1

                Select Case RN1

                    Case 1
                        pbpString$ = prevBall$ + " TO " + V$
                    Case 2
                        pbpString$ = prevBall$ + " KICKS IT OUT"
                        Call PBP
                        pbpString$ = V$ + " TAKES THE PASS"
                    Case 3
                        pbpString$ = prevBall$ + " FEEDS " + V$
                    Case 4
                        pbpString$ = prevBall$ + " PASSES TO " + V$
                    Case 4
                        pbpString$ = prevBall$ + " DISHES TO " + V$
                    Case 5
                        pbpString$ = prevBall$ + " GIVES IT TO " + V$
                    Case 6
                        pbpString$ = prevBall$ + " WITH A NICE GIVE TO " + V$
                    Case 7
                        pbpString$ = prevBall$ + " LOOKS"
                        Call PBP
                        pbpString$ = "HE GETS IT TO " + V$
                    Case 8
                        pbpString$ = prevBall$ + " SENDS IT TO " + V$
                    Case 9
                        pbpString$ = prevBall$ + " TO " + V$
                    Case 10
                        pbpString$ = prevBall$ + " GETS IT TO " + V$
                    Case 11
                        pbpString$ = prevBall$ + " OVER TO " + V$
                    Case 12
                        pbpString$ = prevBall$ + " ZIPS IT TO " + V$
                    Case 13
                        pbpString$ = prevBall$ + " FINDS " + V$
                    Case 14
                        pbpString$ = prevBall$ + " LOOKS FOR " + V$
                    Case 14
                        pbpString$ = prevBall$ + " THROWS IT TO " + V$
                    Case 15
                        pbpString$ = prevBall$ + " GOES TO " + V$
                    Case 16
                        pbpString$ = prevBall$ + " SETS UP " + V$
                    Case 17
                        pbpString$ = prevBall$ + " OUT TO " + V$
                    Case 18
                        pbpString$ = prevBall$ + " FLIPS IT TO " + V$
                    Case 19
                        pbpString$ = "BOUNCE PASS TO " + V$
                    Case 20
                        pbpString$ = prevBall$ + " LEAVES IT FOR " + V$
                    Case 21
                        pbpString$ = prevBall$ + " LOOPS IT TO " + V$
                    Case 22
                        pbpString$ = prevBall$ + " SHOVELS IT OVER TO " + V$
                    Case 23
                        pbpString$ = prevBall$ + " GIVES IT BACK TO " + V$
                    Case 24
                        pbpString$ = prevBall$ + " FEEDS IT TO " + V$
                    Case 25
                        pbpString$ = prevBall$ + " GIVES IT OFF TO " + V$
                    Case 26
                        pbpString$ = "PASSES TO " + V$
                    Case 27
                        pbpString$ = "DISHES TO " + V$
                    Case 28
                        pbpString$ = "GIVES TO " + V$
                    Case 29
                        pbpString$ = "OVER TO " + V$
                    Case 30
                        pbpString$ = "SENDS IT BACK TO " + V$
                    Case 31
                        pbpString$ = "NO-LOOK PASS TO " + V$
                    Case 32
                        pbpString$ = "NO-LOOK BOUNCE PASS TO " + V$
                    Case 33
                        pbpString$ = "BEHIND THE BACK TO " + V$
                    Case 34
                        pbpString$ = prevBall$ + " SWINGS IT TO " + V$
                    Case 35
                        pbpString$ = prevBall$ + " FIRES A PASS TO " + V$
                    Case 36
                        pbpString$ = prevBall$ + " SNAPS A PASS TO " + V$
                    Case 37
                        pbpString$ = prevBall$ + " SWINGS A PASS TO " + V$
                    Case 38
                        pbpString$ = "TWO-HANDED PASS TO " + V$
                    Case 39
                        pbpString$ = "WRAP AROUND PASS TO " + V$
                    Case 40
                        pbpString$ = "OVER THE SHOULDER PASS TO " + V$
                    Case 41
                        pbpString$ = "BACKHAND PASS TO " + V$
                    Case 42
                        pbpString$ = "BACKHAND DISH TO " + V$
                    Case 43
                        pbpString$ = "PASS CONNECTED TO " + V$
                    Case 44
                        pbpString$ = prevBall$ + " WIRES IT TO " + V$
                    Case 45
                        pbpString$ = prevBall$ + " WIRES A PASS TO " + V$
                    Case 46
                        pbpString$ = prevBall$ + " SNAPS A PASS TO " + V$
                    Case 47
                        pbpString$ = prevBall$ + " FAKES..PASSES TO " + V$
                    Case 48
                        pbpString$ = prevBall$ + " SHUFFLES IT TO " + V$
                    Case 49
                        pbpString$ = prevBall$ + " SLINGS IT TO " + V$
                    Case 50
                        pbpString$ = prevBall$ + " FLIPS IT TO " + V$
                    Case 51
                        pbpString$ = prevBall$ + " WHIPS IT OVER TO " + V$
                    Case 52
                        pbpString$ = prevBall$ + " SLINGS A BOUNCE PASS TO " + V$
                    Case 53
                        pbpString$ = prevBall$ + " SHOVELS IT TO " + V$
                    Case 54
                        pbpString$ = prevBall$ + " PUMP FAKES A SHOT"
                        Call PBP
                        pbpString$ = "HE SWINGS IT TO " + V$
                    Case 55
                        pbpString$ = prevBall$ + " PUMP FAKES A SHOT"
                        Call PBP
                        pbpString$ = "HE BOUNCES IT TO " + V$
                    Case 56
                        pbpString$ = prevBall$ + " WITH A FOOT FAKE"
                        Call PBP
                        pbpString$ = "HE SPINS AND DUMPS IT TO " + V$
                    Case 57
                        pbpString$ = prevBall$ + " CUTS ACROSS THE LANE"
                        Call PBP
                        pbpString$ = "HE DISHES INSIDE TO " + V$
                    Case 58
                        pbpString$ = prevBall$ + " DRIVES THE BASELINE"
                        Call PBP
                        pbpString$ = "DISHES UNDERNEATH TO " + V$
                    Case 59
                        pbpString$ = prevBall$ + " FAKES RIGHT...CUTS LEFT"
                        Call PBP
                        pbpString$ = "SHUFFLES IT TO " + V$
                    Case 60
                        pbpString$ = prevBall$ + " HEAD FAKES"
                        Call PBP
                        pbpString$ = "HE PUSHES IT TO " + V$

                End Select

            Case Else
                pbpString$ = players$(P, B1(P, ballCarrier))

        End Select

    End If

End Sub


'----------------------------------------
'           WINDEX Subroutine
'----------------------------------------
'This subroutine cleans the "window" used
'for the play-by-play text.
Sub WINDEX ()

    For I = 8 To 15
        Locate I, 1
        Call BLANKLINE
    Next I

    Locate 8, 1

End Sub


'----------------------------------------
'       BLANKLINE Subroutine
'----------------------------------------
'This subroutine literally prints blank
'spaces to clear a line of the PBP box.
Sub BLANKLINE ()

    Print Space$(38)

End Sub


'----------------------------------------
'         CLEARPBPBOX Subroutine
'----------------------------------------
'This subroutine is similar to windex,
'but only cleans the Play-by-Play area
'if there is a PBP delay. It also places
'the cursor further down when done.
Sub CLEARPBPBOX ()

    If pbpDelay! <> 0 Then

        For I = 8 To 15:
            Locate I, 1
            Call BLANKLINE
        Next I

    End If

    Locate 10

End Sub


'----------------------------------------
'          CLEARPBP Subroutine
'----------------------------------------
'This subroutine clears all the strings
'used for each line of PBP display
Sub CLEARPBP ()

    If pbpDelay! <> 0 And pbpOpt <> 1 Then
        nbrLines = 1
        A1$ = ""
        B1$ = ""
        C1$ = ""
        D1$ = ""
        E1$ = ""
        F1$ = ""
        G1$ = ""
        H1$ = ""
    End If

End Sub


'----------------------------------------
'           TICKER Subroutine
'----------------------------------------
'This subroutine displays the score of all
'current games being tracked by the ticker.
'For each game it will find the score that
'matches the current game time / period.
Sub TICKER ()

    Shared tickerPeriod$()

    If autoPlay <> 1 Or playerMode <> 2 Then

        Color 14, 0
        Cls

        Call d100(RN0)

        If halfTime = 1 Then

            If G9 = 0 Then
                If RN0 <= 50 Then
                    Locate , 23: Print "PRUDENTIAL AT THE HALF SCOREBOARD"
                Else
                    Locate , 28: Print "RED MAN HALFTIME REPORT"
                End If
            Else
                If RN0 <= 50 Then
                    Locate , 29: Print "TOYOTA HALFTIME REPORT"
                Else
                    Locate , 29: Print "HONDA HALFTIME REPORT"
                End If
            End If

        Else

            If endGame = 1 Then

                If G9 = 0 Then
                    Locate , 27: Print "CHEVROLET FINAL SCOREBOARD"
                Else
                    Select Case RN0
                        Case 1 To 33: Locate , 27: Print "USA TODAY FINAL SCOREBOARD"
                        Case 34 To 67: Locate , 24: Print "FEDERAL EXPRESS FINAL SCOREBOARD"
                        Case 67 To 100: Locate , 23: Print "ESPN SPORTSCENTER FINAL SCOREBOARD"
                    End Select
                End If
            Else
                If halfTime = 0 Then Locate , 30: Print "LANCE HAFFNER GAMES SCOREBOARD"
            End If

        End If

        Color 15

        If TMT = 0 Then
            Locate 10, 28: Print "NO OTHER GAMES SCHEDULED"
        Else
            If currHalf = 1 And gameClock! <= 1200 And gameClock! >= 960 Then timeInterval = 1
            If currHalf = 1 And gameClock! < 960 And gameClock! >= 720 Then timeInterval = 2
            If currHalf = 1 And gameClock! < 720 And gameClock! >= 480 Then timeInterval = 3
            If currHalf = 1 And gameClock! < 480 And gameClock! >= 240 Then timeInterval = 4
            If currHalf = 1 And gameClock! < 240 And gameClock! >= 120 Then timeInterval = 5
            If currHalf = 1 And gameClock! < 120 Then timeInterval = 6

            If halfTime = 1 Then timeInterval = 8

            If currHalf = 2 And gameClock! < 1200 And gameClock! >= 960 Then timeInterval = 9
            If currHalf = 2 And gameClock! < 960 And gameClock! >= 720 Then timeInterval = 10
            If currHalf = 2 And gameClock! < 720 And gameClock! >= 480 Then timeInterval = 11
            If currHalf = 2 And gameClock! < 480 And gameClock! >= 240 Then timeInterval = 12
            If currHalf = 2 And gameClock! < 240 And gameClock! >= 120 Then timeInterval = 13
            If currHalf = 2 And gameClock! < 120 Then timeInterval = 14

            '-- Could we not got higher than 16?
            '-- In fact why do we strip things down to 14 anyway?
            If currHalf = 3 And gameClock! <= 1200 And gameClock! >= 960 Then timeInterval = 14
            If currHalf = 3 And gameClock! < 960 And gameClock! >= 720 Then timeInterval = 14
            If currHalf = 3 And gameClock! < 720 And gameClock! >= 480 Then timeInterval = 15
            If currHalf = 3 And gameClock! < 480 And gameClock! >= 240 Then timeInterval = 16
            If currHalf = 3 And gameClock! < 240 Then timeInterval = 17


            If Left$(SX$(1, 0), 3) <> "XXX" Then

                Locate 2, 1
                X = 1
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(1, 0), 13);
                Locate , 15: Print Using "### "; SX%(1, 0, tickInterval);
                Print tickerPeriod$(tickInterval)

                Print Left$(SX$(1, 1), 13);
                Locate , 15: Print Using "### #"; SX%(1, 1, tickInterval)
            End If

            If Left$(SX$(2, 0), 3) <> "XXX" Then
                Locate 5, 1
                X = 2
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(2, 0), 13);
                Locate , 15: Print Using "### "; SX%(2, 0, tickInterval);

                Print tickerPeriod$(tickInterval)

                Print Left$(SX$(2, 1), 13);
                Locate , 15: Print Using "### #"; SX%(2, 1, tickInterval)
            End If

            If Left$(SX$(3, 0), 3) <> "XXX" Then
                Locate 8, 1
                X = 3
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(3, 0), 13);
                Locate , 15: Print Using "### "; SX%(3, 0, tickInterval);

                Print tickerPeriod$(tickInterval)

                Print Left$(SX$(3, 1), 13);
                Locate , 15: Print Using "### #"; SX%(3, 1, tickInterval)
            End If

            If Left$(SX$(4, 0), 3) <> "XXX" Then
                Locate 11, 1
                X = 4
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(4, 0), 13);
                Locate , 15: Print Using "### "; SX%(4, 0, tickInterval);

                Print tickerPeriod$(tickInterval)

                Print Left$(SX$(4, 1), 13);
                Locate , 15: Print Using "### #"; SX%(4, 1, tickInterval)
            End If

            If Left$(SX$(5, 0), 3) <> "XXX" Then
                Locate 14, 1
                X = 5
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(5, 0), 13);
                Locate , 15: Print Using "### "; SX%(5, 0, tickInterval);

                Print tickerPeriod$(tickInterval)

                Print Left$(SX$(5, 1), 13);
                Locate , 15: Print Using "### #"; SX%(5, 1, tickInterval)
            End If

            If Left$(SX$(6, 0), 3) <> "XXX" Then
                Locate 17, 1
                X = 6
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(6, 0), 13);
                Locate , 15: Print Using "### "; SX%(6, 0, tickInterval);
                Print tickerPeriod$(tickInterval)

                Print Left$(SX$(6, 1), 13);
                Locate , 15: Print Using "### #"; SX%(6, 1, tickInterval)
            End If

            If Left$(SX$(7, 0), 3) <> "XXX" Then
                Locate 20, 1
                X = 7
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(7, 0), 13);
                Locate , 15: Print Using "### "; SX%(7, 0, tickInterval);

                Print tickerPeriod$(tickInterval)

                Print Left$(SX$(7, 1), 13);
                Locate , 15: Print Using "### #"; SX%(7, 1, tickInterval)
            End If

            If Left$(SX$(8, 0), 3) <> "XXX" Then
                Locate 23, 1
                X = 8
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(8, 0), 13);
                Locate , 15: Print Using "### "; SX%(8, 0, tickInterval);

                Print tickerPeriod$(tickInterval)

                Print Left$(SX$(8, 1), 13);
                Locate , 15: Print Using "### #"; SX%(8, 1, tickInterval);
            End If

            If Left$(SX$(9, 0), 3) <> "XXX" Then
                Locate 2, 21
                X = 9
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(9, 0), 13);
                Locate , 35: Print Using "### "; SX%(9, 0, tickInterval);

                Print tickerPeriod$(tickInterval)
                Locate , 21

                Print Left$(SX$(9, 1), 13);
                Locate , 35: Print Using "### #"; SX%(9, 1, tickInterval)
            End If

            If Left$(SX$(10, 0), 3) <> "XXX" Then
                Locate 5, 21
                X = 10
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(10, 0), 13);
                Locate , 35: Print Using "### "; SX%(10, 0, tickInterval);

                Print tickerPeriod$(tickInterval)
                Locate , 21

                Print Left$(SX$(10, 1), 13);
                Locate , 35: Print Using "### #"; SX%(10, 1, tickInterval)
            End If

            If Left$(SX$(11, 0), 3) <> "XXX" Then
                Locate 8, 21
                X = 11
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(11, 0), 13);
                Locate , 35: Print Using "### "; SX%(11, 0, tickInterval);

                Print tickerPeriod$(tickInterval)
                Locate , 21

                Print Left$(SX$(11, 1), 13);
                Locate , 35: Print Using "### #"; SX%(11, 1, tickInterval)
            End If

            If Left$(SX$(12, 0), 3) <> "XXX" Then
                Locate 11, 21
                X = 12
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(12, 0), 13);
                Locate , 35: Print Using "### "; SX%(12, 0, tickInterval);

                Print tickerPeriod$(tickInterval)
                Locate , 21

                Print Left$(SX$(12, 1), 13);
                Locate , 35: Print Using "### #"; SX%(12, 1, tickInterval)
            End If

            If Left$(SX$(13, 0), 3) <> "XXX" Then
                Locate 14, 21
                X = 13
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(13, 0), 13);
                Locate , 35: Print Using "### "; SX%(13, 0, tickInterval);

                Print tickerPeriod$(tickInterval)
                Locate , 21

                Print Left$(SX$(13, 1), 13);
                Locate , 35: Print Using "### #"; SX%(13, 1, tickInterval)
            End If

            If Left$(SX$(14, 0), 3) <> "XXX" Then
                Locate 17, 21
                X = 14
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(14, 0), 13);
                Locate , 35: Print Using "### "; SX%(14, 0, tickInterval);

                Print tickerPeriod$(tickInterval)
                Locate , 21

                Print Left$(SX$(14, 1), 13);
                Locate , 35: Print Using "### #"; SX%(14, 1, tickInterval)
            End If

            If Left$(SX$(15, 0), 3) <> "XXX" Then
                Locate 20, 21
                X = 15
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(15, 0), 13);
                Locate , 35: Print Using "### "; SX%(15, 0, tickInterval);

                Print tickerPeriod$(tickInterval)
                Locate , 21

                Print Left$(SX$(15, 1), 13);
                Locate , 35: Print Using "### #"; SX%(15, 1, tickInterval)
            End If

            If Left$(SX$(16, 0), 3) <> "XXX" Then
                Locate 23, 21
                X = 16
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(16, 0), 13);
                Locate , 35: Print Using "### "; SX%(16, 0, tickInterval);

                Print tickerPeriod$(tickInterval)
                Locate , 21

                Print Left$(SX$(16, 1), 13);
                Locate , 35: Print Using "### #"; SX%(16, 1, tickInterval);
            End If

            If Left$(SX$(17, 0), 3) <> "XXX" Then
                Locate 2, 41
                X = 17
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(17, 0), 13);
                Locate , 55: Print Using "### "; SX%(17, 0, tickInterval);

                Print tickerPeriod$(tickInterval)
                Locate , 41

                Print Left$(SX$(17, 1), 13);
                Locate , 55: Print Using "### #"; SX%(17, 1, tickInterval)
            End If

            If Left$(SX$(18, 0), 3) <> "XXX" Then
                Locate 5, 41
                X = 18
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(18, 0), 13);
                Locate , 55: Print Using "### "; SX%(18, 0, tickInterval);

                Print tickerPeriod$(tickInterval)
                Locate , 41

                Print Left$(SX$(18, 1), 13);
                Locate , 55: Print Using "### #"; SX%(18, 1, tickInterval)
            End If

            If Left$(SX$(19, 0), 3) <> "XXX" Then
                Locate 8, 41
                X = 19
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(19, 0), 13);
                Locate , 55: Print Using "### "; SX%(19, 0, tickInterval);

                Print tickerPeriod$(tickInterval)
                Locate , 41

                Print Left$(SX$(19, 1), 13);
                Locate , 55: Print Using "### #"; SX%(19, 1, tickInterval)
            End If

            If Left$(SX$(20, 0), 3) <> "XXX" Then
                Locate 11, 41
                X = 20
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(20, 0), 13);
                Locate , 55: Print Using "### "; SX%(20, 0, tickInterval);

                Print tickerPeriod$(tickInterval)
                Locate , 41

                Print Left$(SX$(20, 1), 13);
                Locate , 55: Print Using "### #"; SX%(20, 1, tickInterval)
            End If

            If Left$(SX$(21, 0), 3) <> "XXX" Then
                Locate 14, 41
                X = 21
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(21, 0), 13);
                Locate , 55: Print Using "### "; SX%(21, 0, tickInterval);

                Print tickerPeriod$(tickInterval)
                Locate , 41

                Print Left$(SX$(21, 1), 13);
                Locate , 55: Print Using "### #"; SX%(21, 1, tickInterval)
            End If

            If Left$(SX$(22, 0), 3) <> "XXX" Then
                Locate 17, 41
                X = 22
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(22, 0), 13);
                Locate , 55: Print Using "### "; SX%(22, 0, tickInterval);

                Print tickerPeriod$(tickInterval)
                Locate , 41

                Print Left$(SX$(22, 1), 13);
                Locate , 55: Print Using "### #"; SX%(22, 1, tickInterval)
            End If

            If Left$(SX$(23, 0), 3) <> "XXX" Then
                Locate 20, 41
                X = 23
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(23, 0), 13);
                Locate , 55: Print Using "### "; SX%(23, 0, tickInterval);

                Print tickerPeriod$(tickInterval)
                Locate , 41

                Print Left$(SX$(23, 1), 13);
                Locate , 55: Print Using "### #"; SX%(23, 1, tickInterval)
            End If

            If Left$(SX$(24, 0), 3) <> "XXX" Then
                Locate 23, 41
                X = 24
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(24, 0), 13);
                Locate , 55: Print Using "### "; SX%(24, 0, tickInterval);

                Print tickerPeriod$(tickInterval)
                Locate , 41

                Print Left$(SX$(24, 1), 13);
                Locate , 55: Print Using "### #"; SX%(24, 1, tickInterval);
            End If

            If Left$(SX$(25, 0), 3) <> "XXX" Then
                Locate 2, 61
                X = 25
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(25, 0), 13);
                Locate , 75: Print Using "### "; SX%(25, 0, tickInterval);

                Print tickerPeriod$(tickInterval)
                Locate , 61

                Print Left$(SX$(25, 1), 13);
                Locate , 75: Print Using "### #"; SX%(25, 1, tickInterval)
            End If

            If Left$(SX$(26, 0), 3) <> "XXX" Then
                Locate 5, 61
                X = 26
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(26, 0), 13);
                Locate , 75: Print Using "### "; SX%(26, 0, tickInterval);

                Print tickerPeriod$(tickInterval)
                Locate , 61

                Print Left$(SX$(26, 1), 13);
                Locate , 75: Print Using "### #"; SX%(26, 1, tickInterval)
            End If

            If Left$(SX$(27, 0), 3) <> "XXX" Then
                Locate 8, 61
                X = 27
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(27, 0), 13);
                Locate , 75: Print Using "### "; SX%(27, 0, tickInterval);

                Print tickerPeriod$(tickInterval)
                Locate , 61

                Print Left$(SX$(27, 1), 13);
                Locate , 75: Print Using "### #"; SX%(27, 1, tickInterval)
            End If

            If Left$(SX$(28, 0), 3) <> "XXX" Then
                Locate 11, 61
                X = 28
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(28, 0), 13);
                Locate , 75: Print Using "### "; SX%(28, 0, tickInterval);

                Print tickerPeriod$(tickInterval)
                Locate , 61

                Print Left$(SX$(28, 1), 13);
                Locate , 75: Print Using "### #"; SX%(28, 1, tickInterval)
            End If

            If Left$(SX$(29, 0), 3) <> "XXX" Then
                Locate 14, 61
                X = 29
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(29, 0), 13);
                Locate , 75: Print Using "### "; SX%(29, 0, tickInterval);

                Print tickerPeriod$(tickInterval)
                Locate , 61

                Print Left$(SX$(29, 1), 13);
                Locate , 75: Print Using "### #"; SX%(29, 1, tickInterval)
            End If

            If Left$(SX$(30, 0), 3) <> "XXX" Then
                Locate 17, 61
                X = 30
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(30, 0), 13);
                Locate , 75: Print Using "### "; SX%(30, 0, tickInterval);

                Print tickerPeriod$(tickInterval)
                Locate , 61

                Print Left$(SX$(30, 1), 13);
                Locate , 75: Print Using "### #"; SX%(30, 1, tickInterval)
            End If

            If Left$(SX$(31, 0), 3) <> "XXX" Then
                Locate 20, 61
                X = 31
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(31, 0), 13);
                Locate , 75: Print Using "### "; SX%(31, 0, tickInterval);

                Print tickerPeriod$(tickInterval)
                Locate , 61

                Print Left$(SX$(31, 1), 13);
                Locate , 75: Print Using "### #"; SX%(31, 1, tickInterval)
            End If

            If Left$(SX$(32, 0), 3) <> "XXX" Then
                Locate 23, 61
                X = 32
                tickInterval = TickerTime%(timeInterval, X)

                Print Left$(SX$(32, 0), 13);
                Locate , 75: Print Using "### "; SX%(32, 0, tickInterval);

                Print tickerPeriod$(tickInterval)
                Locate , 61

                Print Left$(SX$(32, 1), 13);
                Locate , 75: Print Using "### #"; SX%(32, 1, tickInterval);
            End If

        End If

        I$ = GetKeyPress$

    End If

End Sub


'----------------------------------------
'          TickerTime Function
'----------------------------------------
'This subroutine determines which of the
'pre-determined time intervals the ticker
'display should be using.
Function TickerTime% (timeInterval, X)

    Shared tickerStart

    tickerIdx = timeInterval + (tickerStart - ST%(X)) * 3

    If tickerIdx < 0 Then tickerIdx = 0
    If tickerIdx > 14 Then tickerIdx = 14
    If endGame = 1 Then tickerIdx = 14

    TickerTime% = tickerIdx

End Function


'----------------------------------------
'        TICKERUPDATE Subroutine
'----------------------------------------
'This subroutine calculates the updated
'scores for the ticker games.
Sub TICKERUPDATE ()

    If autoPlay = 1 And schedGame(2) <= 31 Then

        If currHalf = 1 Then

            Select Case gameClock!

                Case 721 To 960
                    If SX%(schedGame(2) + 1, 0, 1) = -1 Then SX%(schedGame(2) + 1, 0, 1) = score(0, 0): SX%(schedGame(2) + 1, 1, 1) = score(1, 0)

                Case 481 To 720
                    If SX%(schedGame(2) + 1, 0, 2) = -1 Then SX%(schedGame(2) + 1, 0, 2) = score(0, 0): SX%(schedGame(2) + 1, 1, 2) = score(1, 0)

                Case 241 To 480
                    If SX%(schedGame(2) + 1, 0, 3) = -1 Then SX%(schedGame(2) + 1, 0, 3) = score(0, 1): SX%(schedGame(2) + 1, 1, 3) = score(1, 1)

                Case 121 To 240
                    If SX%(schedGame(2) + 1, 0, 4) = -1 Then SX%(schedGame(2) + 1, 0, 4) = score(0, 0): SX%(schedGame(2) + 1, 1, 4) = score(1, 0)

                Case 0 To 120
                    If SX%(schedGame(2) + 1, 0, 5) = -1 Then SX%(schedGame(2) + 1, 0, 5) = score(0, 0): SX%(schedGame(2) + 1, 1, 5) = score(1, 0)

            End Select

        Else

            If currHalf > 1 And SX%(schedGame(2) + 1, 0, 6) = -1 Then

                For I2 = 6 To 8:
                    SX%(schedGame(2) + 1, 0, I2) = score(0, 2) + score(0, 1)
                    SX%(schedGame(2) + 1, 1, I2) = score(1, 2) + score(1, 1)
                Next

            Else

                If currHalf = 2 Then

                    Select Case gameClock!

                        Case 721 To 960
                            If SX%(schedGame(2) + 1, 0, 9) = -1 Then SX%(schedGame(2) + 1, 0, 9) = score(0, 0): SX%(schedGame(2) + 1, 1, 9) = score(1, 0)

                        Case 481 To 720
                            If SX%(schedGame(2) + 1, 0, 10) = -1 Then SX%(schedGame(2) + 1, 0, 10) = score(0, 0): SX%(schedGame(2) + 1, 1, 10) = score(1, 0)

                        Case 241 To 480
                            If SX%(schedGame(2) + 1, 0, 11) = -1 Then SX%(schedGame(2) + 1, 0, 11) = score(0, 3) + score(0, 2) + score(0, 1): SX%(schedGame(2) + 1, 1, 11) = score(1, 3) + score(1, 2) + score(1, 1)

                        Case 121 To 240
                            If SX%(schedGame(2) + 1, 0, 12) = -1 Then SX%(schedGame(2) + 1, 0, 12) = score(0, 0): SX%(schedGame(2) + 1, 1, 12) = score(1, 0)

                        Case 0 To 120
                            If SX%(schedGame(2) + 1, 0, 13) = -1 Then SX%(schedGame(2) + 1, 0, 13) = score(0, 0): SX%(schedGame(2) + 1, 1, 13) = score(1, 0)

                    End Select

                Else

                    'Overtime
                    SX%(schedGame(2) + 1, 0, 14) = score(0, 0)
                    SX%(schedGame(2) + 1, 1, 14) = score(1, 0)

                End If

            End If

        End If

    End If

End Sub


'----------------------------------------
'       TickerSchedule Subroutine
'----------------------------------------
'This subroutine reads in the scores from
'the ticker and uses them to update the
'corresponding schedule file.
Sub TickerSchedule

    Shared scheduleFile$

    If schedGame(2) <= 31 Then

        For X = 0 To 1
            SX$(schedGame(2) + 1, X) = gameTeams$(X)
        Next

        Open "TICKER" For Output As #1

        For I = 1 To 32
            For I1 = 0 To 1
                For I2 = 1 To 14
                    Print #1, SX%(I, I1, I2)
                Next
            Next
        Next

        For I = 1 To 32
            For I1 = 0 To 1
                Print #1, SX$(I, I1)
            Next
        Next

        For I = 1 To 32
            Print #1, ST%(I)
        Next

        Close #1

    End If

    Open diskPaths$(0) + scheduleFile$ For Random As #1 Len = 48

    For X = 0 To 18
        Field #1, X * 2 As X$, 2 As Q$(X + 1), 48 - 2 - 2 * X As X$
    Next

    Field #1, 38 As X$, 2 As Q$(22), 2 As Q$(23), 3 As Q$(20), 3 As Q$(21)

    NG%(13) = 1

    For X = 0 To 18:
        LSet Q$(X + 1) = MKI$(NG%(X))
    Next

    For X = 0 To 1
        LSet Q$(20 + X) = diskIDs$(X)
    Next

    LSet Q$(22) = MKI$(score(0, 0))
    LSet Q$(23) = MKI$(score(1, 0))

    Put #1, schedGame(0) + schedGame(2)

    Close #1

    schedGame(2) = schedGame(2) + 1
    autoPlay = 1

End Sub


'----------------------------------------
'          HalfCourt Subroutine
'----------------------------------------
'This subroutine gives the user options
'for handling a strategy at half court
'when time is low on the clock.
'I2% = user choice for shot
Sub HalfCourt (shotType)

    Call FRAMEOPTION(8, P)
    Locate 10, 15

    Print gameTeams$(P); " HALF COURT OPTION"

    Locate 12, 14
    Locate , 14: Print Using "TIME REMAINING #.#"; T!
    Locate , 14: Print "0 - SHOOT A 2"
    Locate , 14: Print "1 - SHOOT A 3"

    Do
        I$ = GetKeyPress$
        shotType = Val(I$)
    Loop Until shotType >= 0 And shotType <= 1

    If shotType = 1 And threePtOpt = 0 Then shotType = 0

    Color 15, 0

    Call SCOREBOARD

End Sub


'----------------------------------------
'           WHOLAY Subroutine
'----------------------------------------
'This subroutine assignes a player ID to
'the person performing a layup
Sub WHOLAY ()

    Call d100(RN0)

    Select Case RN0

        Case 1 To 38: ballCarrier = 0
        Case 39 To 75: ballCarrier = 1
        Case 76 To 83: ballCarrier = 2
        Case 84 To 91: ballCarrier = 3
        Case 92 To 100: ballCarrier = 4

    End Select

End Sub


'----------------------------------------
'         FoulCalled Subroutine
'----------------------------------------
'This subroutione handles calculations and
'Play-by-Play fo when a player is fouled

'randomCalcs%
'   0 = skip random # generation
'   1 = perform random # generation

Sub FoulCalled (randomCalcs%)

    If randomCalcs% = 1 Then

        fouler = 0
        M9 = Int(Rnd(1) * teamAdj(D, 0)) + 1

        For M8 = 0 To 4:

            fouler = fouler + plyrOff_GAME!(D, B1(D, M8), 17)

            If M9 <= fouler Then Exit For

        Next M8

        If M8 < 0 Or M8 > 4 Then M8 = Int(Rnd(1) * 5)

        fouler = M8

    End If

    plyrOff_GAME!(D, B1(D, fouler), 12) = plyrOff_GAME!(D, B1(D, fouler), 12) + 1
    P2(D) = P2(D) + 1
    Call UPDATESCREEN

    If plyrOff_GAME!(D, B1(D, fouler), 3) - plyrOff_GAME!(D, B1(D, fouler), 7) - plyrOff_GAME!(D, B1(D, fouler), 11) - plyrOff_GAME!(D, B1(D, fouler), 12) = 0 Then
        plyrOff_GAME!(D, B1(D, fouler), 3) = plyrOff_GAME!(D, B1(D, fouler), 3) + 1
    End If

    If plyrOff_GAME!(D, B1(D, fouler), 12) < foulsToDQ Then

        If pbpOpt = 1 And pbpDelay! <> 0 Then
            Call WINDEX
            Print "FOUL ON "; players$(D, B1(D, fouler))
            Call DELAY
            Print "HE HAS "; plyrOff_GAME!(D, B1(D, fouler), 12)
            Call DELAY
        End If

        If pbpOpt = 0 Then pbpString$ = "FOUL NUMBER" + Str$(plyrOff_GAME!(D, B1(D, fouler), 12)) + " CALLED ON " + players$(D, B1(D, fouler)): Call PBP

        Call DELAY

    Else

        M9 = 0

        For I3 = 0 To 13
            If Not (I3 = B1(D, fouler) Or players$(D, I3) = "XXX" Or rosterStatus(D, I3) <> 0) Then
                M9 = M9 + 1
            End If
        Next

        For I3 = 0 To 13
            If Not (I3 = B1(D, fouler) Or players$(D, I3) = "XXX" Or rosterStatus(D, I3) <> 0) Then
                If plyrOff_GAME!(D, I3, 0) <= plyrOff_GAME!(D, B1(D, fouler), 0) Then plyrOff_GAME!(D, I3, 3) = plyrOff_GAME!(D, I3, 3) + Int((plyrOff_GAME!(D, B1(D, fouler), 3) / M9) + .5)
            End If
        Next I3

        'Player fouled
        635 '
        If pbpOpt = 1 And pbpDelay! <> 0 Then
            Call WINDEX
            Print "FOUL ON "; players$(D, B1(D, fouler))
            Call DELAY
        End If

        If pbpOpt = 0 Then pbpString$ = "FOUL CALLED ON " + players$(D, B1(D, fouler)): Call PBP

        If IN% = 1 Then
            pbpString$ = "FOUL IS RULED INTENTIONAL!"
            If pbpOpt = 0 Then Call PBP
            If pbpOpt = 1 And pbpDelay! <> 0 Then Print pbpString$: Call DELAY
            Call DELAY
        End If

        pbpString$ = "AND HE HAS JUST FOULED OUT !!!"
        If pbpOpt = 0 Then Call PBP
        If pbpOpt = 1 And pbpDelay! <> 0 Then Print pbpString$: Call DELAY

        Call DELAY

        If P2(D) > 6 Then X = 50

        If playerMode = 0 Or playerMode = 1 And D <> compTeam Then
            teamIdx = D
            C1 = 1
            Call LINEUPS
            Call FOULSAFE
            Call DEADBALLOPTIONS
            For I = 0 To 1
                If P7(I) = 0 Then
                    PR%(I, 0) = 1
                    PR%(I, 1) = 7
                    pctContrib(I) = 0
                End If
            Next
            Call SCOREBOARD
        End If

        Call CheckGameClock
        X = 0

    End If

End Sub


'----------------------------------------
'         GoodBasket Subroutine
'----------------------------------------
'This subroutine appears to be crediting
'assists, per it's similarity to the code
'from Pro BB to do the same
Sub GoodBasket ()

    RN0 = Int(Rnd(1) * 3) + 1

    I2 = Int(Rnd(1) * 5)

    If (RN0 <= plyrOff_GAME!(P, B1(P, I2), 4) And players$(P, B1(P, ballCarrier)) <> players$(P, B1(P, I2))) Or (plyrOff_GAME!(P, B1(P, I2), 4) > 3 And RN0 < plyrOff_GAME!(P, B1(P, I2), 4) - 3 And players$(P, B1(P, ballCarrier)) <> players$(P, B1(P, I2))) Then

        Do

            totalAssisst = 0

            For M8 = 0 To 4
                totalAssisst = totalAssisst + plyrOff_GAME!(P, B1(P, M8), 4)
            Next

            RN0 = Int(Rnd(1) * totalAssisst) + 1
            totalAssisst = 0

            For M8 = 0 To 4
                totalAssisst = totalAssisst + plyrOff_GAME!(P, B1(P, M8), 4)
                If RN0 <= totalAssisst Then Exit For
            Next

            I2 = M8

        Loop Until players$(P, B1(P, ballCarrier)) <> players$(P, B1(P, I2))

        plyrOff_GAME!(P, B1(P, I2), 14) = plyrOff_GAME!(P, B1(P, I2), 14) + 1

    End If

End Sub


'----------------------------------------
'            HORN Subroutine
'----------------------------------------
'This subroutine plays a sound on the PC
'speaker that is close to the buzzer / horn
'commonly associated with basketball.

'A replacement for the near future would be
'to load and play a sound file
Sub HORN ()

    For PP = 1 To 70
        Sound 50, .05
        Sound 100, .05
        Sound 317, .3
    Next PP

End Sub


'----------------------------------------
'         SHOTSTRING Subroutine
'----------------------------------------
'This subroutine simply builds a string
'which represents the % chance of making
'the current shot (rounding up)
Sub SHOTSTRING ()

    pbpString$ = pbpString$ + Str$(Int(F! + .5)) + "*"

End Sub


'----------------------------------------
'         REBOUNDSORT Subroutine
'----------------------------------------
'This subroutine clearly does something
'related to sorting players by rebound?
Sub REBOUNDSORT ()

    M = 4
    L = 3

    8827 '
    S6 = 0
    S7 = 0

    8828 '
    H1 = 0
    H2 = 0

    If G5(S6) > G5(S6 + 1) Then
        H1 = G5(S6)
        H2 = G4(S6)
        G5(S6) = G5(S6 + 1)
        G4(S6) = G4(S6 + 1)
        G5(S6 + 1) = H1
        G4(S6 + 1) = H2
        S7 = S6
    End If

    S6 = S6 + 1

    If S6 <= L Then
        GoTo 8828
    End If

    If S7 <> 0 Then
        L = S7 - 1
        GoTo 8827
    End If

End Sub


'----------------------------------------
'          COMCOACH Subroutine
'----------------------------------------
'This subroutine essentially handles the
'AI for the computer coach. It relies on
'other routines to help deal with some of
'the complexities.
Sub COMCOACH ()

    'COMPUTER COACH FOR SUBSTITUTIONS AND AI

    For I = 0 To 13
        F1(I) = I
        plyrStamina(I) = plyrOff_GAME!(P9, I, 3) - plyrOff_GAME!(P9, I, 7) - plyrOff_GAME!(P9, I, 11) - plyrOff_GAME!(P9, I, 12)
        If currHalf > 2 Then plyrStamina(I) = plyrOff_GAME!(P9, I, 3)
        If currHalf = 2 And gameClock! <= 120 Then plyrStamina(I) = plyrOff_GAME!(P9, I, 3)
        If plyrOff_GAME!(P9, I, 12) >= foulsToDQ Then plyrStamina(I) = 0
    Next I

    Call STAMINASORT

    skipLoop% = 0

    I = 14

    For I1 = 0 To 4

        8794 '
        I = I - 1

        If I < 0 Then

            I = 14

            For I1 = 0 To 4

                8705 '
                I = I - 1

                If I < 0 Then

                    I = 14

                    For I1 = 0 To 4

                        Do
                            I = I - 1
                        Loop Until Not (rosterStatus(P9, F1(I)) <> 0 Or players$(P9, F1(I)) = "XXX")

                        'These can throw errors in some situations
                        'That may be why certain games slow down??
                        G4(I1) = F1(I)
                        G5(I1) = plyrOff_GAME!(P9, F1(I), 2)

                    Next I1

                    skipLoop% = 1

                Else

                    If Not (rosterStatus(P9, F1(I)) <> 0 Or players$(P9, F1(I)) = "XXX" Or plyrOff_GAME!(P9, F1(I), 12) >= foulsToDQ Or plyrOff_GAME!(P9, F1(I), 12) >= foulsToDQ - 1 And (currHalf = 1 Or currHalf = 2 And gameClock! > 720)) Then
                        G4(I1) = F1(I)
                        G5(I1) = plyrOff_GAME!(P9, F1(I), 2)
                    Else
                        GoTo 8705
                    End If

                End If

                If skipLoop% = 1 Then Exit For

            Next I1

            If skipLoop% = 1 Then Exit For

        Else

            If rosterStatus(P9, F1(I)) <> 0 Or players$(P9, F1(I)) = "XXX" Or plyrOff_GAME!(P9, F1(I), 12) >= foulsToDQ Or plyrOff_GAME!(P9, F1(I), 12) >= foulsToDQ - 2 And currHalf = 1 Or plyrOff_GAME!(P9, F1(I), 12) >= foulsToDQ - 1 And currHalf = 2 And gameClock! > 720 Then 8794

            If currHalf = 1 And plyrStamina(I) / plyrOff_GAME!(P9, F1(I), 3) < .5 Then 8794
            If currHalf = 1 And gameClock! >= 600 And plyrStamina(I) / plyrOff_GAME!(P9, F1(I), 3) < .75 Then 8794
            If currHalf = 2 And gameClock! >= 600 And plyrStamina(I) / plyrOff_GAME!(P9, F1(I), 3) < .25 Then 8794
            If currHalf = 2 And gameClock! >= 300 And gameClock! < 600 And plyrStamina(I) / plyrOff_GAME!(P9, F1(I), 3) < .13 Then 8794
            If currHalf = 2 And gameClock! < 300 And plyrStamina(I) / plyrOff_GAME!(P9, F1(I), 3) < gameClock! / 2400 Then 8794
            If plyrStamina(I) <= 0 And currHalf < 2 Or plyrStamina(I) <= 0 And currHalf = 2 And gameClock! > 120 Then 8794

            G4(I1) = F1(I)
            G5(I1) = plyrOff_GAME!(P9, F1(I), 2)

        End If

    Next I1

    Call REBOUNDSORT

    For I = 0 To 4
        B1(P9, I) = G4(I)
    Next I

    Call COMPUTERCOACH

End Sub


'----------------------------------------
'        TOURNEY_Game Subroutine
'----------------------------------------
'This subroutine checks the file for the
'tournament and, as needed, calls a routine
'to update it with the game scores
Sub TOURNEY_Game ()

    Dim fileLength&
    Dim loseTeam$, winTeam$

    Shared tourneyFile$

    Shared teamYrTourn$()

    'CHECK FOR FILLING IN TOURNEY SCHEDULE
    Open diskPaths$(1) + tourneyFile$ As #1 Len = 90
    fileLength& = LOF(1)
    Close #1

    numGames = fileLength& / 90

    For I = 1 To numGames

        Open diskPaths$(1) + tourneyFile$ As #1 Len = 90

        For X = 0 To 14
            Field #1, X * 2 As X$, 2 As Q$(X + 1), 90 - 2 - 2 * X As X$
        Next

        Field #1, 30 As X$, 2 As Q$(16), 2 As Q$(17), 15 As Q$(18), 15 As Q$(19), 26 As X$
        Field #1, 64 As X$, 3 As Q$(20), 3 As Q$(21), 6 As Q$(22), 8 As Q$(23), 6 As X$
        Field #1, 84 As X$, 2 As Q$(24), 2 As Q$(25), 2 As Q$(26)
        Get #1, I

        VS1% = CVI(Q$(16))
        HS1% = CVI(Q$(17))

        loseTeam$ = Q$(18)
        winTeam$ = Q$(19)

        For X = 0 To 14:
            NG1%(X) = CVI(Q$(X + 1))
        Next

        For X = 0 To 3:
            teamYrTourn$(X) = Q$(20 + X)
        Next

        For X = 1 To 3:
            NG1%(X + 14) = CVI(Q$(X + 23))
        Next

        Close #1

        If NG1%(15) = NG%(15) And NG%(15) <> 17 Then

            If score(0, 0) > score(1, 0) And NG1%(0) - 900 = NG%(17) Then
                NG1%(0) = NG%(0)
                teamYrTourn$(0) = diskIDs$(0)
                loseTeam$ = schedVisTm$
                Call UpdateTourneyFile(I, loseTeam$, winTeam$)
            End If

            If score(1, 0) > score(0, 0) And NG1%(0) - 900 = NG%(17) Then
                NG1%(0) = NG%(1)
                teamYrTourn$(0) = diskIDs$(1)
                loseTeam$ = schedHomeTm$
                Call UpdateTourneyFile(I, loseTeam$, winTeam$)
            End If

            If score(0, 0) > score(1, 0) And NG1%(1) - 900 = NG%(17) Then
                NG1%(1) = NG%(0)
                teamYrTourn$(1) = diskIDs$(0)
                winTeam$ = schedVisTm$
                Call UpdateTourneyFile(I, loseTeam$, winTeam$)
            End If

            If score(1, 0) > score(0, 0) And NG1%(1) - 900 = NG%(17) Then
                NG1%(1) = NG%(1)
                teamYrTourn$(1) = diskIDs$(1)
                winTeam$ = schedHomeTm$
                Call UpdateTourneyFile(I, loseTeam$, winTeam$)
            End If

            If score(0, 0) < score(1, 0) And NG1%(0) - 800 = NG%(17) Then
                NG1%(0) = NG%(0)
                teamYrTourn$(0) = diskIDs$(0)
                loseTeam$ = schedVisTm$
                Call UpdateTourneyFile(I, loseTeam$, winTeam$)
            End If

            If score(1, 0) < score(0, 0) And NG1%(0) - 800 = NG%(17) Then
                NG1%(0) = NG%(1)
                teamYrTourn$(0) = diskIDs$(1)
                loseTeam$ = schedHomeTm$
                Call UpdateTourneyFile(I, loseTeam$, winTeam$)
            End If

            If score(0, 0) < score(1, 0) And NG1%(1) - 800 = NG%(17) Then
                NG1%(1) = NG%(0)
                teamYrTourn$(1) = diskIDs$(0)
                winTeam$ = schedVisTm$
                Call UpdateTourneyFile(I, loseTeam$, winTeam$)
            End If

            If score(1, 0) < score(0, 0) And NG1%(1) - 800 = NG%(17) Then
                NG1%(1) = NG%(1)
                teamYrTourn$(1) = diskIDs$(1)
                winTeam$ = schedHomeTm$
                Call UpdateTourneyFile(I, loseTeam$, winTeam$)
            End If

        End If

        If NG%(15) <> 17 Then

            If score(0, 0) > score(1, 0) And NG%(16) = 89 And NG1%(15) = 17 And NG1%(0) - 900 = NG%(15) Then
                NG1%(0) = NG%(0)
                teamYrTourn$(0) = diskIDs$(0)
                loseTeam$ = schedVisTm$
                Call UpdateTourneyFile(I, loseTeam$, winTeam$)
            End If

            If score(1, 0) > score(0, 0) And NG%(16) = 89 And NG1%(15) = 17 And NG1%(0) - 900 = NG%(15) Then
                NG1%(0) = NG%(1)
                teamYrTourn$(0) = diskIDs$(1)
                loseTeam$ = schedHomeTm$
                Call UpdateTourneyFile(I, loseTeam$, winTeam$)
            End If

            If score(0, 0) > score(1, 0) And NG%(16) = 89 And NG1%(15) = 17 And NG1%(1) - 900 = NG%(15) Then
                NG1%(1) = NG%(0)
                teamYrTourn$(1) = diskIDs$(0)
                winTeam$ = schedVisTm$
                Call UpdateTourneyFile(I, loseTeam$, winTeam$)
            End If

            If score(1, 0) > score(0, 0) And NG%(16) = 89 And NG1%(15) = 17 And NG1%(1) - 900 = NG%(15) Then
                NG1%(1) = NG%(1)
                teamYrTourn$(1) = diskIDs$(1)
                winTeam$ = schedHomeTm$
                Call UpdateTourneyFile(I, loseTeam$, winTeam$)
            End If

        End If

        If score(0, 0) > score(1, 0) And NG%(15) = 17 And NG1%(0) - 1100 = NG%(17) Then
            NG1%(0) = NG%(0)
            teamYrTourn$(0) = diskIDs$(0)
            loseTeam$ = schedVisTm$
            Call UpdateTourneyFile(I, loseTeam$, winTeam$)
        End If

        If score(1, 0) > score(0, 0) And NG%(15) = 17 And NG1%(0) - 1100 = NG%(17) Then
            NG1%(0) = NG%(1)
            teamYrTourn$(0) = diskIDs$(1)
            loseTeam$ = schedHomeTm$
            Call UpdateTourneyFile(I, loseTeam$, winTeam$)
        End If

        If score(0, 0) > score(1, 0) And NG%(15) = 17 And NG1%(1) - 1100 = NG%(17) Then
            NG1%(1) = NG%(0)
            teamYrTourn$(1) = diskIDs$(0)
            winTeam$ = schedVisTm$
            Call UpdateTourneyFile(I, loseTeam$, winTeam$)
        End If

        If score(1, 0) > score(0, 0) And NG%(15) = 17 And NG1%(1) - 1100 = NG%(17) Then
            NG1%(1) = NG%(1)
            teamYrTourn$(1) = diskIDs$(1)
            winTeam$ = schedHomeTm$
            Call UpdateTourneyFile(I, loseTeam$, winTeam$)
        End If


        If score(0, 0) < score(1, 0) And NG%(15) = 17 And NG1%(0) - 1000 = NG%(17) Then
            NG1%(0) = NG%(0)
            teamYrTourn$(0) = diskIDs$(0)
            loseTeam$ = schedVisTm$
            Call UpdateTourneyFile(I, loseTeam$, winTeam$)
        End If

        If score(1, 0) < score(0, 0) And NG%(15) = 17 And NG1%(0) - 1000 = NG%(17) Then
            NG1%(0) = NG%(1)
            teamYrTourn$(0) = diskIDs$(1)
            loseTeam$ = schedHomeTm$
            Call UpdateTourneyFile(I, loseTeam$, winTeam$)
        End If

        If score(0, 0) < score(1, 0) And NG%(15) = 17 And NG1%(1) - 1000 = NG%(17) Then
            NG1%(1) = NG%(0)
            teamYrTourn$(1) = diskIDs$(0)
            winTeam$ = schedVisTm$
            Call UpdateTourneyFile(I, loseTeam$, winTeam$)
        End If

        If score(1, 0) < score(0, 0) And NG%(15) = 17 And NG1%(1) - 1000 = NG%(17) Then
            NG1%(1) = NG%(1)
            teamYrTourn$(1) = diskIDs$(1)
            winTeam$ = schedHomeTm$
            Call UpdateTourneyFile(I, loseTeam$, winTeam$)
        End If

        If score(0, 0) < score(1, 0) And NG%(15) = 17 And NG1%(0) - 900 = NG%(17) Then
            NG1%(0) = NG%(0)
            teamYrTourn$(0) = diskIDs$(0)
            loseTeam$ = schedVisTm$
            Call UpdateTourneyFile(I, loseTeam$, winTeam$)
        End If

        If score(1, 0) < score(0, 0) And NG%(15) = 17 And NG1%(0) - 900 = NG%(17) Then
            NG1%(0) = NG%(1)
            teamYrTourn$(0) = diskIDs$(1)
            loseTeam$ = schedHomeTm$
            Call UpdateTourneyFile(I, loseTeam$, winTeam$)
        End If

        If score(0, 0) < score(1, 0) And NG%(15) = 17 And NG1%(1) - 900 = NG%(17) Then
            NG1%(1) = NG%(0)
            teamYrTourn$(1) = diskIDs$(0)
            winTeam$ = schedVisTm$
            Call UpdateTourneyFile(I, loseTeam$, winTeam$)
        End If

        If score(1, 0) < score(0, 0) And NG%(15) = 17 And NG1%(1) - 900 = NG%(17) Then
            NG1%(1) = NG%(1)
            teamYrTourn$(1) = diskIDs$(1)
            winTeam$ = schedHomeTm$
            Call UpdateTourneyFile(I, loseTeam$, winTeam$)
        End If

    Next

End Sub


'----------------------------------------
'      UpdateTourneyFile Subroutine
'----------------------------------------
'This subroutine actually changes any data
'associated with the tournament file.
Sub UpdateTourneyFile (gameIdx, loseTeam$, winTeam$)

    Shared tourneyFile$

    Shared teamYrTourn$()

    Open diskPaths$(1) + tourneyFile$ As #1 Len = 90

    For X = 0 To 14
        Field #1, X * 2 As X$, 2 As Q$(X + 1), 90 - 2 - 2 * X As X$
    Next

    Field #1, 30 As X$, 2 As Q$(16), 2 As Q$(17), 15 As Q$(18), 15 As Q$(19), 26 As X$
    Field #1, 64 As X$, 3 As Q$(20), 3 As Q$(21), 6 As Q$(22), 8 As Q$(23), 6 As X$
    Field #1, 84 As X$, 2 As Q$(24), 2 As Q$(25), 2 As Q$(26)

    For X = 0 To 14:
        LSet Q$(X + 1) = MKI$(NG1%(X))
    Next

    For X = 0 To 3:
        LSet Q$(20 + X) = teamYrTourn$(X)
    Next

    For X = 1 To 3:
        LSet Q$(X + 23) = MKI$(NG1%(X + 14))
    Next

    LSet Q$(16) = MKI$(score(0, 0))
    LSet Q$(17) = MKI$(score(1, 0))

    LSet Q$(18) = loseTeam$
    LSet Q$(19) = winTeam$

    Put #1, gameIdx

    Close #1

End Sub

'----------------------------------------
'         UPDATESCREEN Subroutine
'----------------------------------------
'This subroutine refreshes all the values
'for the main screen, including the
'scoreboard, team options and rosters.
'The frame will have already been drawn
'by the SCOREBOARD routine.
Sub UPDATESCREEN ()

    Call TICKERUPDATE

    'Team 1
    Locate 2, 1
    Locate , 9
    Color teamRat_GAME(0, 0), teamRat_GAME(0, 1): Print gameTeams$(0);

    'Game Clock - Minutes
    Locate 1, 37
    Color 15, 0: Print Using "##"; Int(gameClock! / 60);: Print ":";

    'Game Clock - Seconds
    If gameClock! <= 5 Then
        'print 1/10th of a sec for last 5 seconds
        Print "0";: Print Using "#.#"; gameClock! - Int(gameClock! / 60) * 60;
    Else
        If gameClock! - Int(gameClock! / 60) * 60 < 10 Then
            Print "0";: Print Using "#"; gameClock! - Int(gameClock! / 60) * 60;
        Else
            Print Using "##"; gameClock! - Int(gameClock! / 60) * 60;
        End If

    End If

    'Team 2
    Locate 2, 56
    Color teamRat_GAME(1, 0), teamRat_GAME(1, 1): Print gameTeams$(1)
    Color 14, 0

    'Score Team 1
    Locate 4, 13: Print Using "###"; score(0, 0);
    Locate 2, 33: Print " ";
    If PA% = 0 Then Locate , 33: Print Chr$(17);

    'Period Designation
    Locate 2, 35: Print Using "  HALF #"; currHalf;: Locate , 44: Print " ";
    If PA% = 1 Then Locate , 44: Print Chr$(16);

    'Overtime
    If currHalf > 2 Then
        Locate , 35: Print Using "OVERTIME #"; currHalf - 2;
        Locate , 46: Print " ";
        If PA% = 1 Then Locate , 46: Print Chr$(16)
    End If

    'Score Team 2
    Color 14, 0
    Locate 4, 60: Print Using "###"; score(1, 0)

    'TO / RB / TF
    Color 7
    Locate 3, 35: Print Using "##  "; turnovers(0);
    Color 12: Print "TO  ";
    Color 7: Print Using "##"; turnovers(1)

    Locate , 35: Print Using "##  "; gameR3!(0);
    Color 12: Print "RB  ";
    Color 7: Print Using "##"; gameR3!(1)

    Locate , 35: Print Using "##  "; P2(0);
    Color 12: Print "TF  ";
    Color 7: Print Using "##"; P2(1);

    'Bonus
    If P2(0) > 5 Then
        Color 0, 2
        Locate , 46: Print "BONUS";
        Color 7, 0
    End If

    If P2(1) > 5 Then
        Color 0, 2
        Locate , 29: Print "BONUS"
        Color 7, 0
    End If

    'Timeouts
    Locate 6, 9: Print "TIMEOUTS:"; timeouts(0);
    Locate , 56: Print "TIMEOUTS:"; timeouts(1)

    Color 14, 0

    'Shot Clock
    'If no shot clock | < X secs left with X sec shot clock | Overtime with 5 Mins Left (and a shot clock)
    If sClockVal = 0 Or (gameClock! < scSettings(sClockVal) And shotClock >= gameClock!) Or (sClockVal >= 1 And currHalf > 2 And gameClock! = 300) Then
        'If sClockVal = 0 Or gameClock! < 45 And shotClock >= gameClock! And sClockVal = 1 Or gameClock! < 35 And shotClock >= gameClock! And sClockVal = 2 Or gameClock! < 30 And shotClock >= gameClock! And sClockVal = 3 Or sClockVal >= 1 And currHalf > 2 And gameClock! = 300 Then
        Locate 6, 37: Print " :  "
    Else
        Locate 6, 37: Print Using " :##"; shotClock
    End If

    'Team strategies / decisions
    If pbpDelay! <> 0 Then

        'Team Play Styles
        Locate 9, 41
        Color teamRat_GAME(D, 0), teamRat_GAME(D, 1): Print "DEF-"; defStyles_brief$(defStrat(D))
        Locate , 41
        Color teamRat_GAME(P, 0), teamRat_GAME(P, 1): Print "OFF-"; offStyles_brief$(offStrat(P))

        Color 15, 0
        Locate 11, 41
        Color 14: Print "(1) ";
        Color 15: Print "SHOOT        ";
        Color 14: Print "ENTER";
        Color 15: Print "-PASS"
        Locate , 41
        Color 14: Print "(2)  ";
        Color 15: Print gameTeams$(P); " CALL TIMEOUT     "
        Locate , 41
        Color 14: Print "(T)  ";
        Color 15: Print "10 MIN TICKER"
        Locate , 41
        Color 14: Print "(D)  ";
        Color 15: Print "CHANGE DEFENSE FROM 2-3 ZONE"
        Locate , 41
        Color 14: Print "(B)  ";
        Color 15: Print "BOXSCORE"

        Color 15, 0

        Locate 19, 1

        'Roster for team 1
        For I1 = 0 To 4:

            Color 2, 0
            Print Using "# "; I1;

            Color 15
            Print Left$(players$(0, B1(0, I1)), 12); Tab(15);

            If plyrOff_GAME!(0, B1(0, I1), 19) >= 7 Then Print "*";
            Print ; Tab(16);

            J = (plyrOff_GAME!(0, B1(0, I1), 3)) - plyrOff_GAME!(0, B1(0, I1), 7) - plyrOff_GAME!(0, B1(0, I1), 11) - plyrOff_GAME!(0, B1(0, I1), 12)
            If J <= 0 Then J = 0

            Print Using "## ## "; plyrOff_GAME!(0, B1(0, I1), 0), plyrOff_GAME!(0, B1(0, I1), 1);

            If P = 0 Then Print Using "##"; plyrOff_GAME!(0, B1(0, I1), 21) * 2 / 10; Else Print Using "##"; plyrOff_GAME!(0, B1(0, I1), 2) * 2 / 10;
            If J <= 0 And (currHalf = 1 Or currHalf = 2 And gameClock! > 120) Then Color 12

            Print Using "### "; J;

            Color 15
            If tmFatigue(0, B1(0, I1)) * -1 >= 5 And (currHalf = 1 Or currHalf = 2 And gameClock! > 120) Then Color 12
            Print Using "## "; tmFatigue(0, B1(0, I1)) * -1;

            Color 15
            Print Using "##"; plyrOff_GAME!(0, B1(0, I1), 4);
            Print Using "###  "; plyrOff_GAME!(0, B1(0, I1), 8) * 2 + plyrOff_GAME!(0, B1(0, I1), 10) + threeFG(0, B1(0, I1), 0);
            If plyrOff_GAME!(0, B1(0, I1), 12) >= 4 Then Color 12

            Print Using "#"; plyrOff_GAME!(0, B1(0, I1), 12)
            Color 15

        Next I1

        Locate 19, 40

        'Roster for team 2
        For I1 = 0 To 4:

            Color 2, 0
            Locate , 40: Print Using "# "; I1;
            Color 15: Print Left$(players$(1, B1(1, I1)), 12); Tab(55);

            If plyrOff_GAME!(1, B1(1, I1), 19) >= 7 Then Print "*";

            Print ; Tab(56);

            J = (plyrOff_GAME!(1, B1(1, I1), 3)) - plyrOff_GAME!(1, B1(1, I1), 7) - plyrOff_GAME!(1, B1(1, I1), 11) - plyrOff_GAME!(1, B1(1, I1), 12)
            If J <= 0 Then J = 0

            Print Using "## ## "; plyrOff_GAME!(1, B1(1, I1), 0), plyrOff_GAME!(1, B1(1, I1), 1);

            If P = 1 Then Print Using "##"; plyrOff_GAME!(1, B1(1, I1), 21) * 2 / 10; Else Print Using "##"; plyrOff_GAME!(1, B1(1, I1), 2) * 2 / 10;

            If J <= 0 And (currHalf = 1 Or currHalf = 2 And gameClock! > 120) Then Color 12
            Print Using "### "; J;

            Color 15
            If tmFatigue(1, B1(1, I1)) * -1 >= 5 And (currHalf = 1 Or currHalf = 2 And gameClock! > 120) Then Color 12
            Print Using "## "; tmFatigue(1, B1(1, I1)) * -1;

            Color 15
            Print Using "##"; plyrOff_GAME!(1, B1(1, I1), 4);
            Print Using "###  "; plyrOff_GAME!(1, B1(1, I1), 8) * 2 + plyrOff_GAME!(1, B1(1, I1), 10) + threeFG(1, B1(1, I1), 0);

            If plyrOff_GAME!(1, B1(1, I1), 12) >= 4 Then Color 12
            Print Using "#"; plyrOff_GAME!(1, B1(1, I1), 12)

            Color 15

        Next I1

    End If

End Sub


'----------------------------------------
'         SCOREBOARD Subroutine
'----------------------------------------
'This subroutine draws up the main screen
'for the game interface, including a frame,
'scoreboard, team options and rosters
Sub SCOREBOARD ()

    Cls

    Call TICKERUPDATE

    'Frames
    Color 9, 0

    Locate 3, 11: Print Chr$(218); String$(5, 196); Chr$(191)
    Locate , 11: Print Chr$(179);: Locate , 17: Print Chr$(179)
    Locate , 11: Print Chr$(192); String$(5, 196); Chr$(217)

    Locate 3, 58: Print Chr$(218); String$(5, 196); Chr$(191)
    Locate , 58: Print Chr$(179);: Locate , 64: Print Chr$(179)
    Locate , 58: Print Chr$(192); String$(5, 196); Chr$(217)

    'Team 1
    Locate 2, 1
    Locate , 9
    Color teamRat_GAME(0, 0), teamRat_GAME(0, 1): Print gameTeams$(0);

    'Game Clock - Minutes
    Color 15, 0
    Locate 1, 37: Print Using "##"; Int(gameClock! / 60);: Print ":";

    'Game Clock - Seconds
    If gameClock! - Int(gameClock! / 60) * 60 < 10 Then
        Print "0";: Print Using "#"; gameClock! - Int(gameClock! / 60) * 60;
    Else
        Print Using "##"; gameClock! - Int(gameClock! / 60) * 60;
    End If

    'Team 2
    Locate 2, 56
    Color teamRat_GAME(1, 0), teamRat_GAME(1, 1): Print gameTeams$(1)

    'Score Team 1
    Color 14, 0
    Locate 4, 13: Print Using "###"; score(0, 0);

    'Period Designation
    Locate 2, 35
    If currHalf > 2 Then
        Print Using "OVERTIME #"; currHalf - 2
    Else
        Print Using "  HALF #"; currHalf;
    End If

    'Score Team 2
    Color 14, 0
    Locate 4, 60: Print Using "###"; score(1, 0)

    'TO / RB / TF
    Color 7
    Locate 3, 35: Print Using "##  "; turnovers(0);
    Color 12: Print "TO  ";
    Color 7: Print Using "##"; turnovers(1)

    Locate , 35: Print Using "##  "; gameR3!(0);
    Color 12: Print "RB  ";
    Color 7: Print Using "##"; gameR3!(1)

    Locate , 35: Print Using "##  "; P2(0);
    Color 12: Print "TF  ";
    Color 7: Print Using "##"; P2(1);

    'Bonus
    If P2(0) > 5 Then
        Color 0, 2
        Locate , 46: Print "BONUS";
        Color 7, 0
    End If

    If P2(1) > 5 Then
        Color 0, 2
        Locate , 29: Print "BONUS"
        Color 7, 0
    End If

    'Timeouts
    Locate 6, 9: Print "TIMEOUTS:"; timeouts(0);
    Locate , 56: Print "TIMEOUTS:"; timeouts(1)

    'Team strategies / decisions
    Locate 9, 41
    Color teamRat_GAME(D, 0), teamRat_GAME(D, 1)
    Print "DEF-"; defStyles_brief$(defStrat(D))
    Locate , 41
    Color teamRat_GAME(P, 0), teamRat_GAME(P, 1)
    Print "OFF-"; offStyles_brief$(offStrat(P))

    Color 15, 0
    Locate 11, 41
    Color 14: Print "(1) ";
    Color 15: Print "SHOOT        ";
    Color 14: Print "ENTER";
    Color 15: Print "-PASS"
    Locate , 41
    Color 14: Print "(2)  ";
    Color 15: Print gameTeams$(P); " CALL TIMEOUT     "
    Locate , 41
    Color 14: Print "(T)  ";
    Color 15: Print "10 MIN TICKER"
    Locate , 41
    Color 14: Print "(D)  ";
    Color 15: Print "CHANGE DEFENSE FROM 2-3 ZONE"
    Locate , 41
    Color 14: Print "(B)  ";
    Color 15: Print "BOXSCORE"

    Color 9, 0
    Locate 7, 1
    Print String$(38, 205); Chr$(203); String$(38, 205)

    Locate 8, 1
    For I = 1 To 8
        Locate , 39
        Print Chr$(186)
    Next

    'Team 1 Overview
    Locate 17, 1
    Color teamRat_GAME(0, 0), teamRat_GAME(0, 1): Print gameTeams$(0);

    'Win/Loss record from current stats files
    Print Using " [##"; Z5(0);: Print "-";: Print Using "##]"; Z6(0)
    Color 14, 0: Print "# NAME         FG FT RB CX EF PA PT  F"

    'Team 1 Roster
    For I1 = 0 To 4

        Color 2: Print Using "# "; I1;
        Color 15
        'Player Name
        Print Left$(players$(0, B1(0, I1)), 12);

        Locate , 15
        If plyrOff_GAME!(0, B1(0, I1), 19) >= 7 Then Print "*";

        Locate , 16

        J = (plyrOff_GAME!(0, B1(0, I1), 3)) - plyrOff_GAME!(0, B1(0, I1), 7) - plyrOff_GAME!(0, B1(0, I1), 11) - plyrOff_GAME!(0, B1(0, I1), 12)
        If J <= 0 Then J = 0

        'FG / FT
        Print Using "##"; plyrOff_GAME!(0, B1(0, I1), 0);
        Print Using "### "; plyrOff_GAME!(0, B1(0, I1), 1);

        'RB
        If P = 0 Then
            Print Using "##"; plyrOff_GAME!(0, B1(0, I1), 21) * 2 / 10;
        Else
            Print Using "##"; plyrOff_GAME!(0, B1(0, I1), 2) * 2 / 10;
        End If
        If J <= 0 And (currHalf = 1 Or currHalf = 2 And gameClock! > 120) Then Color 12

        'CX
        Print Using "### "; J;

        Color 15
        If tmFatigue(0, B1(0, I1)) * -1 >= 5 And (currHalf = 1 Or currHalf = 2 And gameClock! > 120) Then Color 12
        'EF
        Print Using "## "; tmFatigue(0, B1(0, I1)) * -1;

        Color 15
        'PA / PT
        Print Using "##"; plyrOff_GAME!(0, B1(0, I1), 4);
        Print Using "###  "; plyrOff_GAME!(0, B1(0, I1), 8) * 2 + plyrOff_GAME!(0, B1(0, I1), 10) + threeFG(0, B1(0, I1), 0);

        If plyrOff_GAME!(0, B1(0, I1), 12) >= 4 Then Color 12
        'F
        Print Using "#"; plyrOff_GAME!(0, B1(0, I1), 12)

        Color 15

    Next I1

    'Team 2 Overview
    Locate 17, 40
    Color teamRat_GAME(1, 0), teamRat_GAME(1, 1): Print gameTeams$(1);

    'Win/Loss record from current stats files
    Print Using " [##"; Z5(1);: Print "-";: Print Using "##]"; Z6(1)

    Color 14, 0
    Locate , 40: Print "# NAME          FG FT RB CX EF PA PT  F"

    'Team 2 Roster
    For I1 = 0 To 4:

        Locate , 40
        Color 2: Print Using "# "; I1;
        Color 15
        'Player Name
        Print Left$(players$(1, B1(1, I1)), 12);: Locate , 55

        If plyrOff_GAME!(1, B1(1, I1), 19) >= 7 Then Print "*";

        Locate , 56

        J = (plyrOff_GAME!(1, B1(1, I1), 3)) - plyrOff_GAME!(1, B1(1, I1), 7) - plyrOff_GAME!(1, B1(1, I1), 11) - plyrOff_GAME!(1, B1(1, I1), 12): If J <= 0 Then J = 0

        'FG / FT
        Print Using "##"; plyrOff_GAME!(1, B1(1, I1), 0);
        Print Using "### "; plyrOff_GAME!(1, B1(1, I1), 1);

        'RB
        If P = 1 Then
            Print Using "##"; plyrOff_GAME!(1, B1(1, I1), 21) * 2 / 10;
        Else
            Print Using "##"; plyrOff_GAME!(1, B1(1, I1), 2) * 2 / 10;
        End If
        If J <= 0 And (currHalf = 1 Or currHalf = 2 And gameClock! > 120) Then Color 12

        'CX
        Print Using "### "; J;

        Color 15
        If tmFatigue(1, B1(1, I1)) * -1 >= 5 And (currHalf = 1 Or currHalf = 2 And gameClock! > 120) Then Color 12
        'EF
        Print Using "## "; tmFatigue(1, B1(1, I1)) * -1;

        Color 15
        'PA / PT
        Print Using "##"; plyrOff_GAME!(1, B1(1, I1), 4);
        Print Using "###  "; plyrOff_GAME!(1, B1(1, I1), 8) * 2 + plyrOff_GAME!(1, B1(1, I1), 10) + threeFG(1, B1(1, I1), 0);

        If plyrOff_GAME!(1, B1(1, I1), 12) >= 4 Then Color 12
        'F
        Print Using "#"; plyrOff_GAME!(1, B1(1, I1), 12)
        Color 15

    Next I1

    Color 9, 0
    For I = 1 To 9:
        Locate 14 + I, 39: Print Chr$(186)
    Next

    'Color 9, 0
    Locate 16, 1: Print String$(79, 205)
    Locate 16, 39: Print Chr$(206)
    Color 7, 0

End Sub


'----------------------------------------
'         ColorChange Subroutine
'----------------------------------------
'This routine checks to see if both teams
'have conflicting primary colors. 
'If so, it will substitute the secondary 
'color with white/grey and reverse them.
'In essence, it's the digital equivalent 
'of assigning an alternate jersey color.
Sub ColorChange ()

    If teamRat_GAME(1, 0) = 15 And teamRat_GAME(1, 1) = 4 Then 
        teamRat_GAME(1, 0) = 4
        teamRat_GAME(1, 1) = 7
    End If

    If teamRat_GAME(1, 0) = 15 And teamRat_GAME(1, 1) = 1 Then 
        teamRat_GAME(1, 0) = 1
        teamRat_GAME(1, 1) = 7
    End If

    If teamRat_GAME(1, 0) = 0 And teamRat_GAME(1, 1) = 4 Then 
        teamRat_GAME(1, 0) = 12
        teamRat_GAME(1, 1) = 0
    End If

    If teamRat_GAME(1, 0) = 1 And teamRat_GAME(1, 1) = 7 Then 
        teamRat_GAME(1, 0) = 15
        teamRat_GAME(1, 1) = 1
    End If

    If teamRat_GAME(1, 0) = 4 And teamRat_GAME(1, 1) = 7 Then 
        teamRat_GAME(1, 0) = 15
        teamRat_GAME(1, 1) = 4
    End If

End Sub


'----------------------------------------
'       LOADSTATS Subroutine
'----------------------------------------
'This subroutine loads team schedule stats
'data into arrays for each team from their
'corresponding stat file.
Sub LOADSTATS ()

    Shared powerRating(), teamScore(), oppScore()

    Shared gameAttendance&()

    Shared gameSite$(), locIndicator$(), oppName$()

    If teamRat_GAME(1, 0) = teamRat_GAME(0, 0) And teamRat_GAME(1, 1) = teamRat_GAME(0, 1) Then Call ColorChange

    For I = 0 To 1

        Color 15, 0
        Cls

        statFile$ = nameStatFile$(gameTeams$(I))

        If _FileExists(diskPaths$(1) + statFile$ + "S") Then

            Open diskPaths$(1) + statFile$ + "S" For Input As #1

            Input #1, numberGames

            For I1 = 1 To MAX_SCHED_STATS:
                Input #1, teamScore(I1)
            Next

            For I1 = 1 To MAX_SCHED_STATS:
                Input #1, oppName$(I1)
            Next

            For I1 = 1 To MAX_SCHED_STATS:
                Input #1, oppScore(I1)
            Next

            For I1 = 1 To MAX_SCHED_STATS:
                Input #1, locIndicator$(I1)
            Next

            For I1 = 1 To MAX_SCHED_STATS
                For I2 = 0 To 1
                    Input #1, powerRating(I1, I2)
                Next
            Next

            For I1 = 1 To MAX_SCHED_STATS:
                Input #1, gameAttendance&(I1)
            Next I1

            For I1 = 1 To MAX_SCHED_STATS:
                Input #1, gameSite$(I1)
            Next I1

            Close #1

            For I1 = 1 To numberGames
                If teamScore(I1) > oppScore(I1) Then Z5(I) = Z5(I) + 1
                If teamScore(I1) < oppScore(I1) Then Z6(I) = Z6(I) + 1
            Next

        End If

    Next

End Sub


'----------------------------------------
'         OFFREBOUND Subroutine
'----------------------------------------
'This subroutine clearly does something
'related to offensive rebounds
Sub OFFREBOUND ()

    RB = 0

    For I = 0 To 4:
        RB(I) = 0
        XZ = plyrOff_GAME!(P, B1(P, I), 21)

        If Not (currHalf > 2 Or currHalf = 2 And gameClock! <= 120) Then
            If plyrOff_GAME!(P, B1(P, I), 3) - plyrOff_GAME!(P, B1(P, I), 7) - plyrOff_GAME!(P, B1(P, I), 11) - plyrOff_GAME!(P, B1(P, I), 12) <= 0 Then XZ = Int(XZ * .5 + .5)
        End If

        If tmFatigue(P, B1(P, I)) <= -5 Then XZ = Int(XZ * .9 + .5)
        RB(I) = RB(I) + XZ
        RB = RB + XZ
    Next

    rndReb = Rnd(1) * RB

    skipRandom% = 0

    For ballCarrier = 0 To 4
        If rndReb <= RB(ballCarrier) Then skipRandom% = 1: Exit For
        RB(ballCarrier + 1) = RB(ballCarrier + 1) + RB(ballCarrier)
    Next

    If skipRandom% = 0 Then ballCarrier = Int(Rnd(1) * 5)

End Sub


'----------------------------------------
'         DEFREBOUND Subroutine
'----------------------------------------
'This subroutine clearly does something
'related to defensive rebounds
Sub DEFREBOUND ()

    RB = 0

    For I = 0 To 4
        RB(I) = 0
        XZ = plyrOff_GAME!(1 - P, B1(1 - P, I), 2)

        If Not (currHalf > 2 Or currHalf = 2 And gameClock! <= 120) Then
            If plyrOff_GAME!(1 - P, B1(1 - P, I), 3) - plyrOff_GAME!(1 - P, B1(1 - P, I), 7) - plyrOff_GAME!(1 - P, B1(1 - P, I), 11) - plyrOff_GAME!(1 - P, B1(1 - P, I), 12) <= 0 Then XZ = Int(XZ * .5 + .5)
        End If

        If tmFatigue(1 - P, B1(1 - P, I)) <= -5 Then XZ = Int(XZ * .9 + .5)
        RB(I) = RB(I) + XZ
        RB = RB + XZ
    Next

    rndReb = Rnd(1) * RB

    skipRandom% = 0

    For ballCarrier = 0 To 4
        If rndReb <= RB(ballCarrier) Then skipRandom% = 1: Exit For
        RB(ballCarrier + 1) = RB(ballCarrier + 1) + RB(ballCarrier)
    Next

    If skipRandom% = 0 Then ballCarrier = Int(Rnd(1) * 5)

End Sub


'----------------------------------------
'     ChangeContributions Subroutine
'----------------------------------------
'This subroutine lets the user adjust the
'contribution ratings for players
Sub ChangeContributions ()

    If autoPlay <> 1 Or playerMode <> 2 Then

        Do

            Color 15, 0
            Cls

            Print "EDIT CONTRIBUTION PERCENTAGES OF PLAYERS FROM:"
            Print
            Color 14
            Print "(0) - ";: Color teamRat_GAME(0, 0), teamRat_GAME(0, 1)
            Print gameTeams$(0): Color , 0
            Print
            Color 14
            Print "(1) - ";: Color teamRat_GAME(1, 0), teamRat_GAME(1, 1)
            Print gameTeams$(1): Color , 0
            Print
            Color 14
            Print "(2) - ";: Color 3: Print "PROCEED TO GAME"
            Color 15, 0
            Print
            Print "NOTE:: THE CONTRIBUTION RATING CONSISTS OF THE PLAYER'S"
            Print "       FREQUENCY TO SHOOT, REBOUND, AND COMMIT FOULS."

            Do
                I$ = GetKeyPress$
                teamChoice = Val(I$)
            Loop Until teamChoice >= 0 And teamChoice <= 2

            If teamChoice <> 2 Then

                Cls

                TX = 0

                For I1 = 0 To 13:
                    TX = TX + plyrOff_GAME!(teamChoice, I1, 3)
                Next

                For I1 = 0 To 13:
                    plyrOff_GAME!(teamChoice, I1, 3) = plyrOff_GAME!(teamChoice, I1, 3) / TX * 100
                Next

                Do

                    Locate 2, 1
                    Print "CONTRIBUTION RATINGS FOR ";
                    Color teamRat_GAME(teamChoice, 0), teamRat_GAME(teamChoice, 1): Print gameTeams$(teamChoice)
                    Color 15, 0
                    Print
                    Print " #  PLAYER             CX"
                    TY% = 0

                    For I1 = 0 To 13:

                        TY% = TY% + plyrOff_GAME!(teamChoice, I1, 3)
                        If rosterStatus(teamChoice, I1) = -1 Then Color teamRat_GAME(teamChoice, 0), teamRat_GAME(teamChoice, 1)

                        Print Using "## "; I1 + 1;
                        Print players$(teamChoice, I1);
                        Locate , 24
                        Print Using "##"; plyrOff_GAME!(teamChoice, I1, 3)
                        Color 15, 0

                    Next

                    Locate , 23: Print Using "###"; TY%

                    Input "SELECT PLAYER TO CHANGE (0 TO CONTINUE)"; I1
                    I1 = I1 - 1

                    If I1 <= 13 And I1 >= 0 Then

                        Locate 22, 1
                        Print "ENTER NEW CX RATING FOR "; players$(teamChoice, I1); " ";
                        Input plyrOff_GAME!(teamChoice, I1, 3)
                        Locate 22, 1: Print Space$(52)

                    Else

                        If TY% <> 100 Then
                            Locate 22, 1: Print "TOTAL MUST ADD UP TO 100%! PRESS ANY KEY"
                            I$ = GetKeyPress$
                            Locate 22, 1: Print Space$(52)
                        End If

                    End If

                Loop Until I1 < 0

                For I1 = 0 To 13:
                    plyrOff_GAME!(teamChoice, I1, 3) = plyrOff_GAME!(teamChoice, I1, 3) / 100 * TX
                Next

            End If

        Loop Until teamChoice = 2

    End If

    X = 0

End Sub


'----------------------------------------
'         ZONECHANGE Subroutine
'----------------------------------------
'This subroutine lets the user configure
'their zone strategy.
Sub ZONECHANGE ()

    If Not (playerMode = 1 And compTeam = D Or playerMode = 2) Or defStrat(D) = 2 Or defStrat(D) = 7 Or defStrat(D) = 12 Or (offStrat(P) <= 8 And offStrat(P) >= 4) Then

        Call FRAMEOPTION(8, P)
        Locate 10, 15

        Print gameTeams$(D); " SELECT STRATEGY:"
        Locate 12, 14
        Locate , 14: Print "0 - SOLID MAN TO MAN"
        Locate , 14: Print "1 - PRESSURE MAN TO MAN"
        Locate , 14: Print "2 - 1-3-1 TRAPPING ZONE"

        Do
            I$ = GetKeyPress$
            I1 = Val(I$)
        Loop Until I1 >= 0 And I1 <= 2

        If I1 = 2 Then I1 = 3
        If defStrat(D) <= 3 Then defStrat(D) = I1
        'what is I supposed to be here???
        If defStrat(D) = 7 Then defStrat(D) = I + 8
        If defStrat(D) = 10 Then defStrat(D) = 3

        'what is I supposed to be here???
        If defStrat(D) = 12 Then defStrat(D) = I + 10
        If defStrat(D) = 12 Then defStrat(D) = 13

        P9 = D

        If defStrat(P9) <= 3 Then P7(P9) = 0
        If defStrat(P9) = 4 Then P7(P9) = 1
        If defStrat(P9) = 5 Or defStrat(P9) = 6 Then P7(P9) = 2
        If defStrat(P9) > 6 And defStrat(P9) <= 10 Then P7(P9) = 3
        If defStrat(P9) > 9 And defStrat(P9) < 14 Then P7(P9) = 4
        If defStrat(P9) = 14 Then P7(P9) = 5
        If defStrat(P9) = 0 Or defStrat(P9) = 4 Or defStrat(P9) = 5 Or defStrat(P9) = 8 Or defStrat(P9) = 10 Then defType(P9) = 0
        If defStrat(P9) = 1 Or defStrat(P9) = 6 Or defStrat(P9) = 9 Or defStrat(P9) = 11 Then defType(P9) = 1
        If defStrat(P9) = 2 Or defStrat(P9) = 7 Or defStrat(P9) = 12 Then defType(P9) = 2
        If defStrat(P9) = 3 Or defStrat(P9) = 13 Then defType(P9) = 3
        Color 15, 0

    End If

    Color 7, 0

End Sub


'----------------------------------------
'         DEFENSEMENU Subroutine
'----------------------------------------
'This subroutine gives the user OPTIONS
'for the various defensive play styles.
'Once chosen, it assigns the appropriate
'value to the array for tracking.
Sub DEFENSEMENU ()

    Do

        Cls

        wrongChoice% = 0

        Print ; Tab(33); "DEFENSIVE STYLE"
        Print

        For I = 0 To 14
            Locate , 5: Print Using "# "; I;
            If I = 10 Then Locate , 5: Print "A ";
            If I = 11 Then Locate , 5: Print "B ";
            If I = 12 Then Locate , 5: Print "C ";
            If I = 13 Then Locate , 5: Print "D ";
            If I = 14 Then Locate , 5: Print "E ";
            Print defStyles$(I)
        Next

        Print
        Locate 19, 5: Print "SELECT DEFENSIVE STYLE FOR "; gameTeams$(P9)

        Do
            I$ = GetKeyPress$
            I1 = Val(I$)
            Call LetterToNumber(I$, I1)
        Loop Until I1 >= 0 And I1 <= 14

        defStrat(P9) = I1

        Select Case defStrat(P9)

            Case 0 To 3
                P7(P9) = 0

            Case 4
                P7(P9) = 1

            Case 5, 6
                P7(P9) = 2

            Case 7 To 9
                P7(P9) = 3

            Case 10 To 13
                P7(P9) = 4

            Case 14
                If (currHalf < 2 Or currHalf >= 2 And gameClock! > 180) Then
                    Beep
                    Locate 23, 1: Print "CAN ONLY USE LAST 3 MIN OF 2ND HALF OR OT"
                    I$ = GetKeyPress$
                    wrongChoice% = 1
                Else
                    P7(P9) = 5
                End If

        End Select

    Loop Until wrongChoice% = 0

    Select Case defStrat(P9)

        Case 0, 4, 5, 8, 10
            'Solid Man-to-Man
            defType(P9) = 0

        Case 1, 6, 9, 11
            'Pressure Man-to-Man
            defType(P9) = 1

        Case 2, 7, 12
            '2-3 Zone
            defType(P9) = 2

        Case 3, 13
            'Trapping Zone
            defType(P9) = 3

    End Select

    Color 15, 0

End Sub


'----------------------------------------
'         SETSTAMINA Subroutine
'----------------------------------------
'This subroutine calculates and assigns
'stamina ratings to players
Sub SETSTAMINA ()

    SQ% = 0

    For I = 0 To 13
        If teamRat_GAME(P9, 5) = 0 And plyrRat_GAME(P9, I, 0) = 0 And rosterStatus(P9, I) = 0 Then SQ% = SQ% + plyrOff_GAME!(P9, I, 3)
        If teamRat_GAME(P9, 5) <> 0 And plyrRat_GAME(P9, I, 0) <> 0 And rosterStatus(P9, I) = 0 Then SQ% = SQ% + plyrOff_GAME!(P9, I, 3) * teamRat_GAME(P9, 5) / plyrRat_GAME(P9, I, 0): plyrOff_GAME!(P9, I, 3) = plyrOff_GAME!(P9, I, 3) * teamRat_GAME(P9, 5) / plyrRat_GAME(P9, I, 0)
    Next

    'So SQ% is a sum of plyrOff_GAME!(P9, X, 3) values...
    For I = 0 To 13
        If teamRat_GAME(P9, 5) = 0 And plyrRat_GAME(P9, I, 0) = 0 And rosterStatus(P9, I) = 0 Then plyrOff_GAME!(P9, I, 3) = Int(plyrOff_GAME!(P9, I, 3) / SQ% * S9 + .5)
        If teamRat_GAME(P9, 5) <> 0 And plyrRat_GAME(P9, I, 0) <> 0 And rosterStatus(P9, I) = 0 Then plyrOff_GAME!(P9, I, 3) = Int(plyrOff_GAME!(P9, I, 3) / SQ% * S9 + .5)
        If plyrOff_GAME!(P9, I, 3) < 1 Then plyrOff_GAME!(P9, I, 3) = 1
    Next I

    SQ% = 0

    For I = 0 To 13
        If rosterStatus(P9, I) = 0 Then SQ% = SQ% + plyrOff_GAME!(P9, I, 3)
    Next

    For I = 0 To 13
        If S9 > 120 And teamAdj(P9, 8) <> 99 Then plyrOff_GAME!(P9, I, 16) = plyrOff_GAME!(P9, I, 16) * (120 / S9): plyrOff_GAME!(P9, I, 16) = Int(plyrOff_GAME!(P9, I, 16) + .5)
    Next I

    DY = 7

    If S9 > 114 Then DY = (114 / S9) * DY: DY = Int(DY + .5)

End Sub


'----------------------------------------
'        COMPUTERSUBS Subroutine
'----------------------------------------
'This subroutine uses some basic logic to
'automatically handle player substitution
Sub COMPUTERSUBS ()

    If currHalf >= 2 And gameClock! <= 60 And threePtOpt = 1 And (score(P9, 0) - score(1 - P9, 0) = -3 Or score(P9, 0) - score(1 - P9, 0) = -6) Then
        offStrat(P9) = 9
    End If

    M1 = 0
    M2 = 0
    M3 = 0
    M4 = 0
    skipG9% = 0

    If Not (playerMode = 1 And P9 = compTeam And X = 50 Or playerMode = 2 And P9 = P And X = 50) Then

        For I1 = 0 To 13

            M6 = plyrOff_GAME!(P9, I1, 3) - plyrOff_GAME!(P9, I1, 7) - plyrOff_GAME!(P9, I1, 11) - plyrOff_GAME!(P9, I1, 12)

            If currHalf < 2 And M6 <= 0 Or currHalf = 2 And gameClock! > 120 And M6 <= 0 Then M1 = M1 + 1

            'Disabled player or inactive spot
            If plyrOff_GAME!(P9, I1, 12) >= foulsToDQ Or players$(P9, I1) = "XXX" Or rosterStatus(P9, I1) <> 0 Then M2 = M2 + 1

            If I1 <= 4 Then

                M6 = plyrOff_GAME!(P9, B1(P9, I1), 3) - plyrOff_GAME!(P9, B1(P9, I1), 7) - plyrOff_GAME!(P9, B1(P9, I1), 11) - plyrOff_GAME!(P9, B1(P9, I1), 12)

                If currHalf = 1 And M6 / plyrOff_GAME!(P9, B1(P9, I1), 3) < .5 Then M3 = M3 + 1
                If currHalf = 1 And gameClock! >= 600 And M6 / plyrOff_GAME!(P9, B1(P9, I1), 3) < .75 Then M3 = M3 + 1
                If currHalf = 2 And gameClock! >= 600 And M6 / plyrOff_GAME!(P9, B1(P9, I1), 3) < .25 Then M3 = M3 + 1
                If currHalf = 2 And gameClock! >= 300 And gameClock! < 600 And M6 / plyrOff_GAME!(P9, B1(P9, I1), 3) < .13 Then M3 = M3 + 1
                If currHalf = 2 And gameClock! < 300 And M6 / plyrOff_GAME!(P9, B1(P9, I1), 3) < gameClock! / 2400 Then M3 = M3 + 1
                If M6 <= 0 And currHalf < 2 Or M6 <= 0 And currHalf = 2 And gameClock! > 120 Then M3 = M3 + 1
                If plyrOff_GAME!(P9, B1(P9, I1), 12) >= foulsToDQ Or plyrOff_GAME!(P9, B1(P9, I1), 12) >= foulsToDQ - 2 And currHalf = 1 Or currHalf = 2 And gameClock! > 720 And plyrOff_GAME!(P9, B1(P9, I1), 12) >= foulsToDQ - 1 Then M4 = M4 + 1

            End If

        Next

        If M3 >= 1 And 5 - M3 < 14 - M1 Or currHalf = 2 And gameClock! < 120 And XS = 0 And G9%(P9) = 0 Or M4 >= 1 And M2 < 13 Or CTO% = 1 Then
            CTO% = 0
            XM = 1
            Call COMCOACH
            skipG9% = 1
        End If

    End If

    If skipG9% = 0 Then
        If currHalf = 2 And gameClock! <= 120 Then G9%(P9) = 1
    End If

End Sub


'----------------------------------------
'           FATIGUE Subroutine
'----------------------------------------
'This subroutine picks the appropriate
'defense for the computer team.
Sub FATIGUE ()

    'COMPUTER DEFENSE FOR FATIGUE
    FD% = 0
    FQ% = 0

    For I = 0 To 4
        FD% = FD% + tmFatigue(P9, B1(P9, I))
        If tmFatigue(P9, B1(P9, I)) <= -4 Then FQ% = 1
    Next

    If FD% < -15 Or FQ% = 1 Then
        defType(P9) = 2
        P7(P9) = 0
        defStrat(P9) = 2
    End If

End Sub


'----------------------------------------
'           LINEUPS Subroutine
'----------------------------------------
'This subroutine displays the starting
'lineup for each team and gives the user
'an interface for changing the lineup
Sub LINEUPS ()

    Shared alpha$()

    Cls
    Color teamRat_GAME(P9, 0), teamRat_GAME(P9, 1): Print gameTeams$(P9);

    Color 15, 0
    Print " TEAM ROSTER    COACH: "; gameCoaches$(P9);

    Print "  RECORD: ";
    Print Using "##"; teamRat_GAME(P9, 7);
    Print "-";
    Print Using "##"; teamRat_GAME(P9, 8)

    Color 14: Print "# NAME         POS FG  FT 3FG %3A ORB DRB RB PA  S  B CX EF  PT  F  FC  PTS/G"
    Locate 3, 1

    For R1 = 0 To 13

        If rosterStatus(P9, R1) = 0 And players$(P9, R1) <> "XXX" And players$(P9, R1) <> "" Then

            Color 2
            If R1 <= 9 Then
                Print Using "# "; R1;
            Else
                Print alpha$(R1 - 10);
            End If

            Color 15
            Print Left$(players$(P9, R1), 12);
            Locate , 16: Print positions_GAME$(P9, R1);
            Locate , 20

            L = 0
            L = plyrOff_GAME!(P9, R1, 3) - plyrOff_GAME!(P9, R1, 7) - plyrOff_GAME!(P9, R1, 11) - plyrOff_GAME!(P9, R1, 12)

            If L <= 0 Then L = 0

            Print Using "## ###  ##  ##  ##  ## ## "; plyrOff_GAME!(P9, R1, 0), plyrOff_GAME!(P9, R1, 1), plyrOff_GAME!(P9, R1, 20), plyrOff_GAME!(P9, R1, 19), plyrOff_GAME!(P9, R1, 21) * 2 / 10, plyrOff_GAME!(P9, R1, 2) * 2 / 10, (plyrOff_GAME!(P9, R1, 2) + plyrOff_GAME!(P9, R1, 21)) / 5;
            Print Using "## ## ##"; plyrOff_GAME!(P9, R1, 4), plyrOff_GAME!(P9, R1, 5), plyrOff_GAME!(P9, R1, 6);

            If L <= 0 And (currHalf = 1 Or currHalf = 2 And gameClock! > 120) Then Color 12
            Print Using "### "; L;

            Color 15
            If tmFatigue(P9, R1) * -1 >= 5 And (currHalf = 1 Or currHalf = 2 And gameClock! > 120) Then Color 12
            Print Using "##"; tmFatigue(P9, R1) * -1;

            Color 15
            Locate , 61: Print Using "###  "; plyrOff_GAME!(P9, R1, 8) * 2 + plyrOff_GAME!(P9, R1, 10) + threeFG(P9, R1, 0);

            If plyrOff_GAME!(P9, R1, 12) >= 4 Then Color 12
            Print Using "# "; plyrOff_GAME!(P9, R1, 12);

            Color 15
            Print Using "###   "; plyrOff_GAME!(P9, R1, 17);

            If playerStat_GAME(P9, R1, 0) = 0 Then
                Print "--.-"
            Else
                Print Using "##.#"; (playerStat_GAME(P9, R1, 3) * 2 + playerStat_GAME(P9, R1, 5) + playerStat_GAME(P9, R1, 13)) / playerStat_GAME(P9, R1, 0)
            End If

        End If

    Next R1

    Locate 18, 1: Color 9, 0
    Print String$(27, 205); Chr$(203); String$(51, 205)

    For R1 = 1 To 7:
        Locate R1 + 18, 28
        Print Chr$(186);
    Next

    Color 14, 0
    Locate 19, 1: Print "STARTING LINEUP"

    If C1 = 1 Then

        For M = 0 To 4

            Locate M + 20, 1
            Color 2, 0
            Print Using "# "; M;
            Color 15, 0
            Print "ENTER "; posnName$(M); " # ";

            Z = B1(P9, M)
            CV% = 0

            For IP% = 0 To Z
                If rosterStatus(P9, IP%) <> 0 Or players$(P9, IP%) = "" Or players$(P9, IP%) = "XXX" Then CV% = CV% + 1
            Next

            Print players$(P9, Z);
            Locate Z + 3 - CV%, 3
            Color teamRat_GAME(P9, 0), teamRat_GAME(P9, 1)
            Print Left$(players$(P9, Z), 12)
            Color 15, 0

        Next

    Else

        For I = 0 To 4

            Do

                Locate I + 20, 1
                Color 2, 0
                Print Using "# "; I;
                Color 15
                Print "ENTER "; posnName$(I); " # ";

                I$ = GetKeyPress$
                Call LetterToNumber(I$, posn)

                If posn >= 0 And posn <= 13 And plyrOff_GAME!(P9, posn, 12) < foulsToDQ And players$(P9, posn) <> "XXX" And rosterStatus(P9, posn) = 0 Then
                    For I2 = 0 To 4
                        If B1(P9, I2) = posn Then Exit For
                    Next I2
                End If

            Loop Until posn >= 0 And posn <= 13

            B1(P9, I) = posn
            Z = posn
            CV% = 0

            For IP% = 0 To Z
                If rosterStatus(P9, IP%) <> 0 Or players$(P9, IP%) = "" Or players$(P9, IP%) = "XXX" Then CV% = CV% + 1
            Next

            Print players$(P9, posn);
            Locate posn + 3 - CV%, 3: Color teamRat_GAME(P9, 0), teamRat_GAME(P9, 1)
            Print Left$(players$(P9, posn), 12)
            Color 15, 0
        Next

    End If

    Do

        Do
            Locate 25, 1
            Color 12, 0
            Print "# TO CHANGE (0-4) 6=NONE";
            Locate 1, 1
            I$ = GetKeyPress$
            K = Val(I$)

        Loop Until K >= 0 And K <= 4 Or K = 6

        If K = 6 Then

            skipMenu% = 0

            CV% = 0

            For I1 = 0 To 13
                If rosterStatus(P9, I1) <> 0 Or players$(P9, I1) = "XXX" Or plyrOff_GAME!(P9, I1, 12) >= foulsToDQ Then CV% = CV% + 1
            Next

            If 14 - CV% >= 5 Then

                For I1 = 0 To 4

                    If plyrOff_GAME!(P9, B1(P9, I1), 12) >= foulsToDQ Then
                        Locate 20, 29
                        Color 14, 0: Print players$(P9, B1(P9, I1)); " HAS FOULED OUT"
                        skipMenu% = 1
                        Exit For

                    End If

                Next

            End If

            If skipMenu% = 0 Then Call PlayStyle

        Else

            If X = 50 And K = ballCarrier And P9 = P Then

                Color 14, 0
                Locate 20, 29: Print players$(P9, B1(P9, K)); " IS AT THE FT LINE"

            Else

                Locate 25, 1: Print Space$(25);

                J = B1(P9, K)
                Z = J
                TM%(P9, J) = gameClock!
                CV% = 0

                For IP% = 0 To Z
                    If rosterStatus(P9, IP%) <> 0 Or players$(P9, IP%) = "" Or players$(P9, IP%) = "XXX" Then
                        CV% = CV% + 1
                    End If
                Next

                Locate J + 3 - CV%, 3
                Color 15, 0: Print Left$(players$(P9, J), 12)
                Locate K + 20, 1: Print Space$(26);

                B1(P9, K) = -1

                Locate , 1
                Color 2: Print Using "# "; K;
                Color 15
                Print "ENTER "; posnName$(K); " # ";

                Do
                    I$ = GetKeyPress$
                    Call LetterToNumber(I$, posn)

                    If posn >= 0 And posn <= 13 And plyrOff_GAME!(P9, posn, 12) < foulsToDQ And players$(P9, posn) <> "XXX" And rosterStatus(P9, posn) = 0 Then
                        For I2 = 0 To 4
                            If B1(P9, I2) = posn Then Exit For
                        Next I2

                    End If

                Loop Until posn >= 0 And posn <= 13

                B1(P9, K) = posn
                Z = posn

                'FATIGUE
                If TM%(P9, posn) - gameClock! > 60 And TM%(P9, posn) < 120 Then tmFatigue(P9, posn) = tmFatigue(P9, posn) + 1
                If TM%(P9, posn) - gameClock! >= 120 Then tmFatigue(P9, posn) = tmFatigue(P9, posn) + 4
                If tmFatigue(P9, posn) > 0 Then tmFatigue(P9, posn) = 0

                CV% = 0
                For IP% = 0 To Z
                    If rosterStatus(P9, IP%) <> 0 Or players$(P9, IP%) = "" Or players$(P9, IP%) = "XXX" Then
                        CV% = CV% + 1
                    End If
                Next

                Print players$(P9, posn);
                Locate posn + 3 - CV%, 3
                Color teamRat_GAME(P9, 0), teamRat_GAME(P9, 1): Print Left$(players$(P9, posn), 12)
                Color 15, 0

            End If

        End If

    Loop Until K = 6

End Sub


'----------------------------------------
'          PlayStyle Subroutine
'----------------------------------------
'This subroutine walks the user through
'the selection of play styles for their
'team on both offense and defense.
Sub PlayStyle ()

    109 '
    Color teamRat_GAME(P9, 0), teamRat_GAME(P9, 1)
    Cls
    Print ; Tab(33); "OFFENSIVE STYLE"
    Print

    For I = 0 To 9
        Locate , 5: Print Using "# "; I;: Print offStyles$(I)
    Next

    Print
    Locate 14, 5: Print "SELECT OFFENSIVE STYLE FOR "; gameTeams$(P9)

    Do
        I$ = GetKeyPress$
        I1 = Val(I$)
    Loop Until I1 >= 0 And I1 <= 9

    If (I1 = 3 Or I1 = 4 Or I1 = 7 Or I1 = 9) And (currHalf < 2 Or currHalf >= 2 And gameClock! > 180) Then
        Beep
        Locate 18, 1: Print "CAN ONLY USE LAST 3 MIN OF 2ND HALF OR OT"
        I$ = GetKeyPress$
        GoTo 109
    End If

    If I1 = 8 And defType(1 - P9) <> 2 Then
        Beep
        Locate 18, 1: Print "DEFENSE NOT IN PASSIVE ZONE"
        I$ = GetKeyPress$
        GoTo 109
    End If

    If I1 = 4 And score(P9, 0) - score(1 - P9, 0) > -11 Then
        Beep
        Locate 18, 1: Print "ILLEGAL SELECTION"
        I$ = GetKeyPress$
        GoTo 109
    End If

    If I1 = 9 And threePtOpt = 0 Then
        Beep
        Locate 18, 1: Print "NOT USING 3 POINT SHOT"
        I$ = GetKeyPress$
        GoTo 109
    End If

    If I1 = 5 And sClockVal = 0 Then
        Beep
        Locate 18, 1: Print "NOT USING SHOT CLOCK"
        I$ = GetKeyPress$
        GoTo 109
    End If

    If I1 = 7 And score(P9, 0) - score(1 - P9, 0) <= 0 Then
        Beep
        Locate 18, 1: Print "ILLEGAL SELECTION"
        I$ = GetKeyPress$
        GoTo 109
    End If

    'How to loop around this with so many conditions?
    'Possibly build a bunch of nested If/Then statements?
    offStrat(P9) = I1
    CZ%(P9) = 0

    If Not (currHalf < 2 Or currHalf >= 2 And gameClock! > 120) Then
        Print "CRASH OFFENSIVE BOARDS (LAST 2 MIN)? (Y/N)";
        I$ = GetKeyPress$
        If UCase$(I$) = "Y" Then CZ%(P9) = 1
    End If

    Call DEFENSEMENU

End Sub


'----------------------------------------
'          FOULSAFE Subroutine
'----------------------------------------
' ...explanation...
Sub FOULSAFE ()

    Cls

    Color 15

    A = 0
    S2 = 1
    S3 = 1
    SW = 0

    For ZZ = 0 To 4
        If plyrOff_GAME!(P9, B1(P9, ZZ), 22) = 50 Then A = A + 1: If SW = 0 Then Print: Print "THE FOLLOWING PLAYER(S) ARE PLAYING SAFE BUT CAN NOW PLAY NORMAL IF YOU WISH": SW = 1
        If plyrOff_GAME!(P9, B1(P9, ZZ), 22) = 50 And SW = 1 And S2 < 6 Then Locate S2 + 3, 1: Print S2; "-"; players$(P9, B1(P9, ZZ)): P5(A) = S2: P4(A) = ZZ: S2 = S2 + 1: S3 = S3 + 1
    Next ZZ

    skipChangeToSafe% = 0

    If SW <> 0 Then

        A = 1
        Print
        Print "Z - CONTINUE"

        Do
            I$ = GetKeyPress$
            If UCase$(I$) = "Z" And MJ = 0 Then Exit Do
            If UCase$(I$) = "Z" And MJ = 25 Then skipChangeToSafe% = 1: Exit Do
            P6 = Val(I$)

            A = P6

            If P6 = P5(P6) Then

                plyrOff_GAME!(P9, B1(P9, P4(A)), 17) = plyrOff_GAME!(P9, B1(P9, P4(A)), 17) * 3
                plyrOff_GAME!(P9, B1(P9, P4(A)), 22) = 0

                Locate P5(A) + 3, 20
                Print players$(P9, B1(P9, P4(A))); " WILL NOW PLAY NORMAL DEFENSE!"
                Call STEALADJ

                dFGPA(P9) = dFGPA(P9) - 1
                A = A + 1
                MJ = 25

            End If

        Loop Until P6 >= 1 And P6 <= (S2 + 1) And P6 <> P5(P6)

    End If

    If skipChangeToSafe% = 0 Then

        A = 0
        S2 = 1

        For ZZ = 0 To 4
            If currHalf <= 1 And plyrOff_GAME!(P9, B1(P9, ZZ), 12) >= foulsToDQ - 3 And plyrOff_GAME!(P9, B1(P9, ZZ), 22) = 0 Or plyrOff_GAME!(P9, B1(P9, ZZ), 12) = foulsToDQ - 1 And plyrOff_GAME!(P9, B1(P9, ZZ), 22) = 0 Then
                A = A + 1
                If S2 = 1 Then Cls: Print: Print "THE FOLLOWING PLAYER(S) CAN ME MADE TO PLAY SAFE IF YOU WISH": Print
            End If

            If A = 0 And ZZ > 3 Then 1230

            If S2 = A And S2 < 6 Then Print S2; "- "; players$(P9, B1(P9, ZZ)): P5(A) = S2: P4(A) = ZZ: S2 = S2 + 1: S3 = S3 + 1

        Next ZZ

        A = 1
        Print
        Print "Z - CONTINUE"

        1220 '
        Do
            I$ = GetKeyPress$
            P6 = Val(I$)
        Loop Until P6 >= 1 And P6 <= (S2 + 1) Or UCase$(I$) = "Z"

        If UCase$(I$) <> "Z" Then

            A = P6

            If P6 = P5(P6) Then

                plyrOff_GAME!(P9, B1(P9, P4(A)), 17) = Int((plyrOff_GAME!(P9, B1(P9, P4(A)), 17) + 1) / 3)
                plyrOff_GAME!(P9, B1(P9, P4(A)), 22) = 50

                Locate P5(A) + 3, 20: Print players$(P9, B1(P9, P4(A))); " WILL NOW PLAY SAFE!"
                Call STEALADJ

                dFGPA(P9) = dFGPA(P9) + 1
                A = A + 1
                S3 = S3 + 1

                GoTo 1220

            End If

        End If

    End If

    1230 '
    MJ = 0

    FO = 99

    If currHalf = 1 And gameClock! = 1200 Then FO = 0

    'Call UPDATESCREEN
    Call SCOREBOARD

End Sub


'----------------------------------------
'          FOULSAFE Subroutine
'----------------------------------------
' ...explanation...
Sub FOULHARD ()

    For I = 0 To 1

        For I1 = 0 To 13
            If plyrOff_GAME!(I, I1, 22) = 50 Then
                plyrOff_GAME!(I, I1, 22) = 0
                plyrOff_GAME!(I, I1, 17) = plyrOff_GAME!(I, I1, 17) * 3
                dFGPA(I) = dFGPA(I) - 1: MJ = 50
            End If
        Next I1

        If MJ = 50 Then
            MJ = 0
            teamAdj(I, 0) = 0
            For I1 = 0 To 4:
                teamAdj(I, 0) = teamAdj(I, 0) + plyrOff_GAME!(I, B1(I, I1), 17)
            Next I1
        End If

    Next I

End Sub


'----------------------------------------
'          STEALADJ Subroutine
'----------------------------------------
' ...explanation...
Sub STEALADJ ()

    For I = 0 To 1
        teamAdj(I, 0) = 0
        teamAdj(I, 1) = 0
        For I1 = 0 To 4
            teamAdj(I, 0) = teamAdj(I, 0) + plyrOff_GAME!(I, B1(I, I1), 17)
            teamAdj(I, 1) = teamAdj(I, 1) + plyrOff_GAME!(I, B1(I, I1), 18)
        Next I1
    Next I

End Sub


'----------------------------------------
'         SHOTPERCENT Subroutine
'----------------------------------------
'This subroutine calculates the chance of
'a shot being made based on the active
'defense / offense / players.
Sub SHOTPERCENT ()

    FX% = plyrOff_GAME!(P, B1(P, ballCarrier), 0) + TP%(D) + TP%(P)
    TP%(D) = 0
    TP%(P) = 0

    If tmFatigue(P, B1(P, ballCarrier)) <= -5 Then FX% = FX% - 10

    F! = FX% + dFGPA(D) + D8(0, defType(D))
    J8% = 0

    'Improve chance for homefield advantage
    If gameLoc = P Then
        F! = F! + homeCtFactor(0, teamRat_GAME(P, 6))
    Else
        If gameLoc <> 2 Then F! = F! + homeCtFactor(1, teamRat_GAME(P, 6))
    End If

    F3S% = Int(Rnd(1) * 100) + 1
    TPA% = 0

    Select Case defStrat(D)

        Case 1, 6, 9, 11
            TPA% = -5

        Case 2, 7, 12
            TPA% = 3

    End Select

    skipCalcs% = 0

    'plyOff(.., 19) = ORBs
    'teamAdj(D, 3) = d3FGA_Adj for DEFENSE
    If offStrat(P) = 9 Then

        'Strategy = Shoot only 3's
        If (F3S% > plyrOff_GAME!(P, B1(P, ballCarrier), 19) + teamAdj(D, 3) + TPA% Or plyrOff_GAME!(P, B1(P, ballCarrier), 19) = 0) Then
            F3S% = Int(Rnd(1) * 5) + 11
            J8% = 1
        End If

    Else

        If F3S% > plyrOff_GAME!(P, B1(P, ballCarrier), 19) + teamAdj(D, 3) + TPA% Or plyrOff_GAME!(P, B1(P, ballCarrier), 19) = 0 Then

            'Odd that it calculates a % here when a shot won't be taken
            F3S% = Int(Rnd(1) * 5) + 3
            J8% = 0

        Else

            FX% = plyrOff_GAME!(P, B1(P, ballCarrier), 20)

            If tmFatigue(P, B1(P, ballCarrier)) <= -5 Then
                FX% = Int(FX% * .67 + .5)
            End If

            'If more than 2 minutes in half and (ContribPct - FGA - Rebounds - Fouls) <= 0
            If (currHalf < 3 And gameClock! > 120) And (plyrOff_GAME!(P, B1(P, ballCarrier), 3) - plyrOff_GAME!(P, B1(P, ballCarrier), 7) - plyrOff_GAME!(P, B1(P, ballCarrier), 11) - plyrOff_GAME!(P, B1(P, ballCarrier), 12) <= 0) Then
                F3S% = Int(Rnd(1) * 5) + 3
                J8% = 0
            Else
                F3S% = FX% + teamAdj(D, 2)
                J8% = 1
            End If

        End If

    End If

End Sub


'----------------------------------------
'           THREEFT Subroutine
'----------------------------------------
'This subroutine walks the user through
'taking 3 free throw attempts.
Sub THREEFT ()

    plyrOff_GAME!(P, B1(P, ballCarrier), 10) = plyrOff_GAME!(P, B1(P, ballCarrier), 10) + 1

    Call d100(RN0)

    Select Case F3

        Case 1
            If RN0 <= 50 Then
                pbpString$ = "FREE THROW IS GOOD"
            Else
                pbpString$ = "HE HITS THE FIRST FREE THROW"
            End If

        Case 2
            If RN0 <= 50 Then
                pbpString$ = "SECOND FREE THROW IS GOOD"
            Else
                pbpString$ = "HE HITS THE SECOND ONE"
            End If

        Case 3
            If RN0 <= 50 Then
                pbpString$ = "THIRD FREE THROW IS GOOD"
            Else
                pbpString$ = "HE HITS THE LAST ONE"
            End If

    End Select

    Call PBP

    score(P, currHalf) = score(P, currHalf) + 1
    score(P, 0) = score(P, 0) + 1

    Call UPDATESCREEN

End Sub


'----------------------------------------
'           MADEFT Subroutine
'----------------------------------------
'This subroutine handles score, stats and
'Play-by-Play for a successful free throw
Sub MADEFT ()

    plyrOff_GAME!(P, B1(P, ballCarrier), 10) = plyrOff_GAME!(P, B1(P, ballCarrier), 10) + 1

    If pbpDelay! <> 0 Then
        Locate F3 + 9, 1
        Call DELAY
        Print F3; " GOOD"
    End If

    score(P, currHalf) = score(P, currHalf) + 1
    score(P, 0) = score(P, 0) + 1

    Call UPDATESCREEN
    Call DELAY

End Sub


'----------------------------------------
'           MISSFT Subroutine
'----------------------------------------
'This subroutine handles Play-by-Play
'for a missed free throw
Sub MISSFT ()

    If pbpDelay! <> 0 Then
        Call DELAY
        Locate F3 + 9, 1
        Print F3; " MISSED"
        Call DELAY
    End If

End Sub


'----------------------------------------
'            BADFT Subroutine
'----------------------------------------
'This subroutine handles Play-by-Play for
'missed FT's when there are 3 attempts.
Sub BADFT ()

    Select Case F3
        Case 1 
            pbpString$ = "FIRST FREE THROW IS MISSED"
        Case 2
            pbpString$ = "SECOND FREE THROW IS MISSED"
        Case 3
            pbpString$ = "THIRD FREE THROW IS MISSED"
    End Select

    Call PBP

End Sub


'----------------------------------------
'           PRDFAT Subroutine
'----------------------------------------
'This subroutine calculates fatigue of the
'defense due pressure on the defense.
Sub PRDFAT ()

    For I = 0 To 4

        RN0 = Int(Rnd(1) * 100) + 1

        If RN0 <= X0% Then
            tmFatigue(D, B1(D, I)) = tmFatigue(D, B1(D, I)) + X1%
        Else
            tmFatigue(D, B1(D, I)) = tmFatigue(D, B1(D, I)) + X1% + 1
        End If

        If tmFatigue(D, B1(D, I)) > 0 Then tmFatigue(D, B1(D, I)) = 0
        If tmFatigue(D, B1(D, I)) < -5 Then tmFatigue(D, B1(D, I)) = -5

    Next

End Sub


'----------------------------------------
'           PRDFAT Subroutine
'----------------------------------------
'This subroutine calculates fatigue of the
'defense due pressure on the defense.
Sub PRPFAT ()

    For I = 0 To 4

        RN0 = Int(Rnd(1) * 100) + 1

        If RN0 <= X0% Then
            tmFatigue(P, B1(P, I)) = tmFatigue(P, B1(P, I)) + X1%
        Else
            tmFatigue(P, B1(P, I)) = tmFatigue(P, B1(P, I)) + X1% + 1
        End If

        If tmFatigue(P, B1(P, I)) > 0 Then tmFatigue(P, B1(P, I)) = 0
        If tmFatigue(P, B1(P, I)) < -5 Then tmFatigue(P, B1(P, I)) = -5

    Next

End Sub


'----------------------------------------
'         WHOGESTBALL Subroutine
'----------------------------------------
'...explanation...
Sub WHOGETSBALL ()

    CNT% = 0

    While (CNT% < 4)

        1041 '
        CNT% = CNT% + 1

        If CNT% <> 4 Then

            M9 = 0
            ballCarrier = Int(Rnd(1) * 5)
            RN0 = Int(Rnd(1) * 100) + 1

            If RN0 > 25 Then

                For I = 0 To 4
                    M8 = Int(plyrRat_GAME(P, B1(P, I), 1) / plyrRat_GAME(P, B1(P, I), 0) + .5) - plyrOff_GAME!(P, B1(P, I), 7)
                    If M8 <= 0 Then M8 = 0
                    If M8 >= M9 Then ballCarrier = I: M9 = M8
                Next I

            End If

            M8 = plyrOff_GAME!(P, B1(P, ballCarrier), 3) - plyrOff_GAME!(P, B1(P, ballCarrier), 7) - plyrOff_GAME!(P, B1(P, ballCarrier), 11) - plyrOff_GAME!(P, B1(P, ballCarrier), 12)

            If plyrOff_GAME!(P, B1(P, ballCarrier), 4) >= 5 And M8 / plyrOff_GAME!(P, B1(P, ballCarrier), 3) <= 0.4 And currHalf = 1 Then 1041
            If plyrOff_GAME!(P, B1(P, ballCarrier), 4) >= 5 And M8 / plyrOff_GAME!(P, B1(P, ballCarrier), 3) <= 0.2 And currHalf = 2 And gameClock! > 120 Then 1041
            If plyrOff_GAME!(P, B1(P, ballCarrier), 3) < 10 And plyrOff_GAME!(P, B1(P, ballCarrier), 4) >= 5 And M8 / plyrOff_GAME!(P, B1(P, ballCarrier), 3) <= 0.75 And currHalf = 1 Then 1041
            If plyrOff_GAME!(P, B1(P, ballCarrier), 3) < 10 And plyrOff_GAME!(P, B1(P, ballCarrier), 4) >= 5 And M8 / plyrOff_GAME!(P, B1(P, ballCarrier), 3) <= 0.5 And currHalf = 2 And gameClock! > 120 Then 1041
            GoTo 1041

        End If

    Wend

End Sub


'----------------------------------------
'       BALLDISTRIBUTE Subroutine
'----------------------------------------
' ...explanation...
Sub BALLDISTRIBUTE ()

    RN0 = Int(Rnd(1) * 100) + 1

    If playerMode = 0 And coachOpt = 1 Or playerMode = 1 And D = compTeam And coachOpt = 1 Or playerMode = 1 And P = compTeam Or playerMode = 2 Then
        Call WHOGETSBALL
    Else
        'Select / Case statement
        If defType(D) = 2 Or defType(D) = 3 Then 415
        If S9 <= 90 And RN0 <= 15 Then 424
        If S9 <= 100 And RN0 <= 20 Then 424
        If S9 <= 110 And RN0 <= 25 Then 424
        If S9 <= 120 And RN0 <= 30 Then 424
        If S9 <= 130 And RN0 <= 38 Then 424
        If S9 <= 140 And RN0 <= 53 Then 424
        If S9 <= 150 And RN0 <= 60 Then 424
        If S9 > 150 And RN0 <= 67 Then 424
        GoTo 423

        '----------

        'Select / Case statement
        415 '
        If S9 <= 90 And RN0 <= 8 Then 424
        If S9 <= 100 And RN0 <= 10 Then 424
        If S9 <= 110 And RN0 <= 13 Then 424
        If S9 <= 120 And RN0 <= 15 Then 424
        If S9 <= 130 And RN0 <= 18 Then 424
        If S9 <= 140 And RN0 <= 53 Then 424
        If S9 <= 150 And RN0 <= 60 Then 424
        If S9 > 150 And RN0 <= 67 Then 424

        423 '
        ballCarrier = Int(Rnd(1) * 5)
        GoTo 427

        '----------

        Do
            424 '
            If pbpDelay! <> 0 And pbpOpt = 0 Then
                pbpString$ = "PASS TO CHOICE (0-4)"
                Call PBP
            End If

            If pbpDelay! > 0 And pbpOpt = 1 Then
                For I = 8 To 15
                    Locate I, 1
                    Call BLANKLINE
                Next I
                Locate 8, 1
                Print "PASS TO CHOICE (0-4)"
                Call DELAY
            End If

            I$ = GetKeyPress$

            Select Case UCase$(I$)

                Case "T"
                    Call TICKER
                    Call SCOREBOARD

                Case "Q"
                    Cls
                    End

                Case "O"
                    Call OPTIONS

                Case Else
                    ballCarrier = Val(I$)

            End Select

        Loop Until ballCarrier >= 0 And ballCarrier <= 4

    End If

    427 '

End Sub


'----------------------------------------
'       DEADBALLOPTIONS Subroutine
'----------------------------------------
'This subroutine handles any deadball
'situations. If not computer controlled,
'the user is given a chance to handle
'any changes to lineup, strategy, players.
Sub DEADBALLOPTIONS ()

    Do

        220 '
        prevBall$ = ""
        Call CLEARPBP

        'Substitutions for computer teams
        If playerMode = 2 Then
            P9 = 0
            Call COMPUTERSUBS
            Call FATIGUE
            P9 = 1
            Call COMPUTERSUBS
            Call FATIGUE
        End If

        If playerMode = 1 Then
            P9 = compTeam
            Call COMPUTERSUBS
            Call FATIGUE
        End If

        FO = 0
        XM = 0

        Call CLEARPBPBOX

        'Present user options
        If playerMode = 2 Then
            S2 = 0
            P9 = P
            C1 = 2
            Call CheckGameClock
            Call STEALADJ
        Else

            Locate 9, 1
            Color 14, 0
            Print "<ENTER>";
            Color 15,0
            Print "-CONTINUE"
            Print "1-SUB "; gameTeams$(P)
            Print "2-SUB "; gameTeams$(D)
            Print "3-CHANGE STRATEGY "; gameTeams$(P)
            Print "4-CHANGE STRATEGY "; gameTeams$(D)
            Print "5-TIME OUT "; gameTeams$(P)
            Print "6-TIME OUT "; gameTeams$(D)

            221 '
            I$ = GetKeyPress$
            P3 = Val(I$)

            If P3 < 1 Or P3 > 6 Or playerMode = 1 And (P3 = 1 Or P3 = 3 Or P3 = 5 And timeouts(P) <= 0) And P = compTeam Or playerMode = 1 And (P3 = 2 Or P3 = 4 Or P3 = 6 And timeouts(D) <= 0) And D = compTeam Then

                'This is essentially for automated input,
                'or anything outside 1-6 (ie, press ENTER)
                S2 = 0
                P9 = P
                C1 = 2
                Call CheckGameClock
                Call STEALADJ

                If LC% = 1 Then
                    LC% = 0
                    Call CheckGameClock
                    Call SCOREBOARD
                End If

                If pbpDelay! <> 0 Then
                    For I = 8 To 15:
                        Locate I, 1
                        Call BLANKLINE
                    Next I
                End If

            Else

                Select Case P3

                    Case 1
                        'Substitution - Offense
                        S2 = P
                        C1 = 1
                        P9 = S2
                        Call LINEUPS
                        Call FOULSAFE
                        P9 = P
                        LC% = 1

                        'GoTo 220

                    Case 2
                        'Substitution - Defense
                        S2 = D
                        C1 = 1
                        P9 = S2
                        Call LINEUPS
                        Call FOULSAFE
                        P9 = P
                        LC% = 1

                    Case 3
                        'Strategy - Offense
                        P9 = P
                        Call PlayStyle
                        Call SCOREBOARD

                    Case 4
                        'Strategy - Defense
                        P9 = D
                        Call PlayStyle
                        Call SCOREBOARD

                    Case 5
                        'Timeouts - Offense
                        If timeouts(P) <= 0 Or P3 = 6 And timeouts(D) <= 0 Then
                            GoTo 221
                        Else
                            timeouts(P) = timeouts(P) - 1
                            Call RESETFATIGUE
                            Call SCOREBOARD
                            'GoTo 220
                        End If

                    Case 6
                        'Timeouts - Defense
                        timeouts(D) = timeouts(D) - 1
                        Call RESETFATIGUE
                        Call SCOREBOARD

                End Select

            End If 'Done checking input

        End If 'Done checking computer control

    Loop Until P3 = 0 Or playerMode = 2

End Sub


'----------------------------------------
'        RESETFATIGUE Subroutine
'----------------------------------------
'This subroutine resets player fatigue
'levels for a fresh start.
Sub RESETFATIGUE ()

    For I = 0 To 1

        For I1 = 0 To 1
            PR%(I, I1) = 0
        Next

    Next

    For I = 0 To 1

        For I1 = 0 To 13
            tmFatigue(I, I1) = tmFatigue(I, I1) + 1
            If tmFatigue(I, I1) > 0 Then tmFatigue(I, I1) = 0
        Next

    Next

End Sub


'------------------------------
'    STOPPAGE Subroutine
'------------------------------
' ...explanation...
Sub STOPPAGE ()

    810 '
    Call CLEARPBP

    If playerMode <> 0 Then

        'Computer team substitutions
        If playerMode = 2 Then
            P9 = 0
            Call COMPUTERSUBS
            Call FATIGUE: P9 = 1
            Call COMPUTERSUBS
            Call FATIGUE
        End If

        If playerMode = 1 Then
            P9 = compTeam
            Call COMPUTERSUBS
            Call FATIGUE
        End If

        XM = 0

    End If

    If playerMode = 2 Then
        S2 = 0
        P9 = P
        C1 = 2
        Call CheckGameClock
    Else

        If pbpOpt = 0 Then Call CLEARPBPBOX
        If pbpOpt = 1 And pbpDelay! <> 0 Then Locate 11, 1

        Color 14, 0
        Print "<ENTER>";
        Color 15,0
        Print "-CONTINUE"
        Print "1-TIME OUT "; gameTeams$(P)
        Print "2-TIME OUT "; gameTeams$(D)
        Print "3-CHANGE STRATEGY "; gameTeams$(P)
        Print "4-CHANGE STRATEGY "; gameTeams$(D)

        813 '
        I$ = GetKeyPress$
        P3 = Val(I$)

        If P3 < 1 Or P3 > 4 Then
            S2 = 0
            P9 = P
            C1 = 2
            Call CheckGameClock
        Else

            'Can't do timeout?
            If P3 = 1 And timeouts(P) <= 0 Or P3 = 2 And timeouts(D) <= 0 Or (P3 = 1 Or P3 = 3) And P = compTeam And playerMode = 1 Or (P3 = 2 Or P3 = 4) And D = compTeam And playerMode = 1 Then 813

            'Strategy - Offense
            If P3 = 3 Then
                P9 = P
                Call PlayStyle
                Call SCOREBOARD
                GoTo 810
            End If

            'Strategy - Defense
            If P3 = 4 Then
                P9 = D
                Call PlayStyle
                Call SCOREBOARD
                GoTo 810
            End If

            For I = 0 To 1
                For I1 = 0 To 1
                    PR%(I, I1) = 0
                Next
            Next

            'Timeout - Offense
            If P3 = 1 Then
                timeouts(P) = timeouts(P) - 1
                Color 14, 0
                Call SCOREBOARD
                Call DEADBALLOPTIONS
            End If

            'Timeout - Defense
            If P3 = 2 Then
                timeouts(D) = timeouts(D) - 1
                Color 14, 0
                Call SCOREBOARD
                Call DEADBALLOPTIONS
            End If

        End If

        Call CLEARPBPBOX

    End If

End Sub


'----------------------------------------
'         PRESSGUARD Subroutine
'----------------------------------------
'This subroutine handles PBP and stats
'for when a Guard is pressing
Sub PRESSGUARD ()

    Call WINDEX

    If pbpDelay! <> 0 Then
        If P7(D) > 0 Then
            pbpString$ = gameTeams$(D) + " IS PRESSING"
            Call SELECTPBP
        End If
    End If

    If P7(D) <> 0 And P7(D) <= 2 Then

        If playerMode = 2 Or playerMode = 1 And P = compTeam Then
            ' COMPUTER GUARD FOR PRESS
            BU% = 1
            If plyrOff_GAME!(P, B1(P, 0), 4) >= plyrOff_GAME!(P, B1(P, 1), 4) And tmFatigue(P, B1(P, 0)) <= 3 Then BU% = 0

        Else
            Call FRAMEOPTION(8, P)
            Locate 10, 15

            Print gameTeams$(P); " SELECT GUARD TO HANDLE BALL:"

            Locate 12, 14
            Locate , 14: Print "#   NAME"; Tab(35); "PA"; Tab(38); "FA"
            Locate , 14: Print "0 - "; players$(P, B1(P, 0)); Tab(35); plyrOff_GAME!(P, B1(P, 0), 4); Tab(38); Abs(tmFatigue(P, B1(P, 0)))
            Locate , 14: Print "1 - "; players$(P, B1(P, 1)); Tab(35); plyrOff_GAME!(P, B1(P, 1), 4); Tab(38); Abs(tmFatigue(P, B1(P, 1)))

            Do
                I$ = GetKeyPress$
                I1 = Val(I$)
            Loop Until I1 >= 0 And I1 <= 1

            BU% = I1
            Color 15, 0
            Call SCOREBOARD

        End If

    End If

End Sub


'----------------------------------------
'        QUARTERTOTAL Subroutine
'----------------------------------------
'This subroutine calculates quarter totals
'for all stat categories right before the
'period end
Sub QUARTERTOTAL ()

    For I = 0 To 1

        Erase statTotals

        For I1 = 0 To 13
            statTotals(0) = statTotals(0) + plyrOff_GAME!(I, I1, 8)
            statTotals(1) = statTotals(1) + plyrOff_GAME!(I, I1, 7)
            statTotals(2) = statTotals(2) + plyrOff_GAME!(I, I1, 10)
            statTotals(3) = statTotals(3) + plyrOff_GAME!(I, I1, 9)
            statTotals(4) = statTotals(4) + plyrOff_GAME!(I, I1, 11)
            statTotals(5) = statTotals(5) + (plyrOff_GAME!(I, I1, 8) * 2) + plyrOff_GAME!(I, I1, 10) + threeFG(I, I1, 0)
            statTotals(13) = statTotals(13) + threeFG(I, I1, 0)
            statTotals(14) = statTotals(14) + threeFG(I, I1, 1)
            statTotals(6) = statTotals(6) + plyrOff_GAME!(I, I1, 12)
            statTotals(7) = statTotals(7) + plyrOff_GAME!(I, I1, 14)
            statTotals(8) = statTotals(8) + plyrOff_GAME!(I, I1, 15)
            statTotals(9) = statTotals(9) + plyrOff_GAME!(I, I1, 13)
            statTotals(11) = statTotals(11) + plyrOff_GAME!(I, I1, 24)
            statTotals(12) = statTotals(12) + plyrOff_GAME!(I, I1, 23)
        Next

        If currHalf = 1 Or currHalf = 2 Then

            For I2 = 0 To 14
                QR(I, currHalf, I2) = statTotals(I2) - QR(I, currHalf - 1, I2)
            Next

            For I1 = 0 To 13

                For I2 = 7 To 15
                    QQ(I, currHalf, I1, I2 - 6) = plyrOff_GAME!(I, I1, I2) - QQ(I, currHalf - 1, I1, I2 - 6)
                Next

                QQ(I, currHalf, I1, 10) = threeFG(I, I1, 0) - QQ(I, currHalf - 1, I1, 10)
                QQ(I, currHalf, I1, 11) = threeFG(I, I1, 1) - QQ(I, currHalf - 1, I1, 11)
                QQ(I, currHalf, I1, 12) = plyrOff_GAME!(I, I1, 24) - QQ(I, currHalf - 1, I1, 12)
                QQ(I, currHalf, I1, 13) = plyrOff_GAME!(I, I1, 8) * 2 + plyrOff_GAME!(I, I1, 10) + threeFG(I, I1, 0) - QQ(I, currHalf - 1, I1, 13)
                QQ(I, currHalf, I1, 14) = plyrOff_GAME!(I, I1, 23) - QQ(I, currHalf - 1, I1, 14)

            Next

        End If

        If currHalf = 3 Then

            For I2 = 0 To 14
                QR(I, currHalf, I2) = statTotals(I2) - QR(I, currHalf - 1, I2) - QR(I, currHalf - 2, I2)
            Next

            For I1 = 0 To 13

                For I2 = 7 To 15
                    QQ(I, currHalf, I1, I2 - 6) = plyrOff_GAME!(I, I1, I2) - QQ(I, currHalf - 1, I1, I2 - 6) - QQ(I, currHalf - 2, I1, I2 - 6)
                Next

                QQ(I, currHalf, I1, 10) = threeFG(I, I1, 0) - QQ(I, currHalf - 1, I1, 10) - QQ(I, currHalf - 2, I1, 10)
                QQ(I, currHalf, I1, 11) = threeFG(I, I1, 1) - QQ(I, currHalf - 1, I1, 11) - QQ(I, currHalf - 2, I1, 11)
                QQ(I, currHalf, I1, 12) = plyrOff_GAME!(I, I1, 24) - QQ(I, currHalf - 1, I1, 12) - QQ(I, currHalf - 2, I1, 12)
                QQ(I, currHalf, I1, 13) = plyrOff_GAME!(I, I1, 8) * 2 + plyrOff_GAME!(I, I1, 10) + threeFG(I, I1, 0) - QQ(I, currHalf - 1, I1, 13) - QQ(I, currHalf - 2, I1, 13)
                QQ(I, currHalf, I1, 14) = plyrOff_GAME!(I, I1, 23) - QQ(I, currHalf - 1, I1, 14) - QQ(I, currHalf - 2, I1, 14)

            Next

        End If

        If currHalf = 4 Then

            For I2 = 0 To 14
                QR(I, currHalf, I2) = statTotals(I2) - QR(I, currHalf - 1, I2) - QR(I, currHalf - 2, I2) - QR(I, currHalf - 3, I2)
            Next

            For I1 = 0 To 13

                For I2 = 7 To 15
                    QQ(I, currHalf, I1, I2 - 6) = plyrOff_GAME!(I, I1, I2) - QQ(I, currHalf - 1, I1, I2 - 6) - QQ(I, currHalf - 2, I1, I2 - 6) - QQ(I, currHalf - 3, I1, I2 - 6)
                Next

                QQ(I, currHalf, I1, 10) = threeFG(I, I1, 0) - QQ(I, currHalf - 1, I1, 10) - QQ(I, currHalf - 2, I1, 10) - QQ(I, currHalf - 3, I1, 10)
                QQ(I, currHalf, I1, 11) = threeFG(I, I1, 1) - QQ(I, currHalf - 1, I1, 11) - QQ(I, currHalf - 2, I1, 11) - QQ(I, currHalf - 3, I1, 11)
                QQ(I, currHalf, I1, 12) = plyrOff_GAME!(I, I1, 24) - QQ(I, currHalf - 1, I1, 12) - QQ(I, currHalf - 2, I1, 12) - QQ(I, currHalf - 3, I1, 12)
                QQ(I, currHalf, I1, 13) = plyrOff_GAME!(I, I1, 8) * 2 + plyrOff_GAME!(I, I1, 10) + threeFG(I, I1, 0) - QQ(I, currHalf - 1, I1, 13) - QQ(I, currHalf - 2, I1, 13) - QQ(I, currHalf - 3, I1, 13)
                QQ(I, currHalf, I1, 14) = plyrOff_GAME!(I, I1, 23) - QQ(I, currHalf - 1, I1, 14) - QQ(I, currHalf - 2, I1, 14) - QQ(I, currHalf - 3, I1, 14)

            Next

        End If

        If currHalf = 5 Then

            For I2 = 0 To 14
                QR(I, currHalf, I2) = statTotals(I2) - QR(I, currHalf - 1, I2) - QR(I, currHalf - 2, I2) - QR(I, currHalf - 3, I2) - QR(I, currHalf - 4, I2)
            Next

            For I1 = 0 To 13

                For I2 = 7 To 15
                    QQ(I, currHalf, I1, I2 - 6) = plyrOff_GAME!(I, I1, I2) - QQ(I, currHalf - 1, I1, I2 - 6) - QQ(I, currHalf - 2, I1, I2 - 6) - QQ(I, currHalf - 3, I1, I2 - 6) - QQ(I, currHalf - 4, I1, I2 - 6)
                Next

                QQ(I, currHalf, I1, 10) = threeFG(I, I1, 0) - QQ(I, currHalf - 1, I1, 10) - QQ(I, currHalf - 2, I1, 10) - QQ(I, currHalf - 3, I1, 10) - QQ(I, currHalf - 4, I1, 10)
                QQ(I, currHalf, I1, 11) = threeFG(I, I1, 1) - QQ(I, currHalf - 1, I1, 11) - QQ(I, currHalf - 2, I1, 11) - QQ(I, currHalf - 3, I1, 11) - QQ(I, currHalf - 4, I1, 11)
                QQ(I, currHalf, I1, 12) = plyrOff_GAME!(I, I1, 24) - QQ(I, currHalf - 1, I1, 12) - QQ(I, currHalf - 2, I1, 12) - QQ(I, currHalf - 3, I1, 12) - QQ(I, currHalf - 4, I1, 12)
                QQ(I, currHalf, I1, 13) = plyrOff_GAME!(I, I1, 8) * 2 + plyrOff_GAME!(I, I1, 10) + threeFG(I, I1, 0) - QQ(I, currHalf - 1, I1, 13) - QQ(I, currHalf - 2, I1, 13) - QQ(I, currHalf - 3, I1, 13) - QQ(I, currHalf - 4, I1, 13)
                QQ(I, currHalf, I1, 14) = plyrOff_GAME!(I, I1, 23) - QQ(I, currHalf - 1, I1, 14) - QQ(I, currHalf - 2, I1, 14) - QQ(I, currHalf - 3, I1, 14) - QQ(I, currHalf - 4, I1, 14)

            Next

        End If

        If currHalf = 6 Then

            For I2 = 0 To 14
                QR(I, currHalf, I2) = statTotals(I2) - QR(I, currHalf - 1, I2) - QR(I, currHalf - 2, I2) - QR(I, currHalf - 3, I2) - QR(I, currHalf - 4, I2) - QR(I, currHalf - 5, I2)
            Next

            For I1 = 0 To 13

                For I2 = 7 To 15
                    QQ(I, currHalf, I1, I2 - 6) = plyrOff_GAME!(I, I1, I2) - QQ(I, currHalf - 1, I1, I2 - 6) - QQ(I, currHalf - 2, I1, I2 - 6) - QQ(I, currHalf - 3, I1, I2 - 6) - QQ(I, currHalf - 4, I1, I2 - 6) - QQ(I, currHalf - 5, I1, I2 - 6)
                Next

                QQ(I, currHalf, I1, 10) = threeFG(I, I1, 0) - QQ(I, currHalf - 1, I1, 10) - QQ(I, currHalf - 2, I1, 10) - QQ(I, currHalf - 3, I1, 10) - QQ(I, currHalf - 4, I1, 10) - QQ(I, currHalf - 5, I1, 10)
                QQ(I, currHalf, I1, 11) = threeFG(I, I1, 1) - QQ(I, currHalf - 1, I1, 11) - QQ(I, currHalf - 2, I1, 11) - QQ(I, currHalf - 3, I1, 11) - QQ(I, currHalf - 4, I1, 11) - QQ(I, currHalf - 5, I1, 11)
                QQ(I, currHalf, I1, 12) = plyrOff_GAME!(I, I1, 24) - QQ(I, currHalf - 1, I1, 12) - QQ(I, currHalf - 2, I1, 12) - QQ(I, currHalf - 3, I1, 12) - QQ(I, currHalf - 4, I1, 12) - QQ(I, currHalf - 5, I1, 12)
                QQ(I, currHalf, I1, 13) = plyrOff_GAME!(I, I1, 8) * 2 + plyrOff_GAME!(I, I1, 10) + threeFG(I, I1, 0) - QQ(I, currHalf - 1, I1, 13) - QQ(I, currHalf - 2, I1, 13) - QQ(I, currHalf - 3, I1, 13) - QQ(I, currHalf - 4, I1, 13) - QQ(I, currHalf - 5, I1, 13)
                QQ(I, currHalf, I1, 14) = plyrOff_GAME!(I, I1, 23) - QQ(I, currHalf - 1, I1, 14) - QQ(I, currHalf - 2, I1, 14) - QQ(I, currHalf - 3, I1, 14) - QQ(I, currHalf - 4, I1, 14) - QQ(I, currHalf - 5, I1, 14)

            Next

        End If

        If currHalf = 7 Then

            For I2 = 0 To 14
                QR(I, currHalf, I2) = statTotals(I2) - QR(I, currHalf - 1, I2) - QR(I, currHalf - 2, I2) - QR(I, currHalf - 3, I2) - QR(I, currHalf - 4, I2) - QR(I, currHalf - 5, I2) - QR(I, currHalf - 6, I2)
            Next

            For I1 = 0 To 13

                For I2 = 7 To 15
                    QQ(I, currHalf, I1, I2 - 6) = plyrOff_GAME!(I, I1, I2) - QQ(I, currHalf - 1, I1, I2 - 6) - QQ(I, currHalf - 2, I1, I2 - 6) - QQ(I, currHalf - 3, I1, I2 - 6) - QQ(I, currHalf - 4, I1, I2 - 6) - QQ(I, currHalf - 5, I1, I2 - 6) - QQ(I, currHalf - 6, I1, I2 - 6)
                Next

                QQ(I, currHalf, I1, 10) = threeFG(I, I1, 0) - QQ(I, currHalf - 1, I1, 10) - QQ(I, currHalf - 2, I1, 10) - QQ(I, currHalf - 3, I1, 10) - QQ(I, currHalf - 4, I1, 10) - QQ(I, currHalf - 5, I1, 10) - QQ(I, currHalf - 6, I1, 10)
                QQ(I, currHalf, I1, 11) = threeFG(I, I1, 1) - QQ(I, currHalf - 1, I1, 11) - QQ(I, currHalf - 2, I1, 11) - QQ(I, currHalf - 3, I1, 11) - QQ(I, currHalf - 4, I1, 11) - QQ(I, currHalf - 5, I1, 11) - QQ(I, currHalf - 6, I1, 11)
                QQ(I, currHalf, I1, 12) = plyrOff_GAME!(I, I1, 24) - QQ(I, currHalf - 1, I1, 12) - QQ(I, currHalf - 2, I1, 12) - QQ(I, currHalf - 3, I1, 12) - QQ(I, currHalf - 4, I1, 12) - QQ(I, currHalf - 5, I1, 12) - QQ(I, currHalf - 6, I1, 12)
                QQ(I, currHalf, I1, 13) = plyrOff_GAME!(I, I1, 8) * 2 + plyrOff_GAME!(I, I1, 10) + threeFG(I, I1, 0) - QQ(I, currHalf - 1, I1, 13) - QQ(I, currHalf - 2, I1, 13) - QQ(I, currHalf - 3, I1, 13) - QQ(I, currHalf - 4, I1, 13) - QQ(I, currHalf - 5, I1, 13) - QQ(I, currHalf - 6, I1, 13)
                QQ(I, currHalf, I1, 14) = plyrOff_GAME!(I, I1, 23) - QQ(I, currHalf - 1, I1, 14) - QQ(I, currHalf - 2, I1, 14) - QQ(I, currHalf - 3, I1, 14) - QQ(I, currHalf - 4, I1, 14) - QQ(I, currHalf - 5, I1, 14) - QQ(I, currHalf - 6, I1, 14)

            Next

        End If

    Next

    Erase statTotals

End Sub


'----------------------------------------
'        COMPUTERCOACH Subroutine
'----------------------------------------
'This subroutine guides the computer AI
'in how to handle it's strategy.
Sub COMPUTERCOACH ()

    If P9 = 0 Then I6 = 1
    If P9 = 1 Then I6 = 0

    If score(P9, 0) - score(I6, 0) < 0 Then

        I5 = score(I6, 0) - score(P9, 0)

        RN0 = Int(Rnd(1) * 100) + 1
        If currHalf = 1 And RN0 > 37 Then defType(P9) = 0: P7(P9) = 0: defStrat(P9) = 0
        If currHalf = 1 And RN0 > 10 And RN0 <= 36 Then defType(P9) = 2: P7(P9) = 0: defStrat(P9) = 2
        If currHalf = 1 And RN0 > 5 And RN0 <= 10 Then defType(P9) = 3: P7(P9) = 0: defStrat(P9) = 3
        If currHalf = 1 And RN0 <= 5 Then defType(P9) = 1: P7(P9) = 0: defStrat(P9) = 1

        RN0 = Int(Rnd(1) * 100) + 1
        If currHalf = 1 And RN0 <= 15 Then defType(P9) = 0: P7(P9) = 1: defStrat(P9) = 4
        If currHalf = 1 And RN0 > 9 And RN0 <= 12 Then defType(P9) = 0: P7(P9) = 3: defStrat(P9) = 8
        If currHalf = 1 And RN0 > 6 And RN0 <= 9 Then defType(P9) = 2: P7(P9) = 3: defStrat(P9) = 7
        If currHalf = 1 And RN0 > 3 And RN0 <= 6 Then defType(P9) = 1: P7(P9) = 3: defStrat(P9) = 9
        If currHalf = 1 And RN0 <= 3 Then defType(P9) = 0: P7(P9) = 4: defStrat(P9) = 10

        RN0 = Int(Rnd(1) * 100) + 1
        If currHalf = 2 And gameClock! >= 600 And I5 > 20 And RN0 <= 60 Then defType(P9) = 0: P7(P9) = 0: defStrat(P9) = 0
        If currHalf = 2 And gameClock! >= 600 And I5 > 20 And RN0 > 60 And RN0 <= 80 Then defType(P9) = 1: P7(P9) = 0: defStrat(P9) = 1
        If currHalf = 2 And gameClock! >= 600 And I5 > 20 And RN0 > 80 And RN0 <= 90 Then defType(P9) = 1: P7(P9) = 2: defStrat(P9) = 6
        If currHalf = 2 And gameClock! >= 600 And I5 > 20 And RN0 > 90 And RN0 <= 95 Then defType(P9) = 0: P7(P9) = 4: defStrat(P9) = 10
        If currHalf = 2 And gameClock! >= 600 And I5 > 20 And RN0 > 95 Then defType(P9) = 1: P7(P9) = 4: defStrat(P9) = 11
        If currHalf = 2 And gameClock! >= 600 And I5 >= 10 And I5 < 20 And RN0 <= 75 Then defType(P9) = 0: P7(P9) = 0: defStrat(P9) = 0
        If currHalf = 2 And gameClock! >= 600 And I5 >= 10 And I5 < 20 And RN0 > 75 And RN0 <= 83 Then defType(P9) = 0: P7(P9) = 1: defStrat(P9) = 4
        If currHalf = 2 And gameClock! >= 600 And I5 >= 10 And I5 < 20 And RN0 > 83 And RN0 <= 91 Then defType(P9) = 1: P7(P9) = 0: defStrat(P9) = 1
        If currHalf = 2 And gameClock! >= 600 And I5 >= 10 And I5 < 20 And RN0 > 91 And RN0 <= 96 Then defType(P9) = 0: P7(P9) = 4: defStrat(P9) = 10
        If currHalf = 2 And gameClock! >= 600 And I5 >= 10 And I5 < 20 And RN0 > 96 Then defType(P9) = 1: P7(P9) = 4: defStrat(P9) = 11
        If currHalf = 2 And gameClock! >= 600 And I5 < 10 And RN0 <= 70 Then defType(P9) = 0: P7(P9) = 0: defStrat(P9) = 0
        If currHalf = 2 And gameClock! >= 600 And I5 < 10 And RN0 > 70 And RN0 <= 75 Then defType(P9) = 1: P7(P9) = 0: defStrat(P9) = 1
        If currHalf = 2 And gameClock! >= 600 And I5 < 10 And RN0 > 76 And RN0 <= 85 Then defType(P9) = 2: P7(P9) = 0: defStrat(P9) = 2
        If currHalf = 2 And gameClock! >= 600 And I5 < 10 And RN0 > 85 And RN0 <= 93 Then defType(P9) = 0: P7(P9) = 2: defStrat(P9) = 5
        If currHalf = 2 And gameClock! >= 600 And I5 < 10 And RN0 > 93 And RN0 <= 97 Then defType(P9) = 3: P7(P9) = 0: defStrat(P9) = 3
        If currHalf = 2 And gameClock! >= 600 And I5 < 10 And RN0 > 97 Then defType(P9) = 2: P7(P9) = 4: defStrat(P9) = 12
        If currHalf = 2 And gameClock! >= 120 And gameClock! < 600 And I5 > 20 And RN0 <= 70 Then defType(P9) = 0: P7(P9) = 0: defStrat(P9) = 0
        If currHalf = 2 And gameClock! >= 120 And gameClock! < 600 And I5 > 20 And RN0 > 70 And RN0 <= 80 Then defType(P9) = 0: P7(P9) = 2: defStrat(P9) = 5
        If currHalf = 2 And gameClock! >= 120 And gameClock! < 600 And I5 > 20 And RN0 > 80 And RN0 <= 90 Then defType(P9) = 0: P7(P9) = 4: defStrat(P9) = 10
        If currHalf = 2 And gameClock! >= 120 And gameClock! < 600 And I5 > 20 And RN0 > 90 Then defType(P9) = 3: P7(P9) = 4: defStrat(P9) = 13
        If currHalf = 2 And gameClock! >= 120 And gameClock! < 600 And I5 > 10 And I5 < 20 And RN0 <= 70 Then defType(P9) = 0: P7(P9) = 0: defStrat(P9) = 0
        If currHalf = 2 And gameClock! >= 120 And gameClock! < 600 And I5 > 10 And I5 < 20 And RN0 > 70 And RN0 <= 80 Then defType(P9) = 0: P7(P9) = 2: defStrat(P9) = 5
        If currHalf = 2 And gameClock! >= 120 And gameClock! < 600 And I5 > 10 And I5 < 20 And RN0 > 80 And RN0 <= 90 Then defType(P9) = 1: P7(P9) = 4: defStrat(P9) = 12
        If currHalf = 2 And gameClock! >= 120 And gameClock! < 600 And I5 > 10 And I5 < 20 And RN0 > 90 Then defType(P9) = 1: P7(P9) = 0: defStrat(P9) = 1
        If currHalf = 2 And gameClock! >= 120 And gameClock! < 600 And I5 <= 10 And RN0 <= 70 Then defType(P9) = 0: P7(P9) = 0: defStrat(P9) = 0
        If currHalf = 2 And gameClock! >= 120 And gameClock! < 600 And I5 <= 10 And RN0 > 70 And RN0 <= 90 Then defType(P9) = 2: P7(P9) = 0: defStrat(P9) = 2
        If currHalf = 2 And gameClock! >= 120 And gameClock! < 600 And I5 <= 10 And RN0 > 90 And RN0 <= 96 Then defType(P9) = 1: P7(P9) = 0: defStrat(P9) = 1
        If currHalf = 2 And gameClock! >= 120 And gameClock! < 600 And I5 <= 10 And RN0 > 96 Then defType(P9) = 0: P7(P9) = 4: defStrat(P9) = 10
        If currHalf = 2 And gameClock! < 120 And I5 > 10 And RN0 <= 50 Then defType(P9) = 1: P7(P9) = 4: defStrat(P9) = 11
        If currHalf = 2 And gameClock! < 120 And I5 > 10 And RN0 > 50 Then defType(P9) = 3: P7(P9) = 4: defStrat(P9) = 13
        If currHalf = 2 And gameClock! < 120 And I5 <= 10 And I5 > 4 Then defType(P9) = 3: P7(P9) = 5: defStrat(P9) = 14
        If currHalf = 2 And gameClock! < 120 And I5 <= 4 And RN0 <= 25 Then defType(P9) = 0: P7(P9) = 2: defStrat(P9) = 5
        If currHalf = 2 And gameClock! < 120 And I5 <= 4 And RN0 > 25 And RN0 <= 50 Then defType(P9) = 1: P7(P9) = 2: defStrat(P9) = 6
        If currHalf = 2 And gameClock! < 120 And I5 <= 4 And RN0 > 50 And RN0 <= 75 Then defType(P9) = 1: P7(P9) = 4: defStrat(P9) = 11
        If currHalf = 2 And gameClock! < 120 And I5 <= 4 And RN0 > 75 Then defType(P9) = 3: P7(P9) = 4: defStrat(P9) = 13
        If currHalf > 2 And RN0 <= 50 Then defType(P9) = 0: P7(P9) = 0: defStrat(P9) = 0
        If currHalf > 2 And RN0 > 50 Then defType(P9) = 2: P7(P9) = 0: defStrat(P9) = 2

    Else

        RN0 = Int(Rnd(1) * 100) + 1
        defStrat(P9) = 0
        defType(P9) = 0
        P7(P9) = 0

        Select Case RN0

            Case 1 To 10
                defType(P9) = 1
                defStrat(P9) = 1
                P7(P9) = 0

            Case 11 To 36
                defType(P9) = 2
                defStrat(P9) = 2
                P7(P9) = 0

            Case 37 To 100
                defStrat(P9) = 0
                defType(P9) = 0
                P7(P9) = 0

        End Select

        RN0 = Int(Rnd(1) * 100) + 1

        Select Case RN0

            Case 1 To 5
                P7(P9) = 1
                defStrat(P9) = 4
                defType(P9) = 0

            Case 6 To 9
                P7(P9) = 3
                defStrat(P9) = 8
                defType(P9) = 0

            Case 10
                P7(P9) = 3
                defStrat(P9) = 7
                defType(P9) = 2
                'Nothing for 11 to 100

        End Select

    End If

    RN0 = Int(Rnd(1) * 100) + 1

    If currHalf = 1 Then

        Select Case RN0
            Case 1 To 80
                offStrat(P9) = 0
            Case 81 To 90
                offStrat(P9) = 1
            Case 91 To 100
                offStrat(P9) = 2
        End Select

    End If

    If currHalf >= 2 And score(P9, 0) - score(I6, 0) < 0 Then

        If RN0 <= 80 Then
            offStrat(P9) = 0
        Else
            'R0 > 80
            offStrat(P9) = 1
        End If

    End If

    If currHalf >= 2 And score(P9, 0) - score(I6, 0) >= 0 Then

        If RN0 <= 80 Then
            offStrat(P9) = 0
        Else
            'RN0 > 80
            offStrat(P9) = 2
        End If

    End If

    If currHalf >= 2 And gameClock! <= 180 And score(P9, 0) - score(I6, 0) < 0 Then

        If RN0 <= 30 Then
            offStrat(P9) = 3
        Else
            'RN0 <= 30
            offStrat(P9) = 4
        End If

    End If

    If currHalf >= 2 And gameClock! <= 60 And threePtOpt = 1 And (score(P9, 0) - score(1 - P9, 0) = -3 Or score(P9, 0) - score(1 - P9, 0) = -6) Then offStrat(P9) = 9

End Sub


'----------------------------------------
'         STAMINASORT Subroutine
'----------------------------------------
'This subroutine PRESUMABLY sorts players
'by their current stamina.
Sub STAMINASORT ()
    M = 13
    L = 12

    8802 '
    S6 = 0
    S7 = 0

    8803 '
    H1 = 0
    H2 = 0

    If plyrStamina(S6) > plyrStamina(S6 + 1) Then
        H1 = plyrStamina(S6)
        H2 = F1(S6)
        plyrStamina(S6) = plyrStamina(S6 + 1)
        F1(S6) = F1(S6 + 1)
        plyrStamina(S6 + 1) = H1
        F1(S6 + 1) = H2
        S7 = S6
    End If

    S6 = S6 + 1

    If S6 <= L Then
        GoTo 8803
    End If

    If S7 <> 0 Then
        L = S7 - 1
        GoTo 8802
    End If

End Sub


'----------------------------------------
'        LASTFIVEMENU Subroutine
'----------------------------------------
'This subroutine simply prints a menu of
'all the user options for the last 5 sec.
'of the game
Sub LASTFIVEMENU ()

    Call FRAMEOPTION(12, P)
    Locate 10, 15

    Print gameTeams$(P); " LAST 5 SEC STRATEGY:"

    Locate 12, 14
    Locate , 14: Print Using "TIME REMAINING #.#"; gameClock!
    Locate , 14: Print "                                     TIME REQD"
    Locate , 14: Print "0 - FULL COURT PASS (SHOOT A 2)      0.1 - 3.0"
    Locate , 14: Print "1 - FULL COURT PASS (SHOOT A 3)      0.1 - 3.0"
    Locate , 14: Print "2 - SHOOT FROM BACKCOURT             0.1 - 0.5"
    Locate , 14: Print "3 - GET TO HALF COURT, CALL TIME OUT 1.5 - 2.5"
    Locate , 14: Print "4 - WORK DOWN THE FLOOR FOR A 3      3.0 - 4.0"
    Locate , 14: Print "5 - WORK DOWN THE FLOOR FOR A 2      3.0 - 5.0"

End Sub


'----------------------------------------
'          LASTSHOT Subroutine
'----------------------------------------
'This subroutine handles calculations for
'the clock and playtime with the last shot.
Sub LASTSHOT ()

    M5 = 0

    If gameClock! <= 2 Or IN = 99 Then

        M5 = 1

    Else

        Select Case gameClock!

            Case 2 To 4
                M5 = 2

            Case 5 To 16
                M5 = Int(Rnd(1) * 2) + 3

            Case Else
                M5 = Int(Rnd(1) * 3) + 5

        End Select

    End If

    timeElapsed! = M5

    Call AdjustPlayTime

    gameClock! = gameClock! - M5
    IN = 0

    If sClockVal >= 1 Then shotClock = shotClock - M5

    Call CheckGameShotClock

End Sub


'----------------------------------------
'       CheckGameClock Subroutine
'----------------------------------------
'This subroutine checks the game clock
'and resets it if expired
Sub CheckGameClock ()

    If gameClock! <= 0 Then
        timeElapsed! = gameClock!
        Call AdjustPlayTime
        gameClock! = 0
    End If

End Sub


'----------------------------------------
'     CheckGameShotClock Subroutine
'----------------------------------------
'This subroutine checks if either the game
'clock and shot clock have expired, and
'zeros them out if so. UPDATESCREEN is
'called to update the clock on the board.
Sub CheckGameShotClock ()


    If gameClock! <= .001 Then
        timeElapsed! = gameClock!
        Call AdjustPlayTime
        gameClock! = 0
    End If

    If shotClock <= 0 Then
        shotClock = shotClock - shotClock
        gameClock! = gameClock! - shotClock
        timeElapsed! = shotClock
        Call AdjustPlayTime
    End If

    Call UPDATESCREEN

End Sub


'----------------------------------------
'       AdjustPlayTime Subroutine
'----------------------------------------
'This subroutine increases the play time
'for each active player
Sub AdjustPlayTime ()

    ' *** INCREMENT MINUTES ***
    For I3 = 0 To 1

        For I4 = 0 To 4
            timePlayed(I3, B1(I3, I4)) = timePlayed(I3, B1(I3, I4)) + timeElapsed!
        Next

    Next

End Sub


'----------------------------------------
'       ResetShotClock Subroutine
'----------------------------------------
'This subroutine resets the shot clock.
'It uses defined setting value in order
'to determine how much time to add.
'A possible rewrite of the function
'would see it simply accept the amount
'of time as a parameter instead, but
'that would be harder to control for any
'invalid values that might get passed.
Sub ResetShotClock ()

    If sClockVal > 0 Then

        Select Case sClockVal
            Case 1: shotClock = 45
            Case 2: shotClock = 35
            Case 3: shotClock = 30
        End Select

        LS = 4

        If gameClock! < 46 And shotClock >= gameClock! Or currHalf > 2 And gameClock! = 300 Then Locate 5, 5: Print "     "

        If gameClock! < 6 And LS = 4 And LT <> 4 Then F! = 5

    End If

End Sub


'----------------------------------------
'       AdjustShotClock Subroutine
'----------------------------------------
'This subroutine substracts time from
'the shot clock based on the time that
'has elapsed during game play.
Sub AdjustShotClock ()

    If sClockVal >= 1 Then
        shotClock = shotClock - timeElapsed!
    End If

    'Shot clock expired
    If shotClock < 0 Then

        'shotClock = 0?
        shotClock = shotClock - shotClock

        'gameClock = no change?
        gameClock! = gameClock! - shotClock

        'timeElapsed = 0
        timeElapsed! = shotClock

        Call AdjustPlayTime

    End If

End Sub


'----------------------------------------
'           OPTIONS Subroutine
'----------------------------------------
'This subroutine gives you a small menu
'for changing some of the game options
'(such as pbp delay, coaching mode) in
'the middle of game play.
Sub OPTIONS ()

    Shared playMode$()

    Screen , , 0, 0

    Call INFO

    Do

        Color , 0
        Locate 3, 1
        Color 14: Print "(1) ";
        Color 15: Print playMode$(playerOpt)
        Color 14: Print "(2) ";
        Color 15: Print Using "PLAY-BY-PLAY DELAY: #.# "; pbpDelay!
        Print
        Color 14: Print "<ENTER> ";
        Color 15: Print "RETURN TO GAME PLAY"

        Do
            Color 7, 0
            'Locate 24, 1: Print "HIT ANY KEY TO CONTINUE";
            I$ = GetKeyPress$
            I = Val(I$)
        Loop Until I >= 0 And I <= 2

        Select Case I
            Case 1
                playerOpt = playerOpt + 1
                If playerOpt > 3 Then playerOpt = 0
            Case 2
                Locate 4, 23: Input pbpDelay!
        End Select

        ' Determine computer team
        Select Case playerOpt

            Case 1:
                playerMode = 1
                compTeam = 0

            Case 2:
                playerMode = 1
                compTeam = 1

            Case 3:
                playerMode = 2
                'compTeam = 0

        End Select

    Loop Until I$ = Chr$(13)

    Screen , , 0, 0
    Call SCOREBOARD

End Sub


'----------------------------------------
'           EVENTS Subroutine
'----------------------------------------
'This subroutine works with another to
'look for any events that meet the limits
'for "special". If found, it will create
'a corresponding "special" box score
Sub EVENTS (specialCount, specialStat)

    If _FileExists("EVENTS.BOX") Then

        Open "EVENTS.BOX" For Input As #1

        For X = 1 To 13
            Input #1, eventSettings(X)
        Next

        Close #1

        checkSpecial% = 0

        'Team / game conditions for special box score
        If currHalf - 3 > eventSettings(1) Or score(1, 0) + score(0, 0) > eventSettings(2) Or gameR3!(0) + gameR3!(1) > eventSettings(3) Or score(1, 0) > eventSettings(4) Or score(0, 0) > eventSettings(4) Or gameR3!(1) > eventSettings(5) Or gameR3!(0) > eventSettings(5) Then

            checkSpecial% = 1

        Else

            For I = 0 To 1

                For I1 = 0 To 13

                    'Player conditions for special box score
                    'FGM * 2 + FTM + 3FM = Points / Game
                    If plyrOff_GAME!(I, I1, 8) * 2 + plyrOff_GAME!(I, I1, 10) + threeFG(I, I1, 0) > eventSettings(6) Or plyrOff_GAME!(I, I1, 11) > eventSettings(7) Or plyrOff_GAME!(I, I1, 14) > eventSettings(8) Or plyrOff_GAME!(I, I1, 15) > eventSettings(9) Or plyrOff_GAME!(I, I1, 13) > eventSettings(10) Or threeFG(I, I1, 0) > eventSettings(11) Then
                        checkSpecial% = 1
                    End If

                    If checkSpecial% = 1 Then Exit For

                Next

                If checkSpecial% = 1 Then Exit For

            Next 'done checking if special event already found

        End If

    End If 'Done checking EVENTS.BOX file

    If checkSpecial% = 1 Then
        Call FoundSpecial(specialCount, specialStat)
    End If

End Sub


'----------------------------------------
'        FoundSpecial Subroutine
'----------------------------------------
'This subroutine simply counts how many
'special boxscore files already exist, so
'that it an assign a unique number to the
'boxscore about to be created.
Sub FoundSpecial (specialCount, specialStat)

    'Get count of SPC files to determine
    'number to assign next one
    'Spec$ = diskPaths$(1) + "*.SPC"
    Spec$ = diskPaths$(1) + "*.BSS"
    specialCount = FileCount%(Spec$)
    specialCount = specialCount + 1
    specialStat = 1

End Sub


'----------------------------------------
'          POSTGAME Subroutine
'----------------------------------------
'This subroutine processes everything that
'is necessary after a game is complete.
'It checks for records / special events,
'handles a prompt for stats, and saving
'of stats.
Sub POSTGAME ()

    Call CheckRecords
    Call EVENTS(specialCount, specialStat)
    endGame = 1

    Do

        Color 15, 0
        Cls

        Color 14: Print "(0) ";
        Color 15: Print "STATS TO SCREEN"
        Print

        Color 14: Print "(1) ";
        Color 15: Print "STATS TO PRINTER"
        Print

        Color 14: Print "(2) ";
        Color 15: Print "STATS TO TEXT FILE"

        If autoPlay = 1 And playerMode = 2 Then
            X = 2
        Else
            Do
                I$ = GetKeyPress$
                X = Val(I$)
            Loop Until X >= 0 And X <= 2
        End If

        Call BOXOPTIONS(X)
        Call TICKER

        'Reset option for next call
        If X <> 0 Then X = 0

        'Prompt to display stats again
        Color 15, 0
        Cls

        If Not (autoPlay = 1 And playerMode = 2) Then

            Do
                'Using Home Team's color for the box
                Call TEAMBOX(1, 1)
                U$ = "DISPLAY STATS AGAIN? (Y/N)"
                Locate 7, (80 - Len(U$)) / 2
                Print U$
                Color 15, 0
                I$ = GetKeyPress$
            Loop Until UCase$(I$) = "Y" Or UCase$(I$) = "N"

        End If

    Loop Until UCase$(I$) = "N" Or (autoPlay = 1 And playerMode = 2)

    'If we had special events
    If specialStat = 1 Then

        boxName$ = "BOXSCORE" + Mid$(Str$(specialCount), 2, Len(Str$(specialCount))) + ".BSS"
        'boxName$ = "BOX" + Mid$(Str$(specialCount), 2, Len(Str$(specialCount))) + ".SPC"

        'Append special events
        Call BOX2SPC(boxName$)

        Call BOX2FILE(2, boxName$, specialStat)

    End If

    Call SAVESTATS

    endGame = 0
    specialStat = 0

End Sub


'----------------------------------------
'         BOXOPTIONS Subroutine
'----------------------------------------
'This subroutine takes appropriate action
'for the output of the box file, which
'depends on the choice given to it.

' PARAMETER outputChoice
'    represents menu choice
'       0 = Display on screen
'       1 = Send to printer
'       2 = Save to file

'The option to send to printer will first
'create a temporary file, then loop THROUGH
'it to print each line.
Sub BOXOPTIONS (outputChoice)

    Shared scheduleFile$, tourneyFile$

    Select Case outputChoice

        Case 0:
            Call BOX2SCREEN

        Case 1, 2:
            If outputChoice = 1 Then
                'Printer = temporary file
                boxName$ = "TEMPBOX"
            Else
                'File = prompt | auto-create
                If autoPlay <> 1 Then
                    Cls
                    Print "ENTER FILENAME FOR BOXSCORE (NO SPACES OR PERIODS)";
                    Input boxName$
                    boxName$ = boxName$ + ".BSS"
                    'boxName$ = boxName$ + ".SPC"
                Else
                    'ScheduleName_GameXXX.BS
                    boxName$ = Mid$(scheduleFile$, 1, Len(scheduleFile$) - 4) + "_GAME" + Mid$(Str$(schedGame(0) + schedGame(2)), 2, Len(Str$(schedGame(0) + schedGame(2)))) + ".BS"
                    'boxName$ = "BOX" + Mid$(Str$(schedGame(0) + schedGame(2)), 2, Len(Str$(schedGame(0) + schedGame(2))))
                End If

            End If

            'Includes a special option to send to printer when done
            Call BOX2FILE(outputChoice, boxName$, 0)

    End Select

End Sub


'----------------------------------------
'         BOX2SCREEN Subroutine
'----------------------------------------
'This subroutine formats the boxscore
'for output to the end user display
Sub BOX2SCREEN ()

    Shared actualAttendance&

    Cls

    Color 14
    If gameLoc = 2 Then
        Print "SITE: ";
        Color 15
        Print "NEUTRAL"
    Else
        Print "SITE: ";
        Color 15
        Print gameArena$(gameLoc)
    End If

    Color 14
    Print "ATTENDANCE: ";
    Color 15
    Print Using "###,###"; actualAttendance&
    Print

    Call ScoreSummary

    If Not (autoPlay = 1 And playerMode = 2) Then
        Locate 24, 1: Print "HIT ANY KEY TO CONTINUE";
        I$ = GetKeyPress
    End If

    Call STATS2SCREEN

End Sub


'----------------------------------------
'        ScoreSummary Subroutine
'----------------------------------------
'This subroutine prints a score by period
'for each team.
Sub ScoreSummary ()

    Locate 4, 17
    Color 14

    If halfTime = 1 Then
        Print "H1 "; Tab(25); "GAME"
    Else
        Print "H1 H2 ";

        If score(0, 1) + score(0, 2) = score(1, 1) + score(1, 2) Then

            Locate , 23
            Print "O1 ";

            If score(0, 1) + score(0, 2) + score(0, 3) = score(1, 1) + score(1, 2) + score(1, 3) Then
                Locate , 26
                Print "O2 ";

                If score(0, 1) + score(0, 2) + score(0, 3) + score(0, 4) = score(1, 1) + score(1, 2) + score(1, 3) + score(1, 4) Then
                    Locate , 29
                    Print "O3 ";

                    If score(0, 1) + score(0, 2) + score(0, 3) + score(0, 4) + score(0, 5) = score(1, 1) + score(1, 2) + score(1, 3) + score(1, 4) + score(1, 5) Then
                        Locate , 32
                        Print "O4 ";

                        If score(0, 1) + score(0, 2) + score(0, 3) + score(0, 4) + score(0, 5) + score(0, 6) = score(1, 1) + score(1, 2) + score(1, 3) + score(1, 4) + score(1, 5) + score(1, 6) Then
                            Locate , 35
                            Print "O5";
                            Locate , 40
                            Print "GAME"
                        Else
                            Locate , 37
                            Print "GAME"
                        End If
                    Else
                        Locate , 34
                        Print "GAME"
                    End If
                Else
                    Locate , 31
                    Print "GAME"
                End If
            Else
                Locate , 28
                Print "GAME"
            End If
        Else
            Locate , 25
            Print "GAME"
        End If

    End If

    Color 15, 0

    For I = 0 To 1:

        Locate 5 + I
        Color teamRat_GAME(I, 0), teamRat_GAME(I, 1)
        Print gameTeams$(I);

        Color 15, 0

        If halfTime = 1 Then
            Print Tab(16); Str$(score(I, 1)); Tab(22); " - "; score(I, 0)
        Else
            Print Tab(16); Str$(score(I, 1)); Tab(19); Str$(score(I, 2));

            If score(0, 1) + score(0, 2) = score(1, 1) + score(1, 2) Then
                Locate , 22: Print Str$(score(I, 3));

                If score(0, 1) + score(0, 2) + score(0, 3) = score(1, 1) + score(1, 2) + score(1, 3) Then
                    Locate , 25: Print Str$(score(I, 4));

                    If score(0, 1) + score(0, 2) + score(0, 3) + score(0, 4) = score(1, 1) + score(1, 2) + score(1, 3) + score(1, 4) Then
                        Locate , 28: Print Str$(score(I, 5));

                        If score(0, 1) + score(0, 2) + score(0, 3) + score(0, 4) + score(0, 5) = score(1, 1) + score(1, 2) + score(1, 3) + score(1, 4) + score(1, 5) Then
                            Locate , 31: Print Str$(score(I, 6));

                            If score(0, 1) + score(0, 2) + score(0, 3) + score(0, 4) + score(0, 5) + score(0, 6) = score(1, 1) + score(1, 2) + score(1, 3) + score(1, 4) + score(1, 5) + score(1, 6) Then
                                Locate , 35: Print Str$(score(I, 7)); " -  "; Str$(score(I, 0))
                            Else
                                Locate , 34: Print " - "; Str$(score(I, 0))
                            End If

                        Else
                            Locate , 31: Print " - "; Str$(score(I, 0))
                        End If

                    Else
                        Locate , 28: Print " - "; Str$(score(I, 0))
                    End If

                Else
                    Locate , 25: Print " - "; score(I, 0)
                End If

            Else
                Locate , 22: Print " - "; score(I, 0)
            End If

        End If

    Next I

End Sub


'----------------------------------------
'          BOX2FILE Subroutine
'----------------------------------------
'This subroutine formats the boxscore for
'an output file.

' PARAMETER printChoice
'    choice to print file vs. saving it

'The option to send to printer will first
'create a temporary file, then loop THROUGH
'it to print each line.
Sub BOX2FILE (printChoice, boxName$, hasSpecial)

    Shared actualAttendance&

    If hasSpecial = 1 Then
        Open (diskPaths$(1) + boxName$) For Append As #1
    Else
        Open (diskPaths$(1) + boxName$) For Output As #1
    End If

    If gameLoc = 2 Then
        Print #1, "SITE: NEUTRAL"
    Else
        Print #1, "SITE: "; gameArena$(gameLoc)
    End If

    Print #1, Using "ATTENDANCE: ###,###"; actualAttendance&
    Print #1,

    Print #1, ; Tab(17); "H1 H2 ";

    If score(0, 1) + score(0, 2) = score(1, 1) + score(1, 2) Then
        Print #1, ; Tab(23); "O1 ";

        If score(0, 1) + score(0, 2) + score(0, 3) = score(1, 1) + score(1, 2) + score(1, 3) Then
            Print #1, ; Tab(26); "O2 ";

            If score(0, 1) + score(0, 2) + score(0, 3) + score(0, 4) = score(1, 1) + score(1, 2) + score(1, 3) + score(1, 4) Then
                Print #1, ; Tab(29); "O3 ";

                If score(0, 1) + score(0, 2) + score(0, 3) + score(0, 4) + score(0, 5) = score(1, 1) + score(1, 2) + score(1, 3) + score(1, 4) + score(1, 5) Then
                    Print #1, ; Tab(32); "O4 ";

                    If score(0, 1) + score(0, 2) + score(0, 3) + score(0, 4) + score(0, 5) + score(0, 6) = score(1, 1) + score(1, 2) + score(1, 3) + score(1, 4) + score(1, 5) + score(1, 6) Then
                        Print #1, ; Tab(35); "O5";
                        Print #1, ; Tab(40); "GAME"
                    Else
                        Print #1, ; Tab(37); "GAME"
                    End If
                Else
                    Print #1, ; Tab(34); "GAME"
                End If
            Else
                Print #1, ; Tab(31); "GAME"
            End If
        Else
            Print #1, ; Tab(28); "GAME"
        End If
    Else
        Print #1, ; Tab(25); "GAME"
    End If

    For I = 0 To 1

        Print #1, gameTeams$(I); Tab(16); Str$(score(I, 1)); Tab(19); Str$(score(I, 2));

        If score(0, 1) + score(0, 2) = score(1, 1) + score(1, 2) Then

            Print #1, ; Tab(22); Str$(score(I, 3));

            If score(0, 1) + score(0, 2) + score(0, 3) = score(1, 1) + score(1, 2) + score(1, 3) Then
                Print #1, ; Tab(25); Str$(score(I, 4));

                If score(0, 1) + score(0, 2) + score(0, 3) + score(0, 4) = score(1, 1) + score(1, 2) + score(1, 3) + score(1, 4) Then
                    Print #1, ; Tab(28); Str$(score(I, 5));

                    If score(0, 1) + score(0, 2) + score(0, 3) + score(0, 4) + score(0, 5) = score(1, 1) + score(1, 2) + score(1, 3) + score(1, 4) + score(1, 5) Then
                        Print #1, ; Tab(31); Str$(score(I, 6));

                        If score(0, 1) + score(0, 2) + score(0, 3) + score(0, 4) + score(0, 5) + score(0, 6) = score(1, 1) + score(1, 2) + score(1, 3) + score(1, 4) + score(1, 5) + score(1, 6) Then
                            Print #1, ; Tab(35); Str$(score(I, 7)); " -  "; Str$(score(I, 0))
                        Else
                            Print #1, ; Tab(34); " - "; Str$(score(I, 0))
                        End If
                    Else
                        Print #1, ; Tab(31); " - "; Str$(score(I, 0))
                    End If
                Else
                    Print #1, ; Tab(28); " - "; Str$(score(I, 0))
                End If
            Else
                Print #1, ; Tab(25); " - "; score(I, 0)
            End If
        Else
            Print #1, ; Tab(22); " - "; score(I, 0)
        End If

    Next I

    For I = 0 To 1:

        Print #1,
        Print #1, gameTeams$(I)
        Print #1, "NAME"; Tab(14); " MIN   FG- A 3FG- A  FT- A ORB REB PTS PF  AST BLK STL TO"

        Erase statTotals

        For I1 = 0 To 13

            If players$(I, I1) <> "XXX" Then

                'Player Name
                Print #1, players$(I, I1); Tab(14);

                'Player Time
                If timePlayed(I, I1) = 0 Then
                    Print #1, Tab(15); "DNP";
                Else
                    Print #1, Using "##"; Int(timePlayed(I, I1) / 60);: Print #1, ":";

                    If timePlayed(I, I1) - Int(timePlayed(I, I1) / 60) * 60 > 9 Then
                        Print #1, Using "##"; timePlayed(I, I1) - Int(timePlayed(I, I1) / 60) * 60;
                    Else
                        Print #1, "0";: Print #1, Using "#"; timePlayed(I, I1) - Int(timePlayed(I, I1) / 60) * 60;
                    End If
                End If

                Print #1, ; Tab(21);

                'FGM - FGA
                Print #1, Using "##"; plyrOff_GAME!(I, I1, 8);
                Print #1, "-";
                Print #1, Using "##"; plyrOff_GAME!(I, I1, 7);

                '3FGM - 3FGA
                Print #1, Using "  ##"; threeFG(I, I1, 0);
                Print #1, "-";
                Print #1, Using "##"; threeFG(I, I1, 1);

                'FTM - FTA
                Print #1, Using "  ##"; plyrOff_GAME!(I, I1, 10);
                Print #1, "-";
                Print #1, Using "##"; plyrOff_GAME!(I, I1, 9);

                'ORB / RB / Points / Fouls / Assists / Blocks / Steals / Turnovers
                Print #1, Using "  ##  ## ###  #  ##  ##  ##  ##  ##  ##"; plyrOff_GAME!(I, I1, 24), plyrOff_GAME!(I, I1, 11), plyrOff_GAME!(I, I1, 8) * 2 + plyrOff_GAME!(I, I1, 10) + threeFG(I, I1, 0), plyrOff_GAME!(I, I1, 12), plyrOff_GAME!(I, I1, 14), plyrOff_GAME!(I, I1, 15), plyrOff_GAME!(I, I1, 13), plyrOff_GAME!(I, I1, 23)

                statTotals(0) = statTotals(0) + plyrOff_GAME!(I, I1, 8)
                statTotals(1) = statTotals(1) + plyrOff_GAME!(I, I1, 7)
                statTotals(2) = statTotals(2) + plyrOff_GAME!(I, I1, 10)
                statTotals(3) = statTotals(3) + plyrOff_GAME!(I, I1, 9)
                statTotals(4) = statTotals(4) + plyrOff_GAME!(I, I1, 11)
                statTotals(5) = statTotals(5) + (plyrOff_GAME!(I, I1, 8) * 2) + plyrOff_GAME!(I, I1, 10) + threeFG(I, I1, 0)
                statTotals(13) = statTotals(13) + threeFG(I, I1, 0)
                statTotals(14) = statTotals(14) + threeFG(I, I1, 1)
                statTotals(6) = statTotals(6) + plyrOff_GAME!(I, I1, 12)
                statTotals(7) = statTotals(7) + plyrOff_GAME!(I, I1, 14)
                statTotals(8) = statTotals(8) + plyrOff_GAME!(I, I1, 15)
                statTotals(9) = statTotals(9) + plyrOff_GAME!(I, I1, 13)
                statTotals(11) = statTotals(11) + plyrOff_GAME!(I, I1, 24)
                statTotals(12) = statTotals(12) + plyrOff_GAME!(I, I1, 23)
                statTotals(10) = statTotals(10) + timePlayed(I, I1)

            End If

        Next I1

        If statTotals(3) = 0 Then statTotals(3) = 1

        Print #1,
        Print #1, "TOTALS"; Tab(14); Int(statTotals(10) / 60); Tab(21);

        'FGM - FGA
        Print #1, Using "##"; statTotals(0);
        Print #1, "-";
        Print #1, Using "###"; statTotals(1);

        '3FGM - 3FGA
        Print #1, ; Tab(28);
        Print #1, Using "##"; statTotals(13);
        Print #1, "-";
        Print #1, Using "##"; statTotals(14);

        'FTM - FTA
        Print #1, ; Tab(35);
        Print #1, Using "##"; statTotals(2);
        Print #1, "-";
        Print #1, Using "##"; statTotals(3);

        Print #1, ; Tab(42);
        'ORB / RB / Points / Fouls / Assists / Blocks / Steals / Turnovers
        Print #1, Using "##  ## ### ##  ##  ##  ##  ##"; statTotals(11), statTotals(4), statTotals(5), statTotals(6), statTotals(7), statTotals(8), statTotals(9), statTotals(12)

        'FG %
        Print #1, ; Tab(22); 
        If statTotals(1) > 0 Then Print #1, ; Int(((statTotals(0) / statTotals(1)) * 100) + .5); "%"; 

        '3FG %
        Print #1, ; Tab(28); 
        If statTotals(14) > 0 Then Print #1, ; Int(((statTotals(13) / statTotals(14)) * 100) + .5); "%";

        'FT %
        Print #1, ; Tab(35); 
        If statTotals(3) > 0 Then Print #1, ; Int(((statTotals(2) / statTotals(3)) * 100) + .5); "%"

        Print #1,
        Print #1, "TOTAL TURNOVERS -"; turnovers(I)
        Print #1, "TOTAL REBOUNDS  -"; gameR3!(I)

    Next I

    Print #1,

    '-- The code below was used to print
    '-- disabled players in the boxscore
    '-- output so that they could be easily identified.
    'Print #1, "BENCH WARMERS"
    '--Print #1, "DISABLED BUT PLAYED"

    'For I = 0 To 1

    '    For I1 = 0 To 13

    '        'If players$(I, I1) <> "XXX" And rosterStatus(I, I1) = -1 Then
    '--If players$(I, I1) <> "XXX" And rosterStatus(I, I1) = -1 And timePlayed(I, I1) > 0 Then
    '            Print #1, players$(I, I1); " ["; gameTeams$(I); "]"
    '        End If

    '    Next I1

    'Next I

    If printChoice = 1 Then Print #1, Chr$(12)

    Close #1

    If printChoice = 1 Then

        Open diskPaths$(1) + boxName$ For Input As #2

        Do
            Line Input #2, X$
            LPrint X$
        Loop While Left$(X$, 1) <> Chr$(12)

        Close #2

        Kill "TEMPBOX"

    End If

End Sub


'----------------------------------------
'           BOX2SPC Subroutine
'----------------------------------------
'This subroutine adds any special event
'information to a boxscore file
Sub BOX2SPC (boxName$)

    Open diskPaths$(1) + boxName$ For Output As #1

    Print #1,

    'Output any special events
    If currHalf - 3 > eventSettings(1) Then Print #1, Using "MORE THAN ## OVERTIMES"; eventSettings(1)
    If score(1, 0) + score(0, 0) > eventSettings(2) Then Print #1, Using "MORE THAN ### COMBINED POINTS"; eventSettings(2)
    If gameR3!(0) + gameR3!(1) > eventSettings(3) Then Print #1, Using "MORE THAN ### COMBINED REBOUNDS"; eventSettings(3)
    If score(0, 0) > eventSettings(4) Then Print #1, gameTeams$(0);: Print #1, Using " SCORED MORE THAN ### POINTS"; eventSettings(4)
    If score(1, 0) > eventSettings(4) Then Print #1, gameTeams$(1);: Print #1, Using " SCORED MORE THAN ### POINTS"; eventSettings(4)
    If gameR3!(0) > eventSettings(5) Then Print #1, gameTeams$(0);: Print #1, Using " HAD MORE THAN ### REBOUNDS"; eventSettings(5)
    If gameR3!(1) > eventSettings(5) Then Print #1, gameTeams$(1);: Print #1, Using " HAD MORE THAN ### REBOUNDS"; eventSettings(5)

    For I = 0 To 1
        For I1 = 0 To 13
            If plyrOff_GAME!(I, I1, 8) * 2 + plyrOff_GAME!(I, I1, 10) + threeFG(I, I1, 0) > eventSettings(6) Then Print #1, players$(I, I1);: Print #1, Using " SCORED MORE THAN ### POINTS"; eventSettings(6)
            If plyrOff_GAME!(I, I1, 11) > eventSettings(7) Then Print #1, players$(I, I1);: Print #1, Using " HAD MORE THAN ### REBOUNDS"; eventSettings(7)
            If plyrOff_GAME!(I, I1, 14) > eventSettings(8) Then Print #1, players$(I, I1);: Print #1, Using " HAD MORE THAN ### ASSISTS"; eventSettings(8)
            If plyrOff_GAME!(I, I1, 15) > eventSettings(9) Then Print #1, players$(I, I1);: Print #1, Using " BLOCKED MORE THAN ### SHOTS"; eventSettings(9)
            If plyrOff_GAME!(I, I1, 13) > eventSettings(10) Then Print #1, players$(I, I1);: Print #1, Using " HAD MORE THAN ### STEALS"; eventSettings(10)
            If threeFG(I, I1, 0) > eventSettings(11) Then Print #1, players$(I, I1);: Print #1, Using " MADE MORE THAN ### 3-PT FIELD GOALS"; eventSettings(11)
        Next
    Next

    Print #1,

    Close #1

End Sub


'----------------------------------------
'        STATS2SCREEN Subroutine
'----------------------------------------
'This subroutine formats the game stats
'for output to the end user display
Sub STATS2SCREEN

    For I = 0 To 1:

        Cls

        Color teamRat_GAME(I, 0), teamRat_GAME(I, 1)
        Print gameTeams$(I)

        Color 14, 0
        Print "NAME"; Tab(14); " MIN   FG- A 3FG- A  FT- A ORB REB PTS PF  AST BLK STL TO"

        Erase statTotals

        For I1 = 0 To 13

            If players$(I, I1) <> "XXX" And timePlayed(I, I1) <> 0 Then

                Color 15

                'Name
                Print players$(I, I1); Tab(14);

                'Minutes
                If timePlayed(I, I1) <> 0 Then
                    Print Using "##"; Int(timePlayed(I, I1) / 60);
                    Print ":";
                    If timePlayed(I, I1) - Int(timePlayed(I, I1) / 60) * 60 > 9 Then
                        Print Using "##"; timePlayed(I, I1) - Int(timePlayed(I, I1) / 60) * 60;
                    Else
                        Print "0";
                        Print Using "#"; timePlayed(I, I1) - Int(timePlayed(I, I1) / 60) * 60;
                    End If
                End If

                Locate , 21

                'FG
                Print Using "##"; plyrOff_GAME!(I, I1, 8);
                Print "-";
                Print Using "##"; plyrOff_GAME!(I, I1, 7);

                '3FG
                Print Using "  ##"; threeFG(I, I1, 0);
                Print "-";
                Print Using "##"; threeFG(I, I1, 1);

                'FT
                Print Using "  ##"; plyrOff_GAME!(I, I1, 10);
                Print "-";
                Print Using "##"; plyrOff_GAME!(I, I1, 9);

                'ORB / RB / PT / F / A /  B / S / TO
                Print Using "  ##  ## ###  #  ##  ##  ##  ##  ##  ##"; plyrOff_GAME!(I, I1, 24), plyrOff_GAME!(I, I1, 11), plyrOff_GAME!(I, I1, 8) * 2 + plyrOff_GAME!(I, I1, 10) + threeFG(I, I1, 0), plyrOff_GAME!(I, I1, 12), plyrOff_GAME!(I, I1, 14), plyrOff_GAME!(I, I1, 15), plyrOff_GAME!(I, I1, 13), plyrOff_GAME!(I, I1, 23);

                If timePlayed(I, I1) = 0 Then Locate , 15: Print "DNP" Else Print

                statTotals(0) = statTotals(0) + plyrOff_GAME!(I, I1, 8)
                statTotals(1) = statTotals(1) + plyrOff_GAME!(I, I1, 7)
                statTotals(2) = statTotals(2) + plyrOff_GAME!(I, I1, 10)
                statTotals(3) = statTotals(3) + plyrOff_GAME!(I, I1, 9)
                statTotals(4) = statTotals(4) + plyrOff_GAME!(I, I1, 11)
                statTotals(5) = statTotals(5) + (plyrOff_GAME!(I, I1, 8) * 2) + plyrOff_GAME!(I, I1, 10) + threeFG(I, I1, 0)

                statTotals(13) = statTotals(13) + threeFG(I, I1, 0)
                statTotals(14) = statTotals(14) + threeFG(I, I1, 1)

                statTotals(6) = statTotals(6) + plyrOff_GAME!(I, I1, 12)
                statTotals(7) = statTotals(7) + plyrOff_GAME!(I, I1, 14)
                statTotals(8) = statTotals(8) + plyrOff_GAME!(I, I1, 15)
                statTotals(9) = statTotals(9) + plyrOff_GAME!(I, I1, 13)
                statTotals(11) = statTotals(11) + plyrOff_GAME!(I, I1, 24)
                statTotals(12) = statTotals(12) + plyrOff_GAME!(I, I1, 23)
                statTotals(10) = statTotals(10) + timePlayed(I, I1)

            End If

        Next I1

        If statTotals(3) = 0 Then statTotals(3) = 1

        Print
        Color 14
        Print "TOTALS";

        Color 15
        'Minutes
        Print Tab(14); Int(statTotals(10) / 60);

        'FGM / FGA
        Locate , 21: Print Using "##"; statTotals(0);
        Print "-";
        Print Using "###"; statTotals(1);

        '3FGM / 3FGA
        Locate , 28: Print Using "##"; statTotals(13);
        Print "-";
        Print Using "##"; statTotals(14);

        'FTM / FTA
        Locate , 35: Print Using "##"; statTotals(2);
        Print "-";
        Print Using "##"; statTotals(3);

        'ORB / RB / PT / F / A / B / S / TO
        Locate , 42: Print Using "##  ## ### ##  ##  ##  ##  ##"; statTotals(11), statTotals(4), statTotals(5), statTotals(6), statTotals(7), statTotals(8), statTotals(9), statTotals(12)

        'FG %
        Print Tab(22);
        If statTotals(1) > 0 Then Print Int(((statTotals(0) / statTotals(1)) * 100) + .5); "%";

        '3FG %
        Print Tab(28); 
        If statTotals(14) > 0 Then Print Int(((statTotals(13) / statTotals(14)) * 100) + .5); "%";

        'FT %
        Print Tab(35);
        If statTotals(3) > 0 Then Print Int(((statTotals(2) / statTotals(3)) * 100) + .5); "%"

        Print
        Color 14: Print "TOTAL TURNOVERS -";
        Color 15: Print turnovers(I)

        Color 14: Print "TOTAL REBOUNDS  -";
        Color 15: Print gameR3!(I)

        If Not (autoPlay = 1 And playerMode = 2) Then
            Locate 24, 1: Print "HIT ANY KEY TO CONTINUE";
            I$ = GetKeyPress$
        End If

    Next I

End Sub


'----------------------------------------
'          SAVESTATS Subroutine
'----------------------------------------
'This subroutine prompts the user in ORDER
'to determine which teams to save satts For
'(autoplay will always save both teams).
'It also updates the GAME82 progress file,
'since at this point only can the game be
'considered fully complete.
Sub SAVESTATS ()

    Shared gameW0!(), gameW1!(), statsZ!()

    Shared scheduleFile$, tourneyFile$

    Color 15, 0
    Cls

    If autoPlay <> 1 Then

        Call TEAMBOX(1, 1)

        Do
            U$ = "SAVE STATS? (Y/N)"
            Locate 7, (80 - Len(U$)) / 2
            Print U$
            Color 15, 0
            I$ = GetKeyPress$
        Loop Until UCase$(I$) = "Y" Or UCase$(I$) = "N"

    End If

    ' Update schedule, ticker, etc.
    If UCase$(I$) = "Y" Or autoPlay = 1 Then

        If _FileExists("GAME82") Then

            Call TickerSchedule

            If schedGame(1) < schedGame(0) + schedGame(2) Then
                Kill "GAME82"
                endAllGames = 1
            Else

                Open "GAME82" For Output As #1

                Print #1, RTrim$(scheduleFile$)

                For I = 0 To 2
                    Print #1, schedGame(I)
                Next

                Close #1

            End If

        Else

            If _FileExists("TOURNEY") Then

                Open "TOURNEY" For Input As #2

                Input #2, tourneyFile$

                For I = 0 To 2
                    Input #2, schedGame(I)
                Next

                Close #2

                Open diskPaths$(1) + tourneyFile$ As #1 Len = 90

                For X = 0 To 14
                    Field #1, X * 2 As X$, 2 As Q$(X + 1), 90 - 2 - 2 * X As X$
                Next

                Field #1, 30 As X$, 2 As Q$(16), 2 As Q$(17), 15 As Q$(18), 15 As Q$(19), 26 As X$
                Field #1, 64 As X$, 3 As Q$(20), 3 As Q$(21), 6 As Q$(22), 8 As Q$(23), 6 As X$
                Field #1, 84 As X$, 2 As Q$(24), 2 As Q$(25), 2 As Q$(26)

                NG%(13) = 1

                For X = 0 To 14:
                    LSet Q$(X + 1) = MKI$(NG%(X))
                Next

                For X = 0 To 3:
                    LSet Q$(20 + X) = diskIDs$(X)
                Next

                For X = 1 To 3:
                    LSet Q$(X + 23) = MKI$(NG%(X + 14))
                Next

                LSet Q$(16) = MKI$(score(0, 0))
                LSet Q$(17) = MKI$(score(1, 0))
                LSet Q$(18) = schedVisTm$
                LSet Q$(19) = schedHomeTm$

                Put #1, schedGame(0) + schedGame(2)

                Close #1

                schedGame(2) = schedGame(2) + 1
                autoPlay = 1

                Open "TOURNEY" For Output As #2

                Print #2, tourneyFile$

                For I = 0 To 2
                    Print #2, schedGame(I)
                Next

                Close #2

                Call TOURNEY_Game

                If schedGame(1) < schedGame(0) + schedGame(2) Then
                    Kill "TOURNEY"
                    endAllGames = 1
                End If

            End If

        End If

        Cls

        'H% = gameLoc

        For PX = 0 To 1
            For J = 0 To 13
                plyrOff_GAME!(PX, J, 16) = timePlayed(PX, J)
                plyrOff_GAME!(PX, J, 17) = plyrOff_GAME!(PX, J, 23)
                plyrOff_GAME!(PX, J, 18) = plyrOff_GAME!(PX, J, 24)
            Next
        Next

        For PX = 0 To 1

            For I = 0 To 13

                For J = 1 To 12
                    plyrOff_GAME!(PX, I, J) = plyrOff_GAME!(PX, I, J + 6)
                Next

                gameW0!(PX, I) = threeFG(PX, I, 0)
                gameW1!(PX, I) = threeFG(PX, I, 1)

            Next

        Next

        'Start with 1st team
        For idx = 0 To 1

            skipCompile% = 0

            Color 15, 0
            Cls

            Call TEAMBOX(1, idx)

            U$ = "COMPILE STATS FOR " + gameTeams$(idx) + "? (Y/N)"
            Locate , (80 - Len(U$)) / 2
            Print U$
            Color 15, 0

            If autoPlay <> 1 Then
                Do
                    I$ = GetKeyPress$
                Loop Until UCase$(I$) = "Y" Or UCase$(I$) = "N"

                If UCase$(I$) = "N" Then skipCompile% = 1

            End If

            If skipCompile% <> 1 Then

                Call COMPILESTATFILES(idx)

            End If

            statsZ!(12) = 0

        Next idx

    End If

End Sub


'----------------------------------------
'      COMPILESTATFILES Subroutine
'----------------------------------------
'This subroutine updates the various stat
'files for the corresponding team based on
'the stats generated for a completed game.
Sub COMPILESTATFILES (teamIdx)

    Shared actualAttendance&

    Shared gameAttendance&()

    Shared gameW0!(), gameW1!()
    Shared statsZ!(), statsZ1!(), statsZ2!()

    Shared powerRating(), teamScore(), oppScore()

    Shared gameSite$(), locIndicator$(), oppName$()

    statFile$ = nameStatFile$(gameTeams$(teamIdx))

    If _FileExists(diskPaths$(1) + statFile$) Then

        Open diskPaths$(1) + statFile$ For Input As #1

        Input #1, gameTeams$(teamIdx)

        For I = 0 To 13:

            Input #1, players$(teamIdx, I)

            For J = 0 To 13:
                Input #1, statsZ2!(I, J)
            Next J

            Input #1, W2(teamIdx, I)
            Input #1, W3(teamIdx, I)

        Next I

        For L = 0 To 15:
            Input #1, statsZ!(L)
        Next L

        For L = 0 To 15:
            Input #1, statsZ1!(L)
        Next L

        Close #1

    End If

    TG = 0

    For I = 0 To 13

        If plyrOff_GAME!(teamIdx, I, 2) * 2 + plyrOff_GAME!(teamIdx, I, 4) + gameW0!(teamIdx, I) > statsZ2!(I, 13) Then
            statsZ2!(I, 13) = plyrOff_GAME!(teamIdx, I, 2) * 2 + plyrOff_GAME!(teamIdx, I, 4) + gameW0!(teamIdx, I)
        End If

        If plyrOff_GAME!(teamIdx, I, 10) > 0 Then statsZ2!(I, 0) = statsZ2!(I, 0) + 1

        For J = 1 To 12

            statsZ2!(I, J) = statsZ2!(I, J) + plyrOff_GAME!(teamIdx, I, J)

            If J <> 5 And J <> 10 And J <> 11 Then
                statsZ!(J) = statsZ!(J) + plyrOff_GAME!(teamIdx, I, J)
                statsZ1!(J) = statsZ1!(J) + plyrOff_GAME!(1 - teamIdx, I, J)
            End If

        Next J

        statsZ!(0) = statsZ!(0) + plyrOff_GAME!(teamIdx, I, 10)
        TG = TG + plyrOff_GAME!(teamIdx, I, 10)

    Next I

    For I = 0 To 1

        statTotals(I) = 0

        For I1 = 0 To 13
            statTotals(I) = statTotals(I) + plyrOff_GAME!(I, I1, 5)
        Next

    Next

    statsZ!(15) = statsZ!(15) + gameR3!(teamIdx) - statTotals(teamIdx)
    statsZ1!(15) = statsZ1!(15) + gameR3!(1 - teamIdx) - statTotals(1 - teamIdx)
    statsZ!(5) = statsZ!(5) + gameR3!(teamIdx)
    statsZ1!(5) = statsZ1!(5) + gameR3!(1 - teamIdx)
    statsZ!(11) = statsZ!(11) + turnovers(teamIdx)
    statsZ1!(11) = statsZ1!(11) + turnovers(1 - teamIdx)

    For J = 0 To 13:
        statsZ!(13) = statsZ!(13) + gameW0!(teamIdx, J)
        statsZ!(14) = statsZ!(14) + gameW1!(teamIdx, J)
        statsZ1!(13) = statsZ1!(13) + gameW0!(1 - teamIdx, J)
        statsZ1!(14) = statsZ1!(14) + gameW1!(1 - teamIdx, J)
        W2(teamIdx, J) = W2(teamIdx, J) + gameW0!(teamIdx, J)
        W3(teamIdx, J) = W3(teamIdx, J) + gameW1!(teamIdx, J)
    Next J

    statsZ!(10) = statsZ!(10) + score(teamIdx, 0)
    statsZ1!(10) = statsZ1!(10) + score(1 - teamIdx, 0)

    Call TEAMBOX(1, teamIdx)
    pbpString$ = "SAVING STATS FOR " + gameTeams$(teamIdx)
    Locate , (80 - Len(pbpString$)) / 2
    Print pbpString$

    Color 15, 0

    Open diskPaths$(1) + statFile$ For Output As #2

    Print #2, gameTeams$(teamIdx)

    For I = 0 To 13:

        Print #2, players$(teamIdx, I)

        For J = 0 To 13:
            Print #2, statsZ2!(I, J)
        Next J

        Print #2, W2(teamIdx, I):
        Print #2, W3(teamIdx, I)

    Next I

    For L = 0 To 15:
        Print #2, statsZ!(L)
    Next L

    For L = 0 To 15:
        Print #2, statsZ1!(L)
    Next L

    Close #2

    Print

    numberGames = 0

    If _FileExists(diskPaths$(1) + statFile$ + "S") Then

        Open diskPaths$(1) + statFile$ + "S" For Input As #3

        Input #3, numberGames

        For I = 1 To MAX_SCHED_STATS:
            Input #3, teamScore(I)
        Next I

        For I = 1 To MAX_SCHED_STATS:
            Input #3, oppName$(I)
        Next I

        For I = 1 To MAX_SCHED_STATS:
            Input #3, oppScore(I)
        Next I

        For I = 1 To MAX_SCHED_STATS:
            Input #3, locIndicator$(I)
        Next I

        For I = 1 To MAX_SCHED_STATS
            For I1 = 0 To 1
                Input #3, powerRating(I, I1)
            Next
        Next

        For I = 1 To MAX_SCHED_STATS:
            Input #3, gameAttendance&(I)
        Next I

        For I = 1 To MAX_SCHED_STATS:
            Input #3, gameSite$(I)
        Next I

        Close #3

    End If

    If numberGames < MAX_SCHED_STATS Then numberGames = numberGames + 1
    If gameLoc = 2 And TG < 12100 Then locIndicator$(numberGames) = "N": GoTo 6540

    If gameLoc <> teamIdx And TG < 12100 Then locIndicator$(numberGames) = "V": GoTo 6540
    If gameLoc = teamIdx And TG < 12100 Then locIndicator$(numberGames) = "H": GoTo 6540

    If gameLoc = teamIdx And TG < 13600 Then locIndicator$(numberGames) = "H1": GoTo 6540
    If gameLoc = teamIdx And TG < 15100 Then locIndicator$(numberGames) = "H2": GoTo 6540
    If gameLoc = teamIdx And TG < 16600 Then locIndicator$(numberGames) = "H3": GoTo 6540
    If gameLoc = teamIdx And TG < 18100 Then locIndicator$(numberGames) = "H4": GoTo 6540

    If gameLoc = 2 And TG < 13600 Then locIndicator$(numberGames) = "N1": GoTo 6540
    If gameLoc = 2 And TG < 15100 Then locIndicator$(numberGames) = "N2": GoTo 6540
    If gameLoc = 2 And TG < 16600 Then locIndicator$(numberGames) = "N3": GoTo 6540
    If gameLoc = 2 And TG < 18100 Then locIndicator$(numberGames) = "N4": GoTo 6540

    If gameLoc <> teamIdx And TG < 13600 Then locIndicator$(numberGames) = "V1": GoTo 6540
    If gameLoc <> teamIdx And TG < 15100 Then locIndicator$(numberGames) = "V2": GoTo 6540
    If gameLoc <> teamIdx And TG < 16600 Then locIndicator$(numberGames) = "V3": GoTo 6540
    If gameLoc <> teamIdx And TG < 18100 Then locIndicator$(numberGames) = "V4": GoTo 6540

    6540 '
    teamScore(numberGames) = score(teamIdx, 0)
    oppName$(numberGames) = gameTeams$(1 - teamIdx)
    oppScore(numberGames) = score(1 - teamIdx, 0)
    gameAttendance&(numberGames) = actualAttendance&

    If teamRat_GAME(0, 9) = 0 Then teamRat_GAME(0, 9) = 78
    If teamRat_GAME(1, 9) = 0 Then teamRat_GAME(1, 9) = 78

    powerRating(numberGames, 0) = teamRat_GAME(teamIdx, 9)
    powerRating(numberGames, 1) = teamRat_GAME(1 - teamIdx, 9)

    If gameArena$(1) = "" Then gameArena$(1) = "MEMORIAL COLISEUM"

    If gameLoc = 2 Then
        gameSite$(numberGames) = "NEUTRAL SITE"
    Else
        gameSite$(numberGames) = gameArena$(1)
    End If

    Open diskPaths$(1) + statFile$ + "S" For Output As #4

    Print #4, numberGames

    For I = 1 To MAX_SCHED_STATS:
        Print #4, teamScore(I)
    Next I

    For I = 1 To MAX_SCHED_STATS:
        Print #4, oppName$(I)
    Next I

    For I = 1 To MAX_SCHED_STATS:
        Print #4, oppScore(I)
    Next I

    For I = 1 To MAX_SCHED_STATS:
        Print #4, locIndicator$(I)
    Next I

    For I = 1 To MAX_SCHED_STATS
        For I1 = 0 To 1
            Print #4, powerRating(I, I1)
        Next
    Next

    For I = 1 To MAX_SCHED_STATS:
        Print #4, gameAttendance&(I)
    Next I

    For I = 1 To MAX_SCHED_STATS:
        Print #4, gameSite$(I)
    Next I

    Close #4

    Erase powerRating, oppScore, teamScore
    Erase gameAttendance&
    Erase statsZ!, statsZ1!, statsZ2!
    Erase gameSite$

End Sub


'----------------------------------------
'          GetTeamYear Function
'----------------------------------------
'This subroutine determines the 4-digit
'team year from the team loaded by the
'file. It uses the 2 digit year to make
'assumptions. (00 to 24 are year 2000.)
'The first NCAA tournament was held in
'1939, so it's safe to guess teams from
'00 to 38 are year 2000.
Function GetTeamYear% (yearFromName$)

    teamYear% = Val(yearFromName$)

    If teamYear% >= 0 And teamYear% < 39 Then
        GetTeamYear% = 2000 + teamYear%
    Else
        GetTeamYear% = 1900 + teamYear%
    End If

End Function


'----------------------------------------
'            pbplog Function
'----------------------------------------
'This subroutine is designed to help me
'print information about where the game
'is at during the code. The general idea
'was originally to be called everywhere
'there is PBP. This helps me debug where
'issues are happening in a game.
Sub pbplog (lineNumber)

    Print #11, "Calling from "; lineNumber
    Print #11, gameTeams$(0); " vs "; gameTeams$(1)
    Print #11, pbpString$
    Print #11,

End Sub


'----------------------------------------
'       ChooseGameTeam Subroutine
'----------------------------------------
'This subroutine provides interface for
'choosing a team for the game
Sub ChooseGameTeam (yearNumber$, numberTeams, chosenIdx, teamName$, gameIdx)

    Shared previousYear$

    Shared teamIndicator$()

    Do

        Color 15, 0
        Cls

        JJ = 7

        Locate 6, 8
        Color 15, 4

        Print " " + Chr$(214); String$(61, 196); Chr$(183) + " ";

        For II = 1 To JJ
            Locate 6 + II, 8
            Print " " + Chr$(186); String$(61, 32); Chr$(186) + " ";
        Next

        Locate 7 + JJ, 8
        Print " " + Chr$(211); String$(61, 196); Chr$(189) + " ";

        Locate 7, 32

        Locate , 12: Print teamIndicator$(gameIdx)
        Locate , 12: Print "ENTER DISK ID: "
        Print
        Locate , 12: Print "THE DISK ID IS USUALLY THE LAST TWO DIGITS OF THE"
        Locate , 12: Print "SEASON DISK YOU ARE PLAYING FROM (IE. 89, 76, 67)."
        Print
        Locate , 12: Print "HIT <ENTER> TO USE PREVIOUS ID"
        Locate 8,

        I$ = GetKeyPress$

        If I$ <> Chr$(27) Then

            If I$ <> Chr$(13) Then

                Locate 7, 27: Print I$;

                NY$ = ""

                Do Until NY$ = Chr$(13)

                    NY$ = GetKeyPress$

                    If NY$ = Chr$(8) And Len(I$) >= 1 Then
                        col% = Pos(0)
                        I$ = Left$(I$, (Len(I$) - 1))
                        Locate , col% - 1
                        Print " ";
                        Locate , col% - 1
                    Else
                        I$ = I$ + NY$
                        Print NY$;
                    End If

                Loop

                I$ = Left$(I$, (Len(I$) - 1))

                If Not (I$ = "" And yearNumber$ <> "") Then

                    yearNumber$ = RTrim$(I$)
                    Erase teamNames$
                    numberTeams = 0

                    Cls

                    If Not _FileExists(diskPaths$(0) + TEAM_FILE_NAME$ + "." + yearNumber$) Then

                        MsgText$ = "NO TEAM FILES WERE FOUND MATCHING THIS ID. PRESS ANY KEY TO RETURN TO MAIN MENU"
                        BoxWidth = 20
                        BoxHeight = (Len(MsgText$) / BoxWidth) + 3 'top and box lines + 1 extra
                        Locate ((25 - BoxHeight) / 2), (80 - ((BoxWidth + 2) / 2))
                        Call CSMsgBox(MsgText$, BoxWidth, PASS)
                        I$ = GetKeyPress$
                        Call CSMsgBox("", 0, PASS)
                        Exit Sub

                    Else

                        Open diskPaths$(0) + TEAM_FILE_NAME$ + "." + yearNumber$ For Random As #1 Len = TEAM_SIZE_BYTES

                        fileLength& = LOF(1)

                        Field #1, 15 As Q$(0)

                        numberTeams = fileLength& / TEAM_SIZE_BYTES

                        For teamIdx = 1 To numberTeams
                            Get #1, teamIdx
                            'numberTeams = numberTeams + 1
                            teamNames$(teamIdx) = Q$(0)
                            teamIndex%(teamIdx) = teamIdx
                        Next teamIdx

                        Close #1

                        previousYear$ = yearNumber$

                    End If 'Done checking if file exists

                End If 'Done checking for blank year number

            Else

                yearNumber$ = previousYear$

            End If 'Done checking for ENTER key

            'Locate 2, 33
            'Color 31: Print "LOADING..."

            Do

                Call SelectGameTeam(numberTeams, yearNumber$, chosenIdx, teamName$, ExitCode%, gameIdx)

                If ExitCode% <> 27 And numberTeams <> 0 Then

                    Do
                        Locate 2, 33
                        Color teamRat_GAME(gameIdx, 0), teamRat_GAME(gameIdx, 1): Print teamName$

                        Color 15, 4
                        Locate 3, 32: Print "ANY CHANGE? (Y/N)";

                        J$ = GetKeyPress$

                    Loop Until J$ = Chr$(27) Or UCase$(J$) = "Y" Or UCase$(J$) = "N"

                End If

            Loop Until ExitCode% = 27 Or J$ = Chr$(27) Or UCase$(J$) = "N"

        End If 'Done checking for ESC

    Loop Until UCase$(J$) = "N" Or I$ = Chr$(27) 'Or J$ = Chr$(27)

    If I$ = Chr$(27) Or J$ = Chr$(27) Then chosenIdx = 0

End Sub


'----------------------------------------
'       SelectGameTeam Subroutine
'----------------------------------------
'This subroutine provides an interface for
'selecting a team from the list loaded by
'the disk ID.
Sub SelectGameTeam (numberTeams, yearNumber$, selectedIdx, teamName$, ExitCode%, gameIdx)

    If numberTeams > 0 Then

        SELECTION% = 1
        Count% = numberTeams
        Start% = 1
        FileFGColor% = 15: FileBGColor% = 4
        HiLiteFGColor% = 0: HiLiteBGColor% = 7
        Rows% = 20
        Columns% = 4
        Spacing% = 6
        Row% = 4
        Column% = 1

        Color , 4
        Cls
        Color 14
        Locate , 33: Print "TEAM SELECTION"
        Locate 25, 1
        Color 14: Print "ESC";
        Color 15: Print "-SELECT NEW ID  PGDN  PGUP  ";
        Color 14: Print "ENTER";
        Color 15: Print "-SELECTS TEAM";

        _MouseShow "DEFAULT"
        MAMenu teamNames$(), SELECTION%, Start%, Count%, ExitCode%, FileFGColor%, FileBGColor%, HiLiteFGColor%, HiLiteBGColor%, Rows%, Columns%, Spacing%, Row%, Column%
        _MouseHide

        If ExitCode% <> 27 Then

            selectedIdx = teamIndex%(SELECTION%)

            'Locate 2, 33
            'Color 31: Print "LOADING..."

            Call ReadGameTeam(yearNumber$, teamName$, selectedIdx, gameIdx)

        End If

    End If

End Sub


'----------------------------------------
'        ReadGameTeam Subroutine
'----------------------------------------
'This subroutine reads in the data for the
'selected tema into each of the data arrays
'needed by the game.
Sub ReadGameTeam (YN$, targetTeam$, I1, gameIdx)

    Shared avgAttendance&()

    Shared d3FG_Adj(), d3FGA_Adj()

    teamYear$ = RTrim$(YN$)

    Open diskPaths$(0) + TEAM_FILE_NAME$ + "." + teamYear$ For Random As #1 Len = TEAM_SIZE_BYTES

    Field #1, 15 As Q$(0), 2 As Q$(1), 2 As Q$(2), 2 As Q$(3), 2 As Q$(4), 2 As Q$(5), 2 As Q$(6), 2 As Q$(7), 2 As Q$(8), 2 As Q$(9), 2 As Q$(10), 2 As Q$(11), 2 As Q$(12), 2 As Q$(13), 2 As Q$(14), 2 As Q$(15), 2 As Q$(16), 2 As Q$(17), 2 As Q$(18), 2 As Q$(19), 602 As X$

    For I = 0 To 13
        Field #1, 53 + I * 43 As X$, 15 As Q$(I * 15 + 20), 2 As Q$(I * 15 + 21), 2 As Q$(I * 15 + 22), 2 As Q$(I * 15 + 23), 2 As Q$(I * 15 + 24), 2 As Q$(I * 15 + 25), 2 As Q$(I * 15 + 26), 2 As Q$(I * 15 + 27), 2 As Q$(I * 15 + 28), 2 As Q$(I * 15 + 29), 2 As Q$(I * 15 + 30), 2 As Q$(I * 15 + 31), 2 As Q$(I * 15 + 32), 2 As Q$(I * 15 + 33), 2 As Q$(I * 15 + 34), TEAM_SIZE_BYTES - 53 - 43 - I * 43 As X$
    Next

    Get #1, I1

    targetTeam$ = RTrim$(Q$(0))
    teamStamina(gameIdx) = CVI(Q$(1))
    dFGPA(gameIdx) = CVI(Q$(2))
    d3FG_Adj(gameIdx) = CVI(Q$(3))
    d3FGA_Adj(gameIdx) = CVI(Q$(4))

    For I3 = 0 To 4:
        leagRat_GAME(gameIdx, I3) = CVI(Q$(I3 + 5))
    Next

    For I3 = 0 To 9:
        teamRat_GAME(gameIdx, I3) = CVI(Q$(I3 + 10))
    Next

    For I3 = 0 To 13
        players$(gameIdx, I3) = RTrim$(Q$(I3 * 15 + 20))

        For I4 = 0 To 6
            plyrOff_GAME!(gameIdx, I3, I4) = CVI(Q$(I3 * 15 + I4 + 21))
            plyrRat_GAME(gameIdx, I3, I4) = CVI(Q$(I3 * 15 + I4 + 28))
        Next
    Next

    Close #1

    'FY% = 2 * (Average FGA/G for this team (Off + Def) - League FGA/G)
    FY%(gameIdx) = 2 * teamRat_GAME(gameIdx, 3) - teamRat_GAME(gameIdx, 4)

    CNT% = 0
    CNTX% = 0

    Do
        If teamRat_GAME(gameIdx, 5) <> 0 Then

            For I = 0 To 13

                If rosterStatus(gameIdx, I) = -1 Then rosterStatus(gameIdx, I) = 0

                Call d100(RN0)

                If UCase$(players$(gameIdx, I)) = "XXX" Then
                    CNTX% = CNTX% + 1
                End If

                If UCase$(players$(gameIdx, I)) = "XXX" Or (rosterStatus(gameIdx, I) = 0 And RN0 > Int(plyrRat_GAME(gameIdx, I, 0) / teamRat_GAME(gameIdx, 5) * 100 + .5)) Then
                    rosterStatus(gameIdx, I) = -1
                End If

            Next

            For I = 0 To 13:
                If rosterStatus(gameIdx, I) = 0 Then CNT% = CNT% + 1
            Next

        End If

    Loop Until (CNT% < 10 And CNTX% < 4) Or (CNTX% >= 5 And CNT% < 8)

    Open diskPaths$(0) + DATA_FILE_NAME$ + "." + teamYear$ As #2 Len = DATA_SIZE_BYTES

    Field #2, 15 As Q$(0), 40 As Q$(1), 15 As Q$(2), 4 As Q$(3)

    For I = 0 To 13
        Field #2, 74 + I * 32 As X$, 2 As Q$(I * 16 + 4), 2 As Q$(I * 16 + 5), 2 As Q$(I * 16 + 6), 2 As Q$(I * 16 + 7), 2 As Q$(I * 16 + 8), 2 As Q$(I * 16 + 9), 2 As Q$(I * 16 + 10), 2 As Q$(I * 16 + 11), 2 As Q$(I * 16 + 12), 2 As Q$(I * 16 + 13), 2 As Q$(I * 16 + 14), 2 As Q$(I * 16 + 15), 2 As Q$(I * 16 + 16), 2 As Q$(I * 16 + 17), 2 As Q$(I * 16 + 18), 2 As Q$(I * 16 + 19)
        Field #2, 522 As X$, 2 As Q$(228), 2 As Q$(229), 2 As Q$(230), 2 As Q$(231), 2 As Q$(232), 2 As Q$(233), 2 As Q$(234), 2 As Q$(235), 2 As Q$(236), 2 As Q$(237), 2 As Q$(238), 2 As Q$(239), 2 As Q$(240), 2 As Q$(241), 2 As Q$(242), 2 As Q$(243), 2 As Q$(244), 2 As Q$(245), 2 As Q$(246), 2 As Q$(247), 2 As Q$(248), 2 As Q$(249)
    Next

    Get #2, I1

    gameCoaches$(gameIdx) = Q$(0)
    gameArena$(gameIdx) = Q$(1)
    gameMascots$(gameIdx) = Q$(2)
    avgAttendance&(gameIdx) = CVL(Q$(3))

    For I = 0 To 13

        playerDef_GAME(gameIdx, I) = CVI(Q$(I * 16 + 4))
        positions_GAME$(gameIdx, I) = Q$(I * 16 + 5)

        For I1 = 0 To 13
            playerStat_GAME(gameIdx, I, I1) = CVI(Q$(I * 16 + I1 + 6))
        Next

    Next

    For I = 0 To 20
        teamStats_GAME(gameIdx, I) = CVI(Q$(228 + I))
    Next

    CK = CVI(Q$(249))

    Close #2

    If CK <> 999 Then

        gameCoaches$(gameIdx) = ""
        gameArena$(gameIdx) = ""
        gameMascots$(gameIdx) = ""
        avgAttendance&(gameIdx) = 0

        For I = 0 To 13:
            playerDef_GAME(gameIdx, I) = 5
            positions_GAME$(gameIdx, I) = ""

            For I1 = 0 To 13
                playerStat_GAME(gameIdx, I, I1) = 0
            Next
        Next

        For I = 0 To 20:
            teamStats_GAME(gameIdx, I) = 0
        Next

    End If

End Sub


'----------------------------------------
'        CheckRecords Subroutine
'----------------------------------------
'This subroutine checks all stats to see
'if any records were broken. Any that have
'been reached will be assigned to arrays
'for later updating the files.
Sub CheckRecords ()

    Shared indRecDesc$(), teamRecDesc$()
    Shared indRecords!(), teamRecords!()

    Dim V8(1, 14)
    Dim VERSUS$(1)

    VERSUS$(0) = "AT"
    VERSUS$(1) = "VS."

    If _FileExists(diskPaths$(1) + "RECORDS.GAM") Then

        Open diskPaths$(1) + "RECORDS.GAM" For Input As #1

        For I = 0 To 48
            For I1 = 0 To 2
                Input #1, indRecords!(I, I1)
            Next
            For I1 = 0 To 4
                Input #1, indRecDesc$(I, I1)
            Next
        Next

        For I = 0 To 125
            For I1 = 0 To 2
                Input #1, teamRecords!(I, I1)
            Next
            For I1 = 0 To 3
                Input #1, teamRecDesc$(I, I1)
            Next
        Next

        Close #1

    Else

        teamRecords!(2, 0) = 999
        teamRecords!(4, 0) = 999
        teamRecords!(7, 0) = 999
        teamRecords!(9, 0) = 999
        teamRecords!(11, 0) = 999
        teamRecords!(13, 0) = 999
        teamRecords!(15, 0) = 999
        teamRecords!(17, 0) = 999
        teamRecords!(19, 0) = 999
        teamRecords!(21, 0) = 999
        teamRecords!(23, 0) = 999
        teamRecords!(25, 0) = 999
        teamRecords!(27, 0) = 999
        teamRecords!(29, 0) = 999
        teamRecords!(31, 0) = 999
        teamRecords!(33, 0) = 999
        teamRecords!(35, 0) = 999
        teamRecords!(37, 0) = 999
        teamRecords!(43, 0) = 999
        teamRecords!(45, 0) = 999
        teamRecords!(61, 0) = 999
        teamRecords!(63, 0) = 999
        teamRecords!(65, 0) = 999
        teamRecords!(67, 0) = 999
        teamRecords!(73, 0) = 999
        teamRecords!(75, 0) = 999
        teamRecords!(81, 0) = 999
        teamRecords!(83, 0) = 999
        teamRecords!(87, 0) = 999
        teamRecords!(89, 0) = 999
        teamRecords!(92, 0) = 999
        teamRecords!(94, 0) = 999
        teamRecords!(97, 0) = 999
        teamRecords!(99, 0) = 999
        teamRecords!(105, 0) = 999
        teamRecords!(107, 0) = 999
        teamRecords!(113, 0) = 999
        teamRecords!(115, 0) = 999
        teamRecords!(120, 0) = 999
        teamRecords!(123, 0) = 999
        teamRecords!(125, 0) = 999

    End If

    'CHECK THE INDIVIDUAL RECORDS

    For I = 0 To 1

        For I1 = 0 To 13

            ' SCORING RECORDS FOR POINTS IN A GAME, HALF, QUARTER AND OVERTIME PERIOD
            If plyrOff_GAME!(I, I1, 8) * 2 + plyrOff_GAME!(I, I1, 10) + threeFG(I, I1, 0) > indRecords!(0, 0) Then
                indRecords!(0, 0) = plyrOff_GAME!(I, I1, 8) * 2 + plyrOff_GAME!(I, I1, 10) + threeFG(I, I1, 0) ' POINTS
                indRecords!(0, 1) = 1 ' TIMES DONE
                indRecords!(0, 2) = 0 ' GAME
                indRecDesc$(0, 0) = players$(I, I1) ' NAME
                indRecDesc$(0, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(0, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(0, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(0, 4) = Date$ ' DATE
            End If

            If QQ(I, 1, I1, 13) > indRecords!(1, 0) Then
                indRecords!(1, 0) = QQ(I, 1, I1, 13) ' POINTS
                indRecords!(1, 1) = 1 ' TIMES DONE
                indRecords!(1, 2) = 1 ' HALF
                indRecDesc$(1, 0) = players$(I, I1) ' NAME
                indRecDesc$(1, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(1, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(1, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(1, 4) = Date$ ' DATE
            End If

            If QQ(I, 2, I1, 13) > indRecords!(1, 0) Then
                indRecords!(1, 0) = QQ(I, 2, I1, 13) ' POINTS
                indRecords!(1, 1) = 1 ' TIMES DONE
                indRecords!(1, 2) = 2 ' HALF
                indRecDesc$(1, 0) = players$(I, I1) ' NAME
                indRecDesc$(1, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(1, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(1, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(1, 4) = Date$ ' DATE
            End If

            For I2 = 3 To 8
                If QQ(I, I2, I1, 13) > indRecords!(3, 0) Then
                    indRecords!(3, 0) = QQ(I, I2, I1, 13) ' POINTS
                    indRecords!(3, 1) = 1 ' TIMES DONE
                    indRecords!(3, 2) = I2 ' QTR
                    indRecDesc$(3, 0) = players$(I, I1) ' NAME
                    indRecDesc$(3, 1) = gameTeams$(I) ' TEAM
                    indRecDesc$(3, 2) = VERSUS$(I) ' AT/VS
                    indRecDesc$(3, 3) = gameTeams$(1 - I) ' OPPONENT
                    indRecDesc$(3, 4) = Date$ ' DATE
                End If
            Next I2

            ' FIELD GOAL PERCENTAGE RECORDS FOR HIGH %, MOST W/NO MISSES, MOST W/NONE MADE
            If plyrOff_GAME!(I, I1, 8) >= 15 And plyrOff_GAME!(I, I1, 7) <> 0 Then
                If plyrOff_GAME!(I, I1, 8) / plyrOff_GAME!(I, I1, 7) > indRecords!(4, 0) Then
                    indRecords!(4, 0) = plyrOff_GAME!(I, I1, 8) / plyrOff_GAME!(I, I1, 7) ' PCTG
                    indRecords!(4, 1) = plyrOff_GAME!(I, I1, 8) ' FGM
                    indRecords!(4, 2) = plyrOff_GAME!(I, I1, 7) ' FGA
                    indRecDesc$(4, 0) = players$(I, I1) ' NAME
                    indRecDesc$(4, 1) = gameTeams$(I) ' TEAM
                    indRecDesc$(4, 2) = VERSUS$(I) ' AT/VS
                    indRecDesc$(4, 3) = gameTeams$(1 - I) ' OPPONENT
                    indRecDesc$(4, 4) = Date$ ' DATE
                End If
            End If

            If plyrOff_GAME!(I, I1, 8) = plyrOff_GAME!(I, I1, 7) And plyrOff_GAME!(I, I1, 7) > indRecords!(5, 0) Then
                indRecords!(5, 0) = plyrOff_GAME!(I, I1, 7) ' MOST FGM
                indRecDesc$(5, 0) = players$(I, I1) ' NAME
                indRecDesc$(5, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(5, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(5, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(5, 4) = Date$ ' DATE
            End If

            If plyrOff_GAME!(I, I1, 8) = 0 And plyrOff_GAME!(I, I1, 7) > indRecords!(6, 0) Then
                indRecords!(6, 0) = plyrOff_GAME!(I, I1, 7) ' 0 FGM /FGA
                indRecDesc$(6, 0) = players$(I, I1) ' NAME
                indRecDesc$(6, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(6, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(6, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(6, 4) = Date$ ' DATE
            End If

            ' FIELD GOALS MADE IN A GAME, HALF, QUARTER AND OVERTIME PERIOD
            If plyrOff_GAME!(I, I1, 8) > indRecords!(7, 0) Then
                indRecords!(7, 0) = plyrOff_GAME!(I, I1, 8) ' FGM
                indRecords!(7, 1) = 1 ' TIMES DONE
                indRecords!(7, 2) = 0 ' GAME
                indRecDesc$(7, 0) = players$(I, I1) ' NAME
                indRecDesc$(7, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(7, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(7, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(7, 4) = Date$ ' DATE
            End If

            If QQ(I, 1, I1, 2) > indRecords!(8, 0) Then
                indRecords!(8, 0) = QQ(I, 1, I1, 2) ' FGM
                indRecords!(8, 1) = 1 ' TIMES DONE
                indRecords!(8, 2) = 1 ' HALF
                indRecDesc$(8, 0) = players$(I, I1) ' NAME
                indRecDesc$(8, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(8, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(8, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(8, 4) = Date$ ' DATE
            End If

            If QQ(I, 2, I1, 2) > indRecords!(8, 0) Then
                indRecords!(8, 0) = QQ(I, 2, I1, 2) ' FGM
                indRecords!(8, 1) = 1 ' TIMES DONE
                indRecords!(8, 2) = 2 ' HALF
                indRecDesc$(8, 0) = players$(I, I1) ' NAME
                indRecDesc$(8, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(8, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(8, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(8, 4) = Date$ ' DATE
            End If

            For I2 = 3 To 8
                If QQ(I, I2, I1, 2) > indRecords!(10, 0) Then
                    indRecords!(10, 0) = QQ(I, I2, I1, 2) ' FGM
                    indRecords!(10, 1) = 1 ' TIMES DONE
                    indRecords!(10, 2) = I2 ' QTR
                    indRecDesc$(10, 0) = players$(I, I1) ' NAME
                    indRecDesc$(10, 1) = gameTeams$(I) ' TEAM
                    indRecDesc$(10, 2) = VERSUS$(I) ' AT/VS
                    indRecDesc$(10, 3) = gameTeams$(1 - I) ' OPPONENT
                    indRecDesc$(10, 4) = Date$ ' DATE
                End If
            Next I2

            ' FIELD GOAL ATTEMPTS MADE IN A GAME, HALF, QUARTER AND OVERTIME PERIOD
            If plyrOff_GAME!(I, I1, 7) > indRecords!(11, 0) Then
                indRecords!(11, 0) = plyrOff_GAME!(I, I1, 7) ' FGA
                indRecords!(11, 1) = 1 ' TIMES DONE
                indRecords!(11, 2) = 0 ' GAME
                indRecDesc$(11, 0) = players$(I, I1) ' NAME
                indRecDesc$(11, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(11, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(11, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(11, 4) = Date$ ' DATE
            End If

            If QQ(I, 1, I1, 1) > indRecords!(12, 0) Then
                indRecords!(12, 0) = QQ(I, 1, I1, 1) ' FGA
                indRecords!(12, 1) = 1 ' TIMES DONE
                indRecords!(12, 2) = 1 ' HALF
                indRecDesc$(12, 0) = players$(I, I1) ' NAME
                indRecDesc$(12, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(12, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(12, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(12, 4) = Date$ ' DATE
            End If

            If QQ(I, 2, I1, 1) > indRecords!(12, 0) Then
                indRecords!(12, 0) = QQ(I, 2, I1, 1) ' FGA
                indRecords!(12, 1) = 1 ' TIMES DONE
                indRecords!(12, 2) = 2 ' HALF
                indRecDesc$(12, 0) = players$(I, I1) ' NAME
                indRecDesc$(12, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(12, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(12, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(12, 4) = Date$ ' DATE
            End If

            For I2 = 3 To 8
                If QQ(I, I2, I1, 1) > indRecords!(14, 0) Then
                    indRecords!(14, 0) = QQ(I, I2, I1, 1) ' FGA
                    indRecords!(14, 1) = 1 ' TIMES DONE
                    indRecords!(14, 2) = I2 ' QTR
                    indRecDesc$(14, 0) = players$(I, I1) ' NAME
                    indRecDesc$(14, 1) = gameTeams$(I) ' TEAM
                    indRecDesc$(14, 2) = VERSUS$(I) ' AT/VS
                    indRecDesc$(14, 3) = gameTeams$(1 - I) ' OPPONENT
                    indRecDesc$(14, 4) = Date$ ' DATE
                End If
            Next I2

            ' THREE-POINT FIELD GOALS MOST MADE NO MISSES, MOST ATT NONE MADE
            If threeFG(I, I1, 0) = threeFG(I, I1, 1) And threeFG(I, I1, 0) > indRecords!(15, 0) Then
                indRecords!(15, 0) = threeFG(I, I1, 0) ' MOST 3-FGM
                indRecDesc$(15, 0) = players$(I, I1) ' NAME
                indRecDesc$(15, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(15, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(15, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(15, 4) = Date$ ' DATE
            End If

            If threeFG(I, I1, 0) = 0 And threeFG(I, I1, 1) > indRecords!(16, 0) Then
                indRecords!(16, 0) = threeFG(I, I1, 1) ' 0 3FGM /3FGA
                indRecDesc$(16, 0) = players$(I, I1) ' NAME
                indRecDesc$(16, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(16, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(16, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(16, 4) = Date$ ' DATE
            End If

            ' 3-FIELD GOALS MADE IN A GAME, HALF, QUARTER AND OVERTIME PERIOD
            If threeFG(I, I1, 0) > indRecords!(17, 0) Then
                indRecords!(17, 0) = threeFG(I, I1, 0) ' 3FGM
                indRecords!(17, 1) = 1 ' TIMES DONE
                indRecords!(17, 2) = 0 ' GAME
                indRecDesc$(17, 0) = players$(I, I1) ' NAME
                indRecDesc$(17, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(17, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(17, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(17, 4) = Date$ ' DATE
            End If

            If QQ(I, 1, I1, 10) > indRecords!(18, 0) Then
                indRecords!(18, 0) = QQ(I, 1, I1, 10) ' 3FGM
                indRecords!(18, 1) = 1 ' TIMES DONE
                indRecords!(18, 2) = 1 ' HALF
                indRecDesc$(18, 0) = players$(I, I1) ' NAME
                indRecDesc$(18, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(18, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(18, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(18, 4) = Date$ ' DATE
            End If

            If QQ(I, 2, I1, 10) > indRecords!(18, 0) Then
                indRecords!(18, 0) = QQ(I, 2, I1, 10) ' 3FGM
                indRecords!(18, 1) = 1 ' TIMES DONE
                indRecords!(18, 2) = 2 ' HALF
                indRecDesc$(18, 0) = players$(I, I1) ' NAME
                indRecDesc$(18, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(18, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(18, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(18, 4) = Date$ ' DATE
            End If

            For I2 = 3 To 8
                If QQ(I, I2, I1, 10) > indRecords!(20, 0) Then
                    indRecords!(20, 0) = QQ(I, I2, I1, 10) ' 3FGM
                    indRecords!(20, 1) = 1 ' TIMES DONE
                    indRecords!(20, 2) = I2 ' QTR
                    indRecDesc$(20, 0) = players$(I, I1) ' NAME
                    indRecDesc$(20, 1) = gameTeams$(I) ' TEAM
                    indRecDesc$(20, 2) = VERSUS$(I) ' AT/VS
                    indRecDesc$(20, 3) = gameTeams$(1 - I) ' OPPONENT
                    indRecDesc$(20, 4) = Date$ ' DATE
                End If
            Next I2

            ' 3-FIELD GOALS ATT IN A GAME, HALF
            If threeFG(I, I1, 1) > indRecords!(21, 0) Then
                indRecords!(21, 0) = threeFG(I, I1, 1) ' 3FGA
                indRecords!(21, 1) = 1 ' TIMES DONE
                indRecords!(21, 2) = 0 ' GAME
                indRecDesc$(21, 0) = players$(I, I1) ' NAME
                indRecDesc$(21, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(21, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(21, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(21, 4) = Date$ ' DATE
            End If

            If QQ(I, 1, I1, 11) > indRecords!(22, 0) Then
                indRecords!(22, 0) = QQ(I, 1, I1, 11) ' 3FGA
                indRecords!(22, 1) = 1 ' TIMES DONE
                indRecords!(22, 2) = 1 ' HALF
                indRecDesc$(22, 0) = players$(I, I1) ' NAME
                indRecDesc$(22, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(22, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(22, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(22, 4) = Date$ ' DATE
            End If

            If QQ(I, 2, I1, 11) > indRecords!(22, 0) Then
                indRecords!(22, 0) = QQ(I, 2, I1, 10) ' 3FGA
                indRecords!(22, 1) = 1 ' TIMES DONE
                indRecords!(22, 2) = 2 ' HALF
                indRecDesc$(22, 0) = players$(I, I1) ' NAME
                indRecDesc$(22, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(22, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(22, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(22, 4) = Date$ ' DATE
            End If

            ' FREE THROWS -  MOST MADE NO MISSES, MOST ATT NONE MADE
            If plyrOff_GAME!(I, I1, 9) = plyrOff_GAME!(I, I1, 10) And plyrOff_GAME!(I, I1, 9) > indRecords!(23, 0) Then
                indRecords!(23, 0) = plyrOff_GAME!(I, I1, 9) ' MOST FTM
                indRecDesc$(23, 0) = players$(I, I1) ' NAME
                indRecDesc$(23, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(23, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(23, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(23, 4) = Date$ ' DATE
            End If

            If plyrOff_GAME!(I, I1, 10) = 0 And plyrOff_GAME!(I, I1, 9) > indRecords!(24, 0) Then
                indRecords!(24, 0) = plyrOff_GAME!(I, I1, 10) ' 0 FTM /FTA
                indRecDesc$(24, 0) = players$(I, I1) ' NAME
                indRecDesc$(24, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(24, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(24, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(24, 4) = Date$ ' DATE
            End If

            ' MADE FREE THROWS IN A GAME, HALF, QUARTER
            If plyrOff_GAME!(I, I1, 10) > indRecords!(25, 0) Then
                indRecords!(25, 0) = plyrOff_GAME!(I, I1, 10) ' FTM
                indRecords!(25, 1) = 1 ' TIMES DONE
                indRecords!(25, 2) = 0 ' GAME
                indRecDesc$(25, 0) = players$(I, I1) ' NAME
                indRecDesc$(25, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(25, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(25, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(25, 4) = Date$ ' DATE
            End If

            If QQ(I, 1, I1, 4) > indRecords!(26, 0) Then
                indRecords!(26, 0) = QQ(I, 1, I1, 4) ' FTM
                indRecords!(26, 1) = 1 ' TIMES DONE
                indRecords!(26, 2) = 1 ' HALF
                indRecDesc$(26, 0) = players$(I, I1) ' NAME
                indRecDesc$(26, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(26, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(26, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(26, 4) = Date$ ' DATE
            End If

            If QQ(I, 2, I1, 4) > indRecords!(26, 0) Then
                indRecords!(26, 0) = QQ(I, 2, I1, 4) ' FTM
                indRecords!(26, 1) = 1 ' TIMES DONE
                indRecords!(26, 2) = 2 ' HALF
                indRecDesc$(26, 0) = players$(I, I1) ' NAME
                indRecDesc$(26, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(26, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(26, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(26, 4) = Date$ ' DATE
            End If

            ' FREE THROWS ATTEMPTS IN A GAME, HALF, QUARTER
            If plyrOff_GAME!(I, I1, 9) > indRecords!(28, 0) Then
                indRecords!(28, 0) = plyrOff_GAME!(I, I1, 9) ' FTA
                indRecords!(28, 1) = 1 ' TIMES DONE
                indRecords!(28, 2) = 0 ' GAME
                indRecDesc$(28, 0) = players$(I, I1) ' NAME
                indRecDesc$(28, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(28, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(28, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(28, 4) = Date$ ' DATE
            End If

            If QQ(I, 1, I1, 3) > indRecords!(29, 0) Then
                indRecords!(29, 0) = QQ(I, 1, I1, 3) ' FTA
                indRecords!(29, 1) = 1 ' TIMES DONE
                indRecords!(29, 2) = 1 ' HALF
                indRecDesc$(29, 0) = players$(I, I1) ' NAME
                indRecDesc$(29, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(29, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(29, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(29, 4) = Date$ ' DATE
            End If

            If QQ(I, 2, I1, 3) > indRecords!(29, 0) Then
                indRecords!(29, 0) = QQ(I, 2, I1, 3) ' FTM
                indRecords!(29, 1) = 1 ' TIMES DONE
                indRecords!(29, 2) = 2 ' HALF
                indRecDesc$(29, 0) = players$(I, I1) ' NAME
                indRecDesc$(29, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(29, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(29, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(29, 4) = Date$ ' DATE
            End If

            ' TOTAL REBOUNDS IN A GAME, HALF, QUARTER
            If plyrOff_GAME!(I, I1, 11) > indRecords!(31, 0) Then
                indRecords!(31, 0) = plyrOff_GAME!(I, I1, 11) ' FTA
                indRecords!(31, 1) = 1 ' TIMES DONE
                indRecords!(31, 2) = 0 ' GAME
                indRecDesc$(31, 0) = players$(I, I1) ' NAME
                indRecDesc$(31, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(31, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(31, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(31, 4) = Date$ ' DATE
            End If

            If QQ(I, 1, I1, 5) > indRecords!(32, 0) Then
                indRecords!(32, 0) = QQ(I, 1, I1, 5) ' RB
                indRecords!(32, 1) = 1 ' TIMES DONE
                indRecords!(32, 2) = 1 ' HALF
                indRecDesc$(32, 0) = players$(I, I1) ' NAME
                indRecDesc$(32, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(32, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(32, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(32, 4) = Date$ ' DATE
            End If

            If QQ(I, 2, I1, 5) > indRecords!(32, 0) Then
                indRecords!(32, 0) = QQ(I, 2, I1, 5) ' RB
                indRecords!(32, 1) = 1 ' TIMES DONE
                indRecords!(32, 2) = 2 ' HALF
                indRecDesc$(32, 0) = players$(I, I1) ' NAME
                indRecDesc$(32, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(32, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(32, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(32, 4) = Date$ ' DATE
            End If

            ' TOTAL OFFENSIVE REBOUNDS IN A GAME, HALF, QUARTER
            If plyrOff_GAME!(I, I1, 24) > indRecords!(34, 0) Then
                indRecords!(34, 0) = plyrOff_GAME!(I, I1, 24) ' FTA
                indRecords!(34, 1) = 1 ' TIMES DONE
                indRecords!(34, 2) = 0 ' GAME
                indRecDesc$(34, 0) = players$(I, I1) ' NAME
                indRecDesc$(34, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(34, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(34, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(34, 4) = Date$ ' DATE
            End If

            If QQ(I, 1, I1, 12) > indRecords!(35, 0) Then
                indRecords!(35, 0) = QQ(I, 1, I1, 12) ' RB
                indRecords!(35, 1) = 1 ' TIMES DONE
                indRecords!(35, 2) = 1 ' HALF
                indRecDesc$(35, 0) = players$(I, I1) ' NAME
                indRecDesc$(35, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(35, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(35, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(35, 4) = Date$ ' DATE
            End If

            If QQ(I, 2, I1, 12) > indRecords!(35, 0) Then
                indRecords!(35, 0) = QQ(I, 2, I1, 12) ' RB
                indRecords!(35, 1) = 1 ' TIMES DONE
                indRecords!(35, 2) = 2 ' HALF
                indRecDesc$(35, 0) = players$(I, I1) ' NAME
                indRecDesc$(35, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(35, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(35, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(35, 4) = Date$ ' DATE
            End If

            ' TOTAL DEFENSIVE REBOUNDS IN A GAME, HALF, QUARTER
            If plyrOff_GAME!(I, I1, 11) - plyrOff_GAME!(I, I1, 24) > indRecords!(37, 0) Then
                indRecords!(37, 0) = plyrOff_GAME!(I, I1, 11) - plyrOff_GAME!(I, I1, 24) ' FTA
                indRecords!(37, 1) = 1 ' TIMES DONE
                indRecords!(37, 2) = 0 ' GAME
                indRecDesc$(37, 0) = players$(I, I1) ' NAME
                indRecDesc$(37, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(37, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(37, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(37, 4) = Date$ ' DATE
            End If

            If QQ(I, 1, I1, 5) - QQ(I, 1, I1, 12) > indRecords!(38, 0) Then
                indRecords!(38, 0) = QQ(I, 1, I1, 5) - QQ(I, 1, I1, 12) ' RB
                indRecords!(38, 1) = 1 ' TIMES DONE
                indRecords!(38, 2) = 1 ' HALF
                indRecDesc$(38, 0) = players$(I, I1) ' NAME
                indRecDesc$(38, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(38, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(38, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(38, 4) = Date$ ' DATE
            End If

            If QQ(I, 2, I1, 5) - QQ(I, 2, I1, 12) > indRecords!(38, 0) Then
                indRecords!(38, 0) = QQ(I, 2, I1, 5) - QQ(I, 2, I1, 12) ' RB
                indRecords!(38, 1) = 1 ' TIMES DONE
                indRecords!(38, 2) = 2 ' HALF
                indRecDesc$(38, 0) = players$(I, I1) ' NAME
                indRecDesc$(38, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(38, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(38, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(38, 4) = Date$ ' DATE
            End If

            ' ASSISTS IN A GAME, HALF, QUARTER
            If plyrOff_GAME!(I, I1, 14) > indRecords!(40, 0) Then
                indRecords!(40, 0) = plyrOff_GAME!(I, I1, 14) ' FTA
                indRecords!(40, 1) = 1 ' TIMES DONE
                indRecords!(40, 2) = 0 ' GAME
                indRecDesc$(40, 0) = players$(I, I1) ' NAME
                indRecDesc$(40, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(40, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(40, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(40, 4) = Date$ ' DATE
            End If

            If QQ(I, 1, I1, 8) > indRecords!(41, 0) Then
                indRecords!(41, 0) = QQ(I, 1, I1, 8) ' FTA
                indRecords!(41, 1) = 1 ' TIMES DONE
                indRecords!(41, 2) = 1 ' HALF
                indRecDesc$(41, 0) = players$(I, I1) ' NAME
                indRecDesc$(41, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(41, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(41, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(41, 4) = Date$ ' DATE
            End If

            If QQ(I, 2, I1, 8) > indRecords!(41, 0) Then
                indRecords!(41, 0) = QQ(I, 2, I1, 8) ' FTM
                indRecords!(41, 1) = 1 ' TIMES DONE
                indRecords!(41, 2) = 2 ' HALF
                indRecDesc$(41, 0) = players$(I, I1) ' NAME
                indRecDesc$(41, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(41, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(41, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(41, 4) = Date$ ' DATE
            End If

            ' STEALS IN A GAME, HALF, QUARTER
            If plyrOff_GAME!(I, I1, 13) > indRecords!(43, 0) Then
                indRecords!(43, 0) = plyrOff_GAME!(I, I1, 13) ' FTA
                indRecords!(43, 1) = 1 ' TIMES DONE
                indRecords!(43, 2) = 0 ' GAME
                indRecDesc$(43, 0) = players$(I, I1) ' NAME
                indRecDesc$(43, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(43, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(43, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(43, 4) = Date$ ' DATE
            End If
            If QQ(I, 1, I1, 7) > indRecords!(44, 0) Then
                indRecords!(44, 0) = QQ(I, 1, I1, 7) ' FTA
                indRecords!(44, 1) = 1 ' TIMES DONE
                indRecords!(44, 2) = 1 ' HALF
                indRecDesc$(44, 0) = players$(I, I1) ' NAME
                indRecDesc$(44, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(44, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(44, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(44, 4) = Date$ ' DATE
            End If
            If QQ(I, 2, I1, 7) > indRecords!(44, 0) Then
                indRecords!(44, 0) = QQ(I, 2, I1, 7) ' FTM
                indRecords!(44, 1) = 1 ' TIMES DONE
                indRecords!(44, 2) = 2 ' HALF
                indRecDesc$(44, 0) = players$(I, I1) ' NAME
                indRecDesc$(44, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(44, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(44, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(44, 4) = Date$ ' DATE
            End If

            ' BLOCKS IN A GAME, HALF, QUARTER
            If plyrOff_GAME!(I, I1, 15) > indRecords!(46, 0) Then
                indRecords!(46, 0) = plyrOff_GAME!(I, I1, 15) ' FTA
                indRecords!(46, 1) = 1 ' TIMES DONE
                indRecords!(46, 2) = 0 ' GAME
                indRecDesc$(46, 0) = players$(I, I1) ' NAME
                indRecDesc$(46, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(46, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(46, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(46, 4) = Date$ ' DATE
            End If

            If QQ(I, 1, I1, 9) > indRecords!(47, 0) Then
                indRecords!(47, 0) = QQ(I, 1, I1, 9) ' FTA
                indRecords!(47, 1) = 1 ' TIMES DONE
                indRecords!(47, 2) = 1 ' HALF
                indRecDesc$(47, 0) = players$(I, I1) ' NAME
                indRecDesc$(47, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(47, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(47, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(47, 4) = Date$ ' DATE
            End If

            If QQ(I, 2, I1, 9) > indRecords!(47, 0) Then
                indRecords!(47, 0) = QQ(I, 2, I1, 9) ' FTM
                indRecords!(47, 1) = 1 ' TIMES DONE
                indRecords!(47, 2) = 2 ' HALF
                indRecDesc$(47, 0) = players$(I, I1) ' NAME
                indRecDesc$(47, 1) = gameTeams$(I) ' TEAM
                indRecDesc$(47, 2) = VERSUS$(I) ' AT/VS
                indRecDesc$(47, 3) = gameTeams$(1 - I) ' OPPONENT
                indRecDesc$(47, 4) = Date$ ' DATE
            End If

        Next
    Next

    ' MOST OVERTIME PERIODS
    If currHalf - 3 > teamRecords!(0, 0) Then
        teamRecords!(0, 0) = currHalf - 3
        teamRecords!(0, 1) = score(0, 0)
        teamRecords!(0, 2) = score(1, 0)
        teamRecDesc$(0, 0) = gameTeams$(0)
        teamRecDesc$(0, 1) = gameTeams$(1)
        teamRecDesc$(0, 2) = Date$
    End If

    For I = 0 To 1

        If score(I, 0) > teamRecords!(1, 0) Then
            teamRecords!(1, 0) = score(I, 0)
            teamRecords!(1, 1) = 1
            teamRecords!(1, 2) = 0
            teamRecDesc$(1, 0) = gameTeams$(I)
            teamRecDesc$(1, 1) = VERSUS$(I)
            teamRecDesc$(1, 2) = gameTeams$(1 - I)
            teamRecDesc$(1, 3) = Date$
        End If

        If score(I, 0) < teamRecords!(2, 0) Then
            teamRecords!(2, 0) = score(I, 0)
            teamRecords!(2, 1) = 1
            teamRecords!(2, 2) = 0
            teamRecDesc$(2, 0) = gameTeams$(I)
            teamRecDesc$(2, 1) = VERSUS$(I)
            teamRecDesc$(2, 2) = gameTeams$(1 - I)
            teamRecDesc$(2, 3) = Date$
        End If

        If score(I, 0) + score(1 - I, 0) > teamRecords!(3, 0) Then
            teamRecords!(3, 0) = score(I, 0) + score(1 - I, 0)
            teamRecords!(3, 1) = score(I, 0)
            teamRecords!(3, 2) = score(1 - I, 0)
            teamRecDesc$(3, 0) = gameTeams$(I)
            teamRecDesc$(3, 1) = VERSUS$(I)
            teamRecDesc$(3, 2) = gameTeams$(1 - I)
            teamRecDesc$(3, 3) = Date$
        End If

        If score(I, 0) + score(1 - I, 0) < teamRecords!(4, 0) Then
            teamRecords!(4, 0) = score(I, 0) + score(1 - I, 0)
            teamRecords!(4, 1) = score(I, 0)
            teamRecords!(4, 2) = score(1 - I, 0)
            teamRecDesc$(4, 0) = gameTeams$(I)
            teamRecDesc$(4, 1) = VERSUS$(I)
            teamRecDesc$(4, 2) = gameTeams$(1 - I)
            teamRecDesc$(4, 3) = Date$
        End If

        If score(I, 1) > teamRecords!(6, 0) Then
            teamRecords!(6, 0) = score(I, 1)
            teamRecords!(6, 1) = 1
            teamRecords!(6, 2) = 0
            teamRecDesc$(6, 0) = gameTeams$(I)
            teamRecDesc$(6, 1) = VERSUS$(I)
            teamRecDesc$(6, 2) = gameTeams$(1 - I)
            teamRecDesc$(6, 3) = Date$
        End If

        If score(I, 1) < teamRecords!(7, 0) Then
            teamRecords!(7, 0) = score(I, 1)
            teamRecords!(7, 1) = 1
            teamRecords!(7, 2) = 0
            teamRecDesc$(7, 0) = gameTeams$(I)
            teamRecDesc$(7, 1) = VERSUS$(I)
            teamRecDesc$(7, 2) = gameTeams$(1 - I)
            teamRecDesc$(7, 3) = Date$
        End If

        If score(I, 1) + score(1 - I, 1) > teamRecords!(8, 0) Then
            teamRecords!(8, 0) = score(I, 1) + score(1 - I, 1)
            teamRecords!(8, 1) = score(I, 1)
            teamRecords!(8, 2) = score(1 - I, 1)
            teamRecDesc$(8, 0) = gameTeams$(I)
            teamRecDesc$(8, 1) = VERSUS$(I)
            teamRecDesc$(8, 2) = gameTeams$(1 - I)
            teamRecDesc$(8, 3) = Date$
        End If

        If score(I, 1) + score(1 - I, 1) < teamRecords!(9, 0) Then
            teamRecords!(9, 0) = score(I, 1) + score(1 - I, 1)
            teamRecords!(9, 1) = score(I, 1)
            teamRecords!(9, 2) = score(1 - I, 1)
            teamRecDesc$(9, 0) = gameTeams$(I)
            teamRecDesc$(9, 1) = VERSUS$(I)
            teamRecDesc$(9, 2) = gameTeams$(1 - I)
            teamRecDesc$(9, 3) = Date$
        End If

        If score(I, 2) > teamRecords!(10, 0) Then
            teamRecords!(10, 0) = score(I, 2)
            teamRecords!(10, 1) = 1
            teamRecords!(10, 2) = 0
            teamRecDesc$(10, 0) = gameTeams$(I)
            teamRecDesc$(10, 1) = VERSUS$(I)
            teamRecDesc$(10, 2) = gameTeams$(1 - I)
            teamRecDesc$(10, 3) = Date$
        End If

        If score(I, 2) < teamRecords!(11, 0) Then
            teamRecords!(11, 0) = score(I, 2)
            teamRecords!(11, 1) = 1
            teamRecords!(11, 2) = 0
            teamRecDesc$(11, 0) = gameTeams$(I)
            teamRecDesc$(11, 1) = VERSUS$(I)
            teamRecDesc$(11, 2) = gameTeams$(1 - I)
            teamRecDesc$(11, 3) = Date$
        End If

        If score(I, 2) + score(1 - I, 2) > teamRecords!(12, 0) Then
            teamRecords!(12, 0) = score(I, 2) + score(1 - I, 2)
            teamRecords!(12, 1) = score(I, 2)
            teamRecords!(12, 2) = score(1 - I, 2)
            teamRecDesc$(12, 0) = gameTeams$(I)
            teamRecDesc$(12, 1) = VERSUS$(I)
            teamRecDesc$(12, 2) = gameTeams$(1 - I)
            teamRecDesc$(12, 3) = Date$
        End If

        If score(I, 2) + score(1 - I, 2) < teamRecords!(13, 0) Then
            teamRecords!(13, 0) = score(I, 2) + score(1 - I, 2)
            teamRecords!(13, 1) = score(I, 2)
            teamRecords!(13, 2) = score(1 - I, 2)
            teamRecDesc$(13, 0) = gameTeams$(I)
            teamRecDesc$(13, 1) = VERSUS$(I)
            teamRecDesc$(13, 2) = gameTeams$(1 - I)
            teamRecDesc$(13, 3) = Date$
        End If

        For I2 = 3 To 8
            If score(I, I2) > teamRecords!(14, 0) Then
                teamRecords!(14, 0) = score(I, I2)
                teamRecords!(14, 1) = I2
                teamRecords!(14, 2) = 0
                teamRecDesc$(14, 0) = gameTeams$(I)
                teamRecDesc$(14, 1) = VERSUS$(I)
                teamRecDesc$(14, 2) = gameTeams$(1 - I)
                teamRecDesc$(14, 3) = Date$
            End If

            If score(I, I2) < teamRecords!(15, 0) Then
                teamRecords!(15, 0) = score(I, I2)
                teamRecords!(15, 1) = I2
                teamRecords!(15, 2) = 0
                teamRecDesc$(15, 0) = gameTeams$(I)
                teamRecDesc$(15, 1) = VERSUS$(I)
                teamRecDesc$(15, 2) = gameTeams$(1 - I)
                teamRecDesc$(15, 3) = Date$
            End If

            If score(I, I2) + score(1 - I, I2) > teamRecords!(16, 0) Then
                teamRecords!(16, 0) = score(I, I2) + score(1 - I, I2)
                teamRecords!(16, 1) = score(I, I2)
                teamRecords!(16, 2) = score(1 - I, I2)
                teamRecDesc$(16, 0) = gameTeams$(I)
                teamRecDesc$(16, 1) = VERSUS$(I)
                teamRecDesc$(16, 2) = gameTeams$(1 - I)
                teamRecDesc$(16, 3) = Date$
            End If

            If score(I, I2) + score(1 - I, I2) < teamRecords!(17, 0) Then
                teamRecords!(17, 0) = score(I, I2) + score(1 - I, I2)
                teamRecords!(17, 1) = score(I, I2)
                teamRecords!(17, 2) = score(1 - I, I2)
                teamRecDesc$(17, 0) = gameTeams$(I)
                teamRecDesc$(17, 1) = VERSUS$(I)
                teamRecDesc$(17, 2) = gameTeams$(1 - I)
                teamRecDesc$(17, 3) = Date$
            End If
        Next I2

        ' TEAM FIELD GOAL PERCENTAGES
        For I1 = 0 To 14: V8(I, I1) = 0: V8(1 - I, I1) = 0: Next
        For I2 = 0 To 1
            For I1 = 0 To 13
                V8(I2, 0) = V8(I2, 0) + plyrOff_GAME!(I2, I1, 8)
                V8(I2, 1) = V8(I2, 1) + plyrOff_GAME!(I2, I1, 7)
                V8(I2, 2) = V8(I2, 2) + plyrOff_GAME!(I2, I1, 10)
                V8(I2, 3) = V8(I2, 3) + plyrOff_GAME!(I2, I1, 9)
                V8(I2, 4) = V8(I2, 4) + plyrOff_GAME!(I2, I1, 11)
                V8(I2, 5) = V8(I2, 5) + (plyrOff_GAME!(I2, I1, 8) * 2) + plyrOff_GAME!(I2, I1, 10) + threeFG(I2, I1, 0)
                V8(I2, 13) = V8(I2, 13) + threeFG(I2, I1, 0)
                V8(I2, 14) = V8(I2, 14) + threeFG(I2, I1, 1)
                V8(I2, 6) = V8(I2, 6) + plyrOff_GAME!(I2, I1, 12)
                V8(I2, 7) = V8(I2, 7) + plyrOff_GAME!(I2, I1, 14)
                V8(I2, 8) = V8(I2, 8) + plyrOff_GAME!(I2, I1, 15)
                V8(I2, 9) = V8(I2, 9) + plyrOff_GAME!(I2, I1, 13)
                V8(I2, 11) = V8(I2, 11) + plyrOff_GAME!(I2, I1, 24)
                V8(I2, 12) = V8(I2, 12) + plyrOff_GAME!(I2, I1, 23)
                V8(I2, 10) = V8(I2, 10) + timePlayed(I2, I1)
            Next
        Next

        If V8(I, 1) <> 0 Then

            If V8(I, 0) / V8(I, 1) > teamRecords!(30, 0) Then
                teamRecords!(30, 0) = V8(I, 0) / V8(I, 1)
                teamRecords!(30, 1) = V8(I, 0)
                teamRecords!(30, 2) = V8(I, 1)
                teamRecDesc$(30, 0) = gameTeams$(I)
                teamRecDesc$(30, 1) = VERSUS$(I)
                teamRecDesc$(30, 2) = gameTeams$(1 - I)
                teamRecDesc$(30, 3) = Date$
            End If

            If V8(I, 0) / V8(I, 1) < teamRecords!(31, 0) Then
                teamRecords!(31, 0) = V8(I, 0) / V8(I, 1)
                teamRecords!(31, 1) = V8(I, 0)
                teamRecords!(31, 2) = V8(I, 1)
                teamRecDesc$(31, 0) = gameTeams$(I)
                teamRecDesc$(31, 1) = VERSUS$(I)
                teamRecDesc$(31, 2) = gameTeams$(1 - I)
                teamRecDesc$(31, 3) = Date$
            End If

        End If

        If V8(I, 1) + V8(1 - I, 1) <> 0 Then

            If (V8(I, 0) + V8(1 - I, 0)) / (V8(I, 1) + V8(1 - I, 1)) > teamRecords!(32, 0) Then
                teamRecords!(32, 0) = (V8(I, 0) + V8(1 - I, 0)) / (V8(I, 1) + V8(1 - I, 1))
                teamRecords!(32, 1) = V8(I, 0) / V8(I, 1)
                teamRecords!(32, 2) = V8(1 - I, 0) / (V8(1 - I, 1) + 0.01)
                teamRecDesc$(32, 0) = gameTeams$(I)
                teamRecDesc$(32, 1) = VERSUS$(I)
                teamRecDesc$(32, 2) = gameTeams$(1 - I)
                teamRecDesc$(32, 3) = Date$
            End If

            If (V8(I, 0) + V8(1 - I, 0)) / (V8(I, 1) + V8(1 - I, 1)) < teamRecords!(33, 0) Then
                teamRecords!(33, 0) = (V8(I, 0) + V8(1 - I, 0)) / (V8(I, 1) + V8(1 - I, 1))
                teamRecords!(33, 1) = V8(I, 0) / V8(I, 1)
                teamRecords!(33, 2) = V8(1 - I, 0) / (V8(1 - I, 1) + 0.01)
                teamRecDesc$(33, 0) = gameTeams$(I)
                teamRecDesc$(33, 1) = VERSUS$(I)
                teamRecDesc$(33, 2) = gameTeams$(1 - I)
                teamRecDesc$(33, 3) = Date$
            End If

        End If

        ' TEAM FIELD GOALS MADE
        If V8(I, 0) > teamRecords!(34, 0) Then
            teamRecords!(34, 0) = V8(I, 0)
            teamRecords!(34, 1) = 0
            teamRecords!(34, 2) = 0
            teamRecDesc$(34, 0) = gameTeams$(I)
            teamRecDesc$(34, 1) = VERSUS$(I)
            teamRecDesc$(34, 2) = gameTeams$(1 - I)
            teamRecDesc$(34, 3) = Date$
        End If

        If V8(I, 0) < teamRecords!(35, 0) Then
            teamRecords!(35, 0) = V8(I, 0)
            teamRecords!(35, 1) = 0
            teamRecords!(35, 2) = 0
            teamRecDesc$(35, 0) = gameTeams$(I)
            teamRecDesc$(35, 1) = VERSUS$(I)
            teamRecDesc$(35, 2) = gameTeams$(1 - I)
            teamRecDesc$(35, 3) = Date$
        End If

        If V8(I, 0) + V8(1 - I, 0) > teamRecords!(36, 0) Then
            teamRecords!(36, 0) = V8(I, 0) + V8(1 - I, 0)
            teamRecords!(36, 1) = V8(I, 0)
            teamRecords!(36, 2) = V8(1 - I, 0)
            teamRecDesc$(36, 0) = gameTeams$(I)
            teamRecDesc$(36, 1) = VERSUS$(I)
            teamRecDesc$(36, 2) = gameTeams$(1 - I)
            teamRecDesc$(36, 3) = Date$
        End If

        If V8(I, 0) + V8(1 - I, 0) < teamRecords!(37, 0) Then
            teamRecords!(37, 0) = V8(I, 0) + V8(1 - I, 0)
            teamRecords!(37, 1) = V8(I, 0)
            teamRecords!(37, 2) = V8(1 - I, 0)
            teamRecDesc$(37, 0) = gameTeams$(I)
            teamRecDesc$(37, 1) = VERSUS$(I)
            teamRecDesc$(37, 2) = gameTeams$(1 - I)
            teamRecDesc$(37, 3) = Date$
        End If

        If QR(I, 1, 0) > teamRecords!(38, 0) Then
            teamRecords!(38, 0) = QR(I, 1, 0)
            teamRecords!(38, 1) = 1
            teamRecords!(38, 2) = 0
            teamRecDesc$(38, 0) = gameTeams$(I)
            teamRecDesc$(38, 1) = VERSUS$(I)
            teamRecDesc$(38, 2) = gameTeams$(1 - I)
            teamRecDesc$(38, 3) = Date$
        End If

        If QR(I, 2, 0) > teamRecords!(38, 0) Then
            teamRecords!(38, 0) = QR(I, 2, 0)
            teamRecords!(38, 1) = 2
            teamRecords!(38, 2) = 0
            teamRecDesc$(38, 0) = gameTeams$(I)
            teamRecDesc$(38, 1) = VERSUS$(I)
            teamRecDesc$(38, 2) = gameTeams$(1 - I)
            teamRecDesc$(38, 3) = Date$
        End If

        If QR(I, 1, 0) + QR(1 - I, 1, 0) > teamRecords!(39, 0) Then
            teamRecords!(39, 0) = QR(I, 1, 0) + QR(1 - I, 1, 0)
            teamRecords!(39, 1) = 1
            teamRecords!(39, 2) = 0
            teamRecDesc$(39, 0) = gameTeams$(I)
            teamRecDesc$(39, 1) = VERSUS$(I)
            teamRecDesc$(39, 2) = gameTeams$(1 - I)
            teamRecDesc$(39, 3) = Date$
        End If

        If QR(I, 2, 0) + QR(1 - I, 2, 0) > teamRecords!(39, 0) Then
            teamRecords!(39, 0) = QR(I, 2, 0) + QR(1 - I, 2, 0)
            teamRecords!(39, 1) = 2
            teamRecords!(39, 2) = 0
            teamRecDesc$(39, 0) = gameTeams$(I)
            teamRecDesc$(39, 1) = VERSUS$(I)
            teamRecDesc$(39, 2) = gameTeams$(1 - I)
            teamRecDesc$(39, 3) = Date$
        End If

        'TEAM FIELD GOAL ATTEMPTS
        If V8(I, 1) > teamRecords!(42, 0) Then
            teamRecords!(42, 0) = V8(I, 1)
            teamRecords!(42, 1) = 0
            teamRecords!(42, 2) = 0
            teamRecDesc$(42, 0) = gameTeams$(I)
            teamRecDesc$(42, 1) = VERSUS$(I)
            teamRecDesc$(42, 2) = gameTeams$(1 - I)
            teamRecDesc$(42, 3) = Date$
        End If

        If V8(I, 1) < teamRecords!(43, 0) Then
            teamRecords!(43, 0) = V8(I, 1)
            teamRecords!(43, 1) = 0
            teamRecords!(43, 2) = 0
            teamRecDesc$(43, 0) = gameTeams$(I)
            teamRecDesc$(43, 1) = VERSUS$(I)
            teamRecDesc$(43, 2) = gameTeams$(1 - I)
            teamRecDesc$(43, 3) = Date$
        End If

        If V8(I, 1) + V8(1 - I, 1) > teamRecords!(44, 0) Then
            teamRecords!(44, 0) = V8(I, 1) + V8(1 - I, 1)
            teamRecords!(44, 1) = V8(I, 1)
            teamRecords!(44, 2) = V8(1 - I, 1)
            teamRecDesc$(44, 0) = gameTeams$(I)
            teamRecDesc$(44, 1) = VERSUS$(I)
            teamRecDesc$(44, 2) = gameTeams$(1 - I)
            teamRecDesc$(44, 3) = Date$
        End If

        If V8(I, 1) + V8(1 - I, 1) < teamRecords!(45, 0) Then
            teamRecords!(45, 0) = V8(I, 1) + V8(1 - I, 1)
            teamRecords!(45, 1) = V8(I, 1)
            teamRecords!(45, 2) = V8(1 - I, 1)
            teamRecDesc$(45, 0) = gameTeams$(I)
            teamRecDesc$(45, 1) = VERSUS$(I)
            teamRecDesc$(45, 2) = gameTeams$(1 - I)
            teamRecDesc$(45, 3) = Date$
        End If

        If QR(I, 1, 1) > teamRecords!(46, 0) Then
            teamRecords!(46, 0) = QR(I, 1, 1)
            teamRecords!(46, 1) = 1
            teamRecords!(46, 2) = 0
            teamRecDesc$(46, 0) = gameTeams$(I)
            teamRecDesc$(46, 1) = VERSUS$(I)
            teamRecDesc$(46, 2) = gameTeams$(1 - I)
            teamRecDesc$(46, 3) = Date$
        End If

        If QR(I, 2, 1) > teamRecords!(46, 0) Then
            teamRecords!(46, 0) = QR(I, 2, 1)
            teamRecords!(46, 1) = 2
            teamRecords!(46, 2) = 0
            teamRecDesc$(46, 0) = gameTeams$(I)
            teamRecDesc$(46, 1) = VERSUS$(I)
            teamRecDesc$(46, 2) = gameTeams$(1 - I)
            teamRecDesc$(46, 3) = Date$
        End If

        If QR(I, 1, 1) + QR(1 - I, 1, 1) > teamRecords!(47, 0) Then
            teamRecords!(47, 0) = QR(I, 1, 1) + QR(1 - I, 1, 1)
            teamRecords!(47, 1) = 1
            teamRecords!(47, 2) = QR(I, 1, 1)
            teamRecDesc$(47, 0) = gameTeams$(I)
            teamRecDesc$(47, 1) = VERSUS$(I)
            teamRecDesc$(47, 2) = gameTeams$(1 - I)
            teamRecDesc$(47, 3) = Date$
        End If

        If QR(I, 2, 1) + QR(1 - I, 2, 1) > teamRecords!(47, 0) Then
            teamRecords!(47, 0) = QR(I, 2, 1) + QR(1 - I, 2, 1)
            teamRecords!(47, 1) = 2
            teamRecords!(47, 2) = QR(I, 2, 1)
            teamRecDesc$(47, 0) = gameTeams$(I)
            teamRecDesc$(47, 1) = VERSUS$(I)
            teamRecDesc$(47, 2) = gameTeams$(1 - I)
            teamRecDesc$(47, 3) = Date$
        End If

        'TEAM FIELD GOAL ATTEMPTS
        If V8(I, 13) = V8(I, 14) And V8(I, 14) > teamRecords!(50, 0) Then
            teamRecords!(50, 0) = V8(I, 13)
            teamRecords!(50, 1) = 0
            teamRecords!(50, 2) = 0
            teamRecDesc$(50, 0) = gameTeams$(I)
            teamRecDesc$(50, 1) = VERSUS$(I)
            teamRecDesc$(50, 2) = gameTeams$(1 - I)
            teamRecDesc$(50, 3) = Date$
        End If

        'TEAM FIELD GOAL ATTEMPTS MOST MADE
        If V8(I, 13) = V8(I, 14) And V8(1 - I, 13) = V8(1 - I, 14) And V8(I, 14) + V8(1 - I, 14) > teamRecords!(51, 0) Then
            teamRecords!(51, 0) = V8(I, 13)
            teamRecords!(51, 1) = V8(1 - I, 13)
            teamRecords!(51, 2) = 0
            teamRecDesc$(51, 0) = gameTeams$(I)
            teamRecDesc$(51, 1) = VERSUS$(I)
            teamRecDesc$(51, 2) = gameTeams$(1 - I)
            teamRecDesc$(51, 3) = Date$
        End If

        'TEAM FIELD GOAL ATTEMPTS NONE MADE
        If V8(I, 13) = 0 And V8(I, 14) > teamRecords!(52, 0) Then
            teamRecords!(52, 0) = V8(I, 14)
            teamRecords!(52, 1) = 0
            teamRecords!(52, 2) = 0
            teamRecDesc$(52, 0) = gameTeams$(I)
            teamRecDesc$(52, 1) = VERSUS$(I)
            teamRecDesc$(52, 2) = gameTeams$(1 - I)
            teamRecDesc$(52, 3) = Date$
        End If

        'TEAM FIELD GOAL ATTEMPTS NONE MADE
        If V8(I, 13) > teamRecords!(53, 0) Then
            teamRecords!(53, 0) = V8(I, 13)
            teamRecords!(53, 1) = 0
            teamRecords!(53, 2) = 0
            teamRecDesc$(53, 0) = gameTeams$(I)
            teamRecDesc$(53, 1) = VERSUS$(I)
            teamRecDesc$(53, 2) = gameTeams$(1 - I)
            teamRecDesc$(53, 3) = Date$
        End If

        'TEAM FIELD GOAL ATTEMPTS NONE MADE
        If V8(I, 13) + V8(1 - I, 13) > teamRecords!(54, 0) Then
            teamRecords!(54, 0) = V8(I, 13) + V8(1 - I, 13)
            teamRecords!(54, 1) = V8(I, 13)
            teamRecords!(54, 2) = V8(1 - I, 13)
            teamRecDesc$(54, 0) = gameTeams$(I)
            teamRecDesc$(54, 1) = VERSUS$(I)
            teamRecDesc$(54, 2) = gameTeams$(1 - I)
            teamRecDesc$(54, 3) = Date$
        End If

        If QR(I, 1, 13) > teamRecords!(55, 0) Then
            teamRecords!(55, 0) = QR(I, 1, 13)
            teamRecords!(55, 1) = 1
            teamRecords!(55, 2) = 0
            teamRecDesc$(55, 0) = gameTeams$(I)
            teamRecDesc$(55, 1) = VERSUS$(I)
            teamRecDesc$(55, 2) = gameTeams$(1 - I)
            teamRecDesc$(55, 3) = Date$
        End If

        If QR(I, 2, 13) > teamRecords!(55, 0) Then
            teamRecords!(55, 0) = QR(I, 2, 13)
            teamRecords!(55, 1) = 2
            teamRecords!(55, 2) = 0
            teamRecDesc$(55, 0) = gameTeams$(I)
            teamRecDesc$(55, 1) = VERSUS$(I)
            teamRecDesc$(55, 2) = gameTeams$(1 - I)
            teamRecDesc$(55, 3) = Date$
        End If

        'TEAM FIELD GOAL ATTEMPTS NONE MADE
        If V8(I, 14) > teamRecords!(57, 0) Then
            teamRecords!(57, 0) = V8(I, 14)
            teamRecords!(57, 1) = 0
            teamRecords!(57, 2) = 0
            teamRecDesc$(57, 0) = gameTeams$(I)
            teamRecDesc$(57, 1) = VERSUS$(I)
            teamRecDesc$(57, 2) = gameTeams$(1 - I)
            teamRecDesc$(57, 3) = Date$
        End If

        'TEAM FIELD GOAL ATTEMPTS NONE MADE
        If V8(I, 14) + V8(1 - I, 14) > teamRecords!(58, 0) Then
            teamRecords!(58, 0) = V8(I, 14) + V8(1 - I, 14)
            teamRecords!(58, 1) = V8(I, 14)
            teamRecords!(58, 2) = V8(1 - I, 14)
            teamRecDesc$(58, 0) = gameTeams$(I)
            teamRecDesc$(58, 1) = VERSUS$(I)
            teamRecDesc$(58, 2) = gameTeams$(1 - I)
            teamRecDesc$(58, 3) = Date$
        End If

        If QR(I, 1, 14) > teamRecords!(59, 0) Then
            teamRecords!(59, 0) = QR(I, 1, 14)
            teamRecords!(59, 1) = 1
            teamRecords!(59, 2) = 0
            teamRecDesc$(59, 0) = gameTeams$(I)
            teamRecDesc$(59, 1) = VERSUS$(I)
            teamRecDesc$(59, 2) = gameTeams$(1 - I)
            teamRecDesc$(59, 3) = Date$
        End If

        If QR(I, 2, 14) > teamRecords!(59, 0) Then
            teamRecords!(59, 0) = QR(I, 2, 14)
            teamRecords!(59, 1) = 2
            teamRecords!(59, 2) = 0
            teamRecDesc$(59, 0) = gameTeams$(I)
            teamRecDesc$(59, 1) = VERSUS$(I)
            teamRecDesc$(59, 2) = gameTeams$(1 - I)
            teamRecDesc$(59, 3) = Date$
        End If

        ' FREE THROW ATTEMPTS NO MISS
        If V8(I, 2) = V8(I, 3) And V8(I, 2) > teamRecords!(60, 0) Then
            teamRecords!(60, 0) = V8(I, 2)
            teamRecords!(60, 1) = 0
            teamRecords!(60, 2) = 0
            teamRecDesc$(60, 0) = gameTeams$(I)
            teamRecDesc$(60, 1) = VERSUS$(I)
            teamRecDesc$(60, 2) = gameTeams$(1 - I)
            teamRecDesc$(60, 3) = Date$
        End If

        ' FREE THROW ATTEMPTS LOW %
        If V8(I, 3) <> 0 Then

            If V8(I, 2) / V8(I, 3) < teamRecords!(61, 0) Then
                teamRecords!(61, 0) = V8(I, 2) / V8(I, 3)
                teamRecords!(61, 1) = V8(I, 2)
                teamRecords!(61, 2) = V8(I, 3)
                teamRecDesc$(61, 0) = gameTeams$(I)
                teamRecDesc$(61, 1) = VERSUS$(I)
                teamRecDesc$(61, 2) = gameTeams$(1 - I)
                teamRecDesc$(61, 3) = Date$
            End If

        End If

        ' FREE THROW ATTEMPTS COMBINED HIGH %
        If V8(I, 3) + V8(1 - I, 3) <> 0 Then

            If (V8(I, 2) + V8(1 - I, 2)) / (V8(I, 3) + V8(1 - I, 3)) > teamRecords!(62, 0) Then
                teamRecords!(62, 0) = (V8(I, 2) + V8(1 - I, 2)) / (V8(I, 3) + V8(1 - I, 3))
                teamRecords!(62, 1) = V8(I, 2) / V8(I, 3)
                teamRecords!(62, 2) = V8(1 - I, 2) / (V8(1 - I, 3) + 0.01)
                teamRecDesc$(62, 0) = gameTeams$(I)
                teamRecDesc$(62, 1) = VERSUS$(I)
                teamRecDesc$(62, 2) = gameTeams$(1 - I)
                teamRecDesc$(62, 3) = Date$
            End If

            ' FREE THROW ATTEMPTS COMBINED LOW %
            If (V8(I, 2) + V8(1 - I, 2)) / (V8(I, 3) + V8(1 - I, 3)) < teamRecords!(63, 0) Then
                teamRecords!(63, 0) = (V8(I, 2) + V8(1 - I, 2)) / (V8(I, 3) + V8(1 - I, 3))
                teamRecords!(63, 1) = V8(I, 2) / V8(I, 3)
                teamRecords!(63, 2) = V8(1 - I, 2) / (V8(1 - I, 3) + 0.01)
                teamRecDesc$(63, 0) = gameTeams$(I)
                teamRecDesc$(63, 1) = VERSUS$(I)
                teamRecDesc$(63, 2) = gameTeams$(1 - I)
                teamRecDesc$(63, 3) = Date$
            End If
        End If

        ' TEAM FREE THROWS MADE
        104 If V8(I, 2) > teamRecords!(64, 0) Then
            teamRecords!(64, 0) = V8(I, 2)
            teamRecords!(64, 1) = 0
            teamRecords!(64, 2) = 0
            teamRecDesc$(64, 0) = gameTeams$(I)
            teamRecDesc$(64, 1) = VERSUS$(I)
            teamRecDesc$(64, 2) = gameTeams$(1 - I)
            teamRecDesc$(64, 3) = Date$
        End If

        If V8(I, 2) < teamRecords!(65, 0) Then
            teamRecords!(65, 0) = V8(I, 2)
            teamRecords!(65, 1) = 0
            teamRecords!(65, 2) = 0
            teamRecDesc$(65, 0) = gameTeams$(I)
            teamRecDesc$(65, 1) = VERSUS$(I)
            teamRecDesc$(65, 2) = gameTeams$(1 - I)
            teamRecDesc$(65, 3) = Date$
        End If

        If V8(I, 2) + V8(1 - I, 2) > teamRecords!(66, 0) Then
            teamRecords!(66, 0) = V8(I, 2) + V8(1 - I, 2)
            teamRecords!(66, 1) = V8(I, 2)
            teamRecords!(66, 2) = V8(1 - I, 2)
            teamRecDesc$(66, 0) = gameTeams$(I)
            teamRecDesc$(66, 1) = VERSUS$(I)
            teamRecDesc$(66, 2) = gameTeams$(1 - I)
            teamRecDesc$(66, 3) = Date$
        End If

        If V8(I, 2) + V8(1 - I, 2) < teamRecords!(67, 0) Then
            teamRecords!(67, 0) = V8(I, 2) + V8(1 - I, 2)
            teamRecords!(67, 1) = V8(I, 2)
            teamRecords!(67, 2) = V8(1 - I, 2)
            teamRecDesc$(67, 0) = gameTeams$(I)
            teamRecDesc$(67, 1) = VERSUS$(I)
            teamRecDesc$(67, 2) = gameTeams$(1 - I)
            teamRecDesc$(67, 3) = Date$
        End If

        If QR(I, 1, 2) > teamRecords!(68, 0) Then
            teamRecords!(68, 0) = QR(I, 1, 2)
            teamRecords!(68, 1) = 1
            teamRecords!(68, 2) = 0
            teamRecDesc$(68, 0) = gameTeams$(I)
            teamRecDesc$(68, 1) = VERSUS$(I)
            teamRecDesc$(68, 2) = gameTeams$(1 - I)
            teamRecDesc$(68, 3) = Date$
        End If

        If QR(I, 2, 2) > teamRecords!(68, 0) Then
            teamRecords!(68, 0) = QR(I, 2, 2)
            teamRecords!(68, 1) = 2
            teamRecords!(68, 2) = 0
            teamRecDesc$(68, 0) = gameTeams$(I)
            teamRecDesc$(68, 1) = VERSUS$(I)
            teamRecDesc$(68, 2) = gameTeams$(1 - I)
            teamRecDesc$(68, 3) = Date$
        End If

        ' TEAM FREE THROWS ATTEMPTED
        If V8(I, 3) > teamRecords!(72, 0) Then
            teamRecords!(72, 0) = V8(I, 3)
            teamRecords!(72, 1) = 0
            teamRecords!(72, 2) = 0
            teamRecDesc$(72, 0) = gameTeams$(I)
            teamRecDesc$(72, 1) = VERSUS$(I)
            teamRecDesc$(72, 2) = gameTeams$(1 - I)
            teamRecDesc$(72, 3) = Date$
        End If

        If V8(I, 3) < teamRecords!(73, 0) Then
            teamRecords!(73, 0) = V8(I, 3)
            teamRecords!(73, 1) = 0
            teamRecords!(73, 2) = 0
            teamRecDesc$(73, 0) = gameTeams$(I)
            teamRecDesc$(73, 1) = VERSUS$(I)
            teamRecDesc$(73, 2) = gameTeams$(1 - I)
            teamRecDesc$(73, 3) = Date$
        End If

        If V8(I, 3) + V8(1 - I, 3) > teamRecords!(74, 0) Then
            teamRecords!(74, 0) = V8(I, 3) + V8(1 - I, 3)
            teamRecords!(74, 1) = V8(I, 3)
            teamRecords!(74, 2) = V8(1 - I, 3)
            teamRecDesc$(74, 0) = gameTeams$(I)
            teamRecDesc$(74, 1) = VERSUS$(I)
            teamRecDesc$(74, 2) = gameTeams$(1 - I)
            teamRecDesc$(74, 3) = Date$
        End If

        If V8(I, 3) + V8(1 - I, 3) < teamRecords!(75, 0) Then
            teamRecords!(75, 0) = V8(I, 3) + V8(1 - I, 3)
            teamRecords!(75, 1) = V8(I, 3)
            teamRecords!(75, 2) = V8(1 - I, 3)
            teamRecDesc$(75, 0) = gameTeams$(I)
            teamRecDesc$(75, 1) = VERSUS$(I)
            teamRecDesc$(75, 2) = gameTeams$(1 - I)
            teamRecDesc$(75, 3) = Date$
        End If

        If QR(I, 1, 3) > teamRecords!(76, 0) Then
            teamRecords!(76, 0) = QR(I, 1, 3)
            teamRecords!(76, 1) = 1
            teamRecords!(76, 2) = 0
            teamRecDesc$(76, 0) = gameTeams$(I)
            teamRecDesc$(76, 1) = VERSUS$(I)
            teamRecDesc$(76, 2) = gameTeams$(1 - I)
            teamRecDesc$(76, 3) = Date$
        End If

        If QR(I, 2, 3) > teamRecords!(76, 0) Then
            teamRecords!(76, 0) = QR(I, 2, 3)
            teamRecords!(76, 1) = 2
            teamRecords!(76, 2) = 0
            teamRecDesc$(76, 0) = gameTeams$(I)
            teamRecDesc$(76, 1) = VERSUS$(I)
            teamRecDesc$(76, 2) = gameTeams$(1 - I)
            teamRecDesc$(76, 3) = Date$
        End If

        If QR(I, 1, 3) + QR(1 - I, 1, 3) > teamRecords!(77, 0) Then
            teamRecords!(77, 0) = QR(I, 1, 3) + QR(1 - I, 1, 3)
            teamRecords!(77, 1) = 1
            teamRecords!(77, 2) = QR(I, 1, 3)
            teamRecDesc$(77, 0) = gameTeams$(I)
            teamRecDesc$(77, 1) = VERSUS$(I)
            teamRecDesc$(77, 2) = gameTeams$(1 - I)
            teamRecDesc$(77, 3) = Date$
        End If

        If QR(I, 2, 3) + QR(1 - I, 2, 3) > teamRecords!(77, 0) Then
            teamRecords!(77, 0) = QR(I, 2, 3) + QR(1 - I, 2, 3)
            teamRecords!(77, 1) = 2
            teamRecords!(77, 2) = QR(I, 2, 3)
            teamRecDesc$(77, 0) = gameTeams$(I)
            teamRecDesc$(77, 1) = VERSUS$(I)
            teamRecDesc$(77, 2) = gameTeams$(1 - I)
            teamRecDesc$(77, 3) = Date$
        End If

        If gameR3!(I) > teamRecords!(80, 0) Then
            teamRecords!(80, 0) = gameR3!(I)
            teamRecords!(80, 1) = 0
            teamRecords!(80, 2) = 0
            teamRecDesc$(80, 0) = gameTeams$(I)
            teamRecDesc$(80, 1) = VERSUS$(I)
            teamRecDesc$(80, 2) = gameTeams$(1 - I)
            teamRecDesc$(80, 3) = Date$
        End If

        If gameR3!(I) < teamRecords!(81, 0) Then
            teamRecords!(81, 0) = gameR3!(I)
            teamRecords!(81, 1) = 0
            teamRecords!(81, 2) = 0
            teamRecDesc$(81, 0) = gameTeams$(I)
            teamRecDesc$(81, 1) = VERSUS$(I)
            teamRecDesc$(81, 2) = gameTeams$(1 - I)
            teamRecDesc$(81, 3) = Date$
        End If

        If gameR3!(I) + gameR3!(1 - I) > teamRecords!(82, 0) Then
            teamRecords!(82, 0) = gameR3!(I) + gameR3!(1 - I)
            teamRecords!(82, 1) = gameR3!(I)
            teamRecords!(82, 2) = gameR3!(1 - I)
            teamRecDesc$(82, 0) = gameTeams$(I)
            teamRecDesc$(82, 1) = VERSUS$(I)
            teamRecDesc$(82, 2) = gameTeams$(1 - I)
            teamRecDesc$(82, 3) = Date$
        End If

        If gameR3!(I) + gameR3!(1 - I) < teamRecords!(83, 0) Then
            teamRecords!(83, 0) = gameR3!(I) + gameR3!(1 - I)
            teamRecords!(83, 1) = gameR3!(I)
            teamRecords!(83, 2) = gameR3!(1 - I)
            teamRecDesc$(83, 0) = gameTeams$(I)
            teamRecDesc$(83, 1) = VERSUS$(I)
            teamRecDesc$(83, 2) = gameTeams$(1 - I)
            teamRecDesc$(83, 3) = Date$
        End If

        If QR(I, 1, 4) > teamRecords!(84, 0) Then
            teamRecords!(84, 0) = QR(I, 1, 4)
            teamRecords!(84, 1) = 1
            teamRecords!(84, 2) = 0
            teamRecDesc$(84, 0) = gameTeams$(I)
            teamRecDesc$(84, 1) = VERSUS$(I)
            teamRecDesc$(84, 2) = gameTeams$(1 - I)
            teamRecDesc$(84, 3) = Date$
        End If

        If QR(I, 2, 4) > teamRecords!(84, 0) Then
            teamRecords!(84, 0) = QR(I, 2, 4)
            teamRecords!(84, 1) = 2
            teamRecords!(84, 2) = 0
            teamRecDesc$(84, 0) = gameTeams$(I)
            teamRecDesc$(84, 1) = VERSUS$(I)
            teamRecDesc$(84, 2) = gameTeams$(1 - I)
            teamRecDesc$(84, 3) = Date$
        End If

        If V8(I, 11) > teamRecords!(86, 0) Then
            teamRecords!(86, 0) = V8(I, 11)
            teamRecords!(86, 1) = 0
            teamRecords!(86, 2) = 0
            teamRecDesc$(86, 0) = gameTeams$(I)
            teamRecDesc$(86, 1) = VERSUS$(I)
            teamRecDesc$(86, 2) = gameTeams$(1 - I)
            teamRecDesc$(86, 3) = Date$
        End If

        If V8(I, 11) < teamRecords!(87, 0) Then
            teamRecords!(87, 0) = V8(I, 11)
            teamRecords!(87, 1) = 0
            teamRecords!(87, 2) = 0
            teamRecDesc$(87, 0) = gameTeams$(I)
            teamRecDesc$(87, 1) = VERSUS$(I)
            teamRecDesc$(87, 2) = gameTeams$(1 - I)
            teamRecDesc$(87, 3) = Date$
        End If

        If V8(I, 11) + V8(1 - I, 11) > teamRecords!(88, 0) Then
            teamRecords!(88, 0) = V8(I, 11) + V8(1 - I, 11)
            teamRecords!(88, 1) = V8(I, 11)
            teamRecords!(88, 2) = V8(1 - I, 11)
            teamRecDesc$(88, 0) = gameTeams$(I)
            teamRecDesc$(88, 1) = VERSUS$(I)
            teamRecDesc$(88, 2) = gameTeams$(1 - I)
            teamRecDesc$(88, 3) = Date$
        End If

        If V8(I, 11) + V8(1 - I, 11) < teamRecords!(89, 0) Then
            teamRecords!(89, 0) = V8(I, 11) + V8(1 - I, 11)
            teamRecords!(89, 1) = V8(I, 11)
            teamRecords!(89, 2) = V8(1 - I, 11)
            teamRecDesc$(89, 0) = gameTeams$(I)
            teamRecDesc$(89, 1) = VERSUS$(I)
            teamRecDesc$(89, 2) = gameTeams$(1 - I)
            teamRecDesc$(89, 3) = Date$
        End If

        If QR(I, 1, 11) > teamRecords!(90, 0) Then
            teamRecords!(90, 0) = QR(I, 1, 11)
            teamRecords!(90, 1) = 1
            teamRecords!(90, 2) = 0
            teamRecDesc$(90, 0) = gameTeams$(I)
            teamRecDesc$(90, 1) = VERSUS$(I)
            teamRecDesc$(90, 2) = gameTeams$(1 - I)
            teamRecDesc$(90, 3) = Date$
        End If

        If QR(I, 2, 11) > teamRecords!(90, 0) Then
            teamRecords!(90, 0) = QR(I, 2, 11)
            teamRecords!(90, 1) = 2
            teamRecords!(90, 2) = 0
            teamRecDesc$(90, 0) = gameTeams$(I)
            teamRecDesc$(90, 1) = VERSUS$(I)
            teamRecDesc$(90, 2) = gameTeams$(1 - I)
            teamRecDesc$(90, 3) = Date$
        End If

        ' ASSISTS
        If V8(I, 7) > teamRecords!(96, 0) Then
            teamRecords!(96, 0) = V8(I, 7)
            teamRecords!(96, 1) = 0
            teamRecords!(96, 2) = 0
            teamRecDesc$(96, 0) = gameTeams$(I)
            teamRecDesc$(96, 1) = VERSUS$(I)
            teamRecDesc$(96, 2) = gameTeams$(1 - I)
            teamRecDesc$(96, 3) = Date$
        End If

        If V8(I, 7) < teamRecords!(97, 0) Then
            teamRecords!(97, 0) = V8(I, 7)
            teamRecords!(97, 1) = 0
            teamRecords!(97, 2) = 0
            teamRecDesc$(97, 0) = gameTeams$(I)
            teamRecDesc$(97, 1) = VERSUS$(I)
            teamRecDesc$(97, 2) = gameTeams$(1 - I)
            teamRecDesc$(97, 3) = Date$
        End If

        If V8(I, 7) + V8(1 - I, 7) > teamRecords!(98, 0) Then
            teamRecords!(98, 0) = V8(I, 7) + V8(1 - I, 7)
            teamRecords!(98, 1) = V8(I, 7)
            teamRecords!(98, 2) = V8(1 - I, 7)
            teamRecDesc$(98, 0) = gameTeams$(I)
            teamRecDesc$(98, 1) = VERSUS$(I)
            teamRecDesc$(98, 2) = gameTeams$(1 - I)
            teamRecDesc$(98, 3) = Date$
        End If

        If V8(I, 7) + V8(1 - I, 7) < teamRecords!(99, 0) Then
            teamRecords!(99, 0) = V8(I, 7) + V8(1 - I, 7)
            teamRecords!(99, 1) = V8(I, 7)
            teamRecords!(99, 2) = V8(1 - I, 7)
            teamRecDesc$(99, 0) = gameTeams$(I)
            teamRecDesc$(99, 1) = VERSUS$(I)
            teamRecDesc$(99, 2) = gameTeams$(1 - I)
            teamRecDesc$(99, 3) = Date$
        End If

        If QR(I, 1, 7) > teamRecords!(100, 0) Then
            teamRecords!(100, 0) = QR(I, 1, 7)
            teamRecords!(100, 1) = 1
            teamRecords!(100, 2) = 0
            teamRecDesc$(100, 0) = gameTeams$(I)
            teamRecDesc$(100, 1) = VERSUS$(I)
            teamRecDesc$(100, 2) = gameTeams$(1 - I)
            teamRecDesc$(100, 3) = Date$
        End If

        If QR(I, 2, 7) > teamRecords!(100, 0) Then
            teamRecords!(100, 0) = QR(I, 2, 7)
            teamRecords!(100, 1) = 2
            teamRecords!(100, 2) = 0
            teamRecDesc$(100, 0) = gameTeams$(I)
            teamRecDesc$(100, 1) = VERSUS$(I)
            teamRecDesc$(100, 2) = gameTeams$(1 - I)
            teamRecDesc$(100, 3) = Date$
        End If

        If QR(I, 2, 7) + QR(1 - I, 2, 7) > teamRecords!(101, 0) Then
            teamRecords!(101, 0) = QR(I, 2, 7) + QR(1 - I, 2, 7)
            teamRecords!(101, 1) = 2
            teamRecords!(101, 2) = 0
            teamRecDesc$(101, 0) = gameTeams$(I)
            teamRecDesc$(101, 1) = VERSUS$(I)
            teamRecDesc$(101, 2) = gameTeams$(1 - I)
            teamRecDesc$(101, 3) = Date$
        End If

        ' FOULS
        If V8(I, 6) > teamRecords!(104, 0) Then
            teamRecords!(104, 0) = V8(I, 6)
            teamRecords!(104, 1) = 0
            teamRecords!(104, 2) = 0
            teamRecDesc$(104, 0) = gameTeams$(I)
            teamRecDesc$(104, 1) = VERSUS$(I)
            teamRecDesc$(104, 2) = gameTeams$(1 - I)
            teamRecDesc$(104, 3) = Date$
        End If

        If V8(I, 6) < teamRecords!(105, 0) Then
            teamRecords!(105, 0) = V8(I, 6)
            teamRecords!(105, 1) = 0
            teamRecords!(105, 2) = 0
            teamRecDesc$(105, 0) = gameTeams$(I)
            teamRecDesc$(105, 1) = VERSUS$(I)
            teamRecDesc$(105, 2) = gameTeams$(1 - I)
            teamRecDesc$(105, 3) = Date$
        End If

        If V8(I, 6) + V8(1 - I, 6) > teamRecords!(106, 0) Then
            teamRecords!(106, 0) = V8(I, 6) + V8(1 - I, 6)
            teamRecords!(106, 1) = V8(I, 6)
            teamRecords!(106, 2) = V8(1 - I, 6)
            teamRecDesc$(106, 0) = gameTeams$(I)
            teamRecDesc$(106, 1) = VERSUS$(I)
            teamRecDesc$(106, 2) = gameTeams$(1 - I)
            teamRecDesc$(106, 3) = Date$
        End If

        If V8(I, 6) + V8(1 - I, 6) < teamRecords!(107, 0) Then
            teamRecords!(107, 0) = V8(I, 6) + V8(1 - I, 6)
            teamRecords!(107, 1) = V8(I, 6)
            teamRecords!(107, 2) = V8(1 - I, 6)
            teamRecDesc$(107, 0) = gameTeams$(I)
            teamRecDesc$(107, 1) = VERSUS$(I)
            teamRecDesc$(107, 2) = gameTeams$(1 - I)
            teamRecDesc$(107, 3) = Date$
        End If

        If QR(I, 1, 6) > teamRecords!(108, 0) Then
            teamRecords!(108, 0) = QR(I, 1, 6)
            teamRecords!(108, 1) = 1
            teamRecords!(108, 2) = 0
            teamRecDesc$(108, 0) = gameTeams$(I)
            teamRecDesc$(108, 1) = VERSUS$(I)
            teamRecDesc$(108, 2) = gameTeams$(1 - I)
            teamRecDesc$(108, 3) = Date$
        End If

        If QR(I, 2, 6) > teamRecords!(108, 0) Then
            teamRecords!(108, 0) = QR(I, 2, 6)
            teamRecords!(108, 1) = 2
            teamRecords!(108, 2) = 0
            teamRecDesc$(108, 0) = gameTeams$(I)
            teamRecDesc$(108, 1) = VERSUS$(I)
            teamRecDesc$(108, 2) = gameTeams$(1 - I)
            teamRecDesc$(108, 3) = Date$
        End If

        If QR(I, 1, 6) + QR(1 - I, 1, 6) > teamRecords!(109, 0) Then
            teamRecords!(109, 0) = QR(I, 1, 6) + QR(1 - I, 1, 6)
            teamRecords!(109, 1) = 1
            teamRecords!(109, 2) = QR(I, 1, 6)
            teamRecDesc$(109, 0) = gameTeams$(I)
            teamRecDesc$(109, 1) = VERSUS$(I)
            teamRecDesc$(109, 2) = gameTeams$(1 - I)
            teamRecDesc$(109, 3) = Date$
        End If

        If QR(I, 2, 6) + QR(1 - I, 2, 6) > teamRecords!(109, 0) Then
            teamRecords!(109, 0) = QR(I, 2, 6) + QR(1 - I, 2, 6)
            teamRecords!(109, 1) = 2
            teamRecords!(109, 2) = QR(I, 2, 6)
            teamRecDesc$(109, 0) = gameTeams$(I)
            teamRecDesc$(109, 1) = VERSUS$(I)
            teamRecDesc$(109, 2) = gameTeams$(1 - I)
            teamRecDesc$(109, 3) = Date$
        End If

        ' STEALS
        If V8(I, 9) > teamRecords!(112, 0) Then
            teamRecords!(112, 0) = V8(I, 9)
            teamRecords!(112, 1) = 0
            teamRecords!(112, 2) = 0
            teamRecDesc$(112, 0) = gameTeams$(I)
            teamRecDesc$(112, 1) = VERSUS$(I)
            teamRecDesc$(112, 2) = gameTeams$(1 - I)
            teamRecDesc$(112, 3) = Date$
        End If

        If V8(I, 9) + V8(1 - I, 9) > teamRecords!(114, 0) Then
            teamRecords!(114, 0) = V8(I, 9) + V8(1 - I, 9)
            teamRecords!(114, 1) = V8(I, 9)
            teamRecords!(114, 2) = V8(1 - I, 9)
            teamRecDesc$(114, 0) = gameTeams$(I)
            teamRecDesc$(114, 1) = VERSUS$(I)
            teamRecDesc$(114, 2) = gameTeams$(1 - I)
            teamRecDesc$(114, 3) = Date$
        End If

        If QR(I, 1, 9) > teamRecords!(116, 0) Then
            teamRecords!(116, 0) = QR(I, 1, 9)
            teamRecords!(116, 1) = 1
            teamRecords!(116, 2) = 0
            teamRecDesc$(116, 0) = gameTeams$(I)
            teamRecDesc$(116, 1) = VERSUS$(I)
            teamRecDesc$(116, 2) = gameTeams$(1 - I)
            teamRecDesc$(116, 3) = Date$
        End If

        If QR(I, 2, 9) > teamRecords!(116, 0) Then
            teamRecords!(116, 0) = QR(I, 2, 9)
            teamRecords!(116, 1) = 2
            teamRecords!(116, 2) = 0
            teamRecDesc$(116, 0) = gameTeams$(I)
            teamRecDesc$(116, 1) = VERSUS$(I)
            teamRecDesc$(116, 2) = gameTeams$(1 - I)
            teamRecDesc$(116, 3) = Date$
        End If

        ' BLOCKS
        If V8(I, 8) > teamRecords!(118, 0) Then
            teamRecords!(118, 0) = V8(I, 8)
            teamRecords!(118, 1) = 0
            teamRecords!(118, 2) = 0
            teamRecDesc$(118, 0) = gameTeams$(I)
            teamRecDesc$(118, 1) = VERSUS$(I)
            teamRecDesc$(118, 2) = gameTeams$(1 - I)
            teamRecDesc$(118, 3) = Date$
        End If

        If V8(I, 8) + V8(1 - I, 8) > teamRecords!(119, 0) Then
            teamRecords!(119, 0) = V8(I, 8) + V8(1 - I, 8)
            teamRecords!(119, 1) = V8(I, 8)
            teamRecords!(119, 2) = V8(1 - I, 8)
            teamRecDesc$(119, 0) = gameTeams$(I)
            teamRecDesc$(119, 1) = VERSUS$(I)
            teamRecDesc$(119, 2) = gameTeams$(1 - I)
            teamRecDesc$(119, 3) = Date$
        End If

        If QR(I, 1, 8) > teamRecords!(121, 0) Then
            teamRecords!(121, 0) = QR(I, 1, 8)
            teamRecords!(121, 1) = 1
            teamRecords!(121, 2) = 0
            teamRecDesc$(121, 0) = gameTeams$(I)
            teamRecDesc$(121, 1) = VERSUS$(I)
            teamRecDesc$(121, 2) = gameTeams$(1 - I)
            teamRecDesc$(121, 3) = Date$
        End If

        If QR(I, 2, 8) > teamRecords!(121, 0) Then
            teamRecords!(121, 0) = QR(I, 2, 8)
            teamRecords!(121, 1) = 1
            teamRecords!(121, 2) = 0
            teamRecDesc$(121, 0) = gameTeams$(I)
            teamRecDesc$(121, 1) = VERSUS$(I)
            teamRecDesc$(121, 2) = gameTeams$(1 - I)
            teamRecDesc$(121, 3) = Date$
        End If

        ' TURNOVERS
        If V8(I, 12) > teamRecords!(122, 0) Then
            teamRecords!(122, 0) = V8(I, 12)
            teamRecords!(122, 1) = 0
            teamRecords!(122, 2) = 0
            teamRecDesc$(122, 0) = gameTeams$(I)
            teamRecDesc$(122, 1) = VERSUS$(I)
            teamRecDesc$(122, 2) = gameTeams$(1 - I)
            teamRecDesc$(122, 3) = Date$
        End If

        If V8(I, 12) < teamRecords!(123, 0) Then
            teamRecords!(123, 0) = V8(I, 12)
            teamRecords!(123, 1) = 0
            teamRecords!(123, 2) = 0
            teamRecDesc$(123, 0) = gameTeams$(I)
            teamRecDesc$(123, 1) = VERSUS$(I)
            teamRecDesc$(123, 2) = gameTeams$(1 - I)
            teamRecDesc$(123, 3) = Date$
        End If

        If V8(I, 12) + V8(1 - I, 12) > teamRecords!(124, 0) Then
            teamRecords!(124, 0) = V8(I, 12) + V8(1 - I, 12)
            teamRecords!(124, 1) = V8(I, 12)
            teamRecords!(124, 2) = V8(1 - I, 12)
            teamRecDesc$(124, 0) = gameTeams$(I)
            teamRecDesc$(124, 1) = VERSUS$(I)
            teamRecDesc$(124, 2) = gameTeams$(1 - I)
            teamRecDesc$(124, 3) = Date$
        End If

        If V8(I, 12) + V8(1 - I, 12) < teamRecords!(125, 0) Then
            teamRecords!(125, 0) = V8(I, 12) + V8(1 - I, 12)
            teamRecords!(125, 1) = V8(I, 12)
            teamRecords!(125, 2) = V8(1 - I, 12)
            teamRecDesc$(125, 0) = gameTeams$(I)
            teamRecDesc$(125, 1) = VERSUS$(I)
            teamRecDesc$(125, 2) = gameTeams$(1 - I)
            teamRecDesc$(125, 3) = Date$
        End If

    Next

    Open diskPaths$(1) + "RECORDS.GAM" For Output As #2

    For I = 0 To 48

        For I1 = 0 To 2
            Write #2, indRecords!(I, I1)
        Next

        For I1 = 0 To 4
            Write #2, indRecDesc$(I, I1)
        Next

    Next

    For I = 0 To 125

        For I1 = 0 To 2
            Write #2, teamRecords!(I, I1)
        Next

        For I1 = 0 To 3
            Write #2, teamRecDesc$(I, I1)
        Next

    Next

    Close #2

End Sub

